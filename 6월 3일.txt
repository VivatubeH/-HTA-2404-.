1) int[] arr1 = {10, 20, 30, 40, 50};
2) int[] arr2 = new int[] {10, 20, 30, 40, 50};
3) int[] arr5 = new int[5];

// 1) - 배열 리터럴로 객체 생성하기. 
[ 배열을 표현하는 리터럴은 { } 이거임.
 
2) 배열 리터럴로 배열 객체 생성하기.
[ 배열의 구체적인 타입까지 지정해서 만듬 ]

3) 빈 배열 객체 생성하기.

system.out.println(참조변수명) -- 참조하는 객체의 정보를 출력하는 기능이 실행됨.
- 참조변수가 갖고 있는 주소값이 아닌 객체의 정보가 출력됨. [ 항상 ]
- @를 기준으로 왼쪽으로 객체의 정보, 오른쪽은 해시코드값임.

문자열에서는 toString()이 그냥 문자열을 출력하게 되어있음

java.util.Arrays 클래스는 배열 객체에 대한 유용한 기능을 제공함.
Arrays.toString(배열)은 배열 객체에 저장된 값을 하나의 문자열로 제공함.

3)
[추가] - 몰라도 됨
System.out.println({10, 20, 30});  이렇게 하면 어떤 타입인지 구분이 안 가서 오류.
타입을 밝혀서 적어야 함.

클래스명에 s가 붙어 있으면 유용한 기능이 붙어 있는 경향이 많음.
[ 유틸 클래스 ]

배열을 다룰 때는 반복문으로 요소 하나 하나 다뤄야 함.

다차원 배열은 2개 이상의 인덱스를 사용하는 배열임.
다차원 배열의 모든 값을 처리하기 위해서는 내포된 for문을 사용해야 한다.

배열객체에는 length라는 프로퍼티(property, 특성, 속성, 성질, 값)이 있다.
property : 객체가 가지고 있는 변수

// * 배열의 각 요소에 값 저장하기 
    배열명[인덱스] = 값;

자바에서는 오류를 Error, Exception 2가지로 구분함.
[ 에러와 예외 2가지가 있음 ] 
[ 예외 : 개발자의 코딩 실수나 사용자의 잘못된 사용으로 발생 ]

Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5
	at array.ArrayDemo5.main(ArrayDemo5.java:32)
1) 오류가 발생한 쓰레드
2) 오류 발생으로 생성된 객체
3) 오류 메시지
4) 오류가 발생한 행번호

배열에서는 일반적으로는 향상된 for문을 사용함.
[ 모든 값을 다룰 때는 ]

향상된 for문으로는 값을 꺼내기만 가능함. 넣는 건 불가능함.
[ 반복문으로 값을 담는 것보다는 그냥 담는 게 낫긴함. ]
[ 인덱스가 없어서 값을 담을 수가 없음. ]

배열을 복사하는 경우
- 배열에 저장된 값을 더 큰 배열에 옮겨 담을 때
- 배열에 저장된 값을 다양한 방식으로 변경해야되는데, 원본은 유지해야 할 때

자바가 제공하는 배열 복사기능
- System.arraycopy(src, beginIndex, dest, copyIndex, length) 기능 사용
src: 원본배열
beginIndex : 원본배열의 복사 시작 위치
dest : 대상배열
copyIndex : 대상 배열에 저장될 위치
length : 복사할 원본배열의 값의 개수

Arrays.sort(배열명) - 배열에 저장된 값을 오름차순으로 정렬할 수 있다.

값을 정렬하는 이유 - 정렬된 값은 빨리 찾을 수 있다.
[ 정렬을 시켜놓으면 빠르게 찾을 수 있다. ]

배열에서 지정된 데이터 찾기 = 배열에서 지정된 값과 동일한 값이
배열의 몇 번째 인덱스에 저장되어 있는지를 찾는 것이다.
[ 원하는 값을 찾지 못했을 때는 -1을 제공한다. = 절대로 나올 수 없는 값을 설정. ]

String[] users = {"김유신", "강감찬", "이순신", "류관순", "홍길동"};	
int foundIndex = Arrays.binarySearch(users, "안중근");

위처럼 binarySearch를 이용해서도 찾을 수 있다.

배열의 마지막 인덱스 : number.length - 1

배열의 처음부터 끝까지를 이용할 때는 향상된 for문을 사용한다.

Math.abs() 절댓값을 계산해줌
나올 수 없는 값을 미리 세팅함. [ 초기값 설정이 중요함 ]


