/*
Top-N 분석
- 조건에 맞는 최상위 레코드 N개 혹은 최하위 레코드 N개를 조회하는 것이다.
- rownum 의사컬럼(가짜컬럼)을 이용한 Top-N 분석
    + rownum
        * 의사컬럼(pseudo column)이다.
        * 조회된 행에 순서대로 1번부터 시작하는 순번을 부여한다.
    + SQL
        SELECT ROWNUM, 컬럼, 컬럼, 컬럼 --------------- 3
        FROM ( -- 반드시 내부에 인라인 뷰가 만들어져있어야 함. 정렬이 되어 있어야 함.
            SELECT 컬럼, 컬럼, 컬럼  
            FROM 테이블
            WHERE 조건식
            ORDER BY 컬럼 ASC | DESC  ------------------ 1
        )
        WHERE ROWNUM <= N             ------------------ 2
        * 1 : 인라인뷰를 이용해서 조회할 데이터를 먼저 정렬해야 한다.
              ORDER BY 절을 이용해서 분석대상이 되는 컬럼을 지정하고,
              ASC 혹은 DESC를 명시해서 정렬방법을 지정한다.
        * 2 : ROWNUM은 1번부터 순번이 부여되는 의사컬럼이기 때문에
              WHERE ROWNUM <= N은 순위가 1 ~ N번째까지 데이터를 필터링한다.
        * 3 : SELECT 절에서는 ROWNUM을 생략해도 상관없다.
              조회된 데이터는 순서가 보장되는 List계열의 자료구조에 저장해서 출력할 때
              순서대로 출력하고, 순번도 표시할 수 있다. 
              
        SELECT 문의 처리 순서
        
        SELECT 컬럼1, 컬럼2, 컬럼3 AS 별칭      ------- 5
        FROM 테이블                             ------- 1
        WHERE 조건식                            ------- 2
        GROUP BY 컬럼                           ------- 3
        HAVING 조건식2                          ------- 4
        ORDER BY 컬럼                           ------- 6
        [ 2 ~ 4 : WHERE, GROUP BY, HAVING 절은 SELECT보다 먼저 처리된다.
                  WHERE, GROUP BY, HAVING 절에서는 별칭을 사용할 수 없다. ]
        [ 6 : SELECT 절에서 지정한 별칭 사용 불가 ]
        
        * SELECT문의 처리 순서에 따른 데이터의 변화
        - 커미션을 받는 직원들을 직종아이디별로 직원수를 조회했을 때,
          직원수가 10명 이상인 직종과 직원수 조회
          SELECT JOB_ID, COUNT(*) AS CNT   -- 직종아이디와 직원수 조회 - 5
          FROM EMPLOYEES                                               - 1
          WHERE COMMISSION_PCT IS NOT NULL -- 커미션을 받는 직원들     - 2
          GROUP BY JOB_ID                  -- 직종아이디별로 그룹핑    - 3
          HAVING COUNT(*) >= 10            -- 그룹함수로 조건식 만들어서 다시 필터링 -4
          ORDER BY CNT ASC;                -- 조회된 행을 정렬 -6
          
          -- 2번에서 많이 필터링해야됨 ( 불필요한 데이터로 작업하지 않게 )
          2번 단계에서 불필요한 데이터를 많이 덜어내면 다음 단계에서 처리할 데이터의 개수가
          줄어들기 때문에 처리속도가 개선될 수 있다.
          
- ROWNUM을 이용해서 지정된 순위내의 데이터 조회하기
    + SQL
        SELECT 별칭, 컬럼, 컬럼
        FROM (
              SELECT ROWNUM AS 별칭, 컬럼, 컬럼, 컬럼 -- ROWNUM으로 순위를 부여하고
                                                         별칭을 지정한다.
              FROM   (
                      SELECT 컬럼, 컬럼, 컬럼
                      FROM 테이블
                      WHERE 조건식
                      ORDER BY 컬럼
                      )
               )
        WHERE 별칭 >= 6 AND 별칭 <= 10
*/
SELECT ROWNUM
    , EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50;

-- 급여를 가장 많이 받는 직원 10명의 직원아이디, 이름, 급여, 직종아이디를 조회하기
-- 10등이랑 11등이 겹치는 경우, 11등(공동 10등)은 출력 안됨...
-- 원하는 순위 내의 데이터를 얻을 수 있음.
SELECT ROWNUM 
    , EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
    , JOB_ID
FROM (SELECT EMPLOYEE_ID
            , FIRST_NAME
            , SALARY
            , JOB_ID
      FROM EMPLOYEES
      ORDER BY SALARY DESC)
WHERE ROWNUM <= 10;

-- 이렇게 되면 정렬되기 전의 순번을 가져오게 됨.
-- ORDER BY가 가장 마지막으로 수행됨
SELECT ROWNUM, SALARY, FIRST_NAME
FROM EMPLOYEES
ORDER BY SALARY DESC;

-- 직원들을 급여순으로 정렬했을 때 급여순위가 6위 ~ 10위에 해당하는 직원의
-- 순위, 직원아이디, 이름, 급여를 조회하기
-- 1부터가 가능하고 중간은 출력이 안됨. (TOP_N 분석이라고 불리는 이유)
SELECT SALARY_RANK
    , FIRST_NAME
    , SALARY
    , JOB_ID
FROM (SELECT ROWNUM AS SALARY_RANK
        , FIRST_NAME
        , SALARY
        , JOB_ID
      FROM (SELECT ROWNUM 
                , EMPLOYEE_ID
                , FIRST_NAME
                , SALARY
                , JOB_ID
            FROM EMPLOYEES
            ORDER BY SALARY DESC))
WHERE SALARY_RANK >= 6 AND SALARY_RANK <= 10;

/*  
분석함수
- 분석함수는 조회결과에 대해서 [각각의 행마다 분석결과를 제공]하는 함수다.
- 주요 분석함수
    + ROW_NUMBER()
        * 조회결과에 1번부터 시작하는 순번을 부여한다.
    + RANK()
        * 조회결과에 1번부터 시작하는 순위를 부여한다.
        * 같은 값을 가진 경우 같은 순위를 부여한다.    
    + DENSE_RANK()
        * 조회결과에 1번부터 시작하는 순위를 부여한다.
        * 같은 값을 가진 경우 같은 순위를 부여한다.
    + SUM()
        * 조회결과에 대한 누계를 보여준다.
        
    OVER가 붙으면 분석함수가 됨.
*/

-- ROW_NUMBER()로 순번 부여하기
-- 직원들의 급여를 기준으로 정렬했을 대 급여가 높은 순으로 순번을 부여하기
SELECT ROW_NUMBER() OVER (ORDER BY SALARY DESC) AS ROW_NUM
    , EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
FROM EMPLOYEES;

-- 직원들의 급여를 기준으로 정렬했을 때 해당 부서별로 급여가 높은 순으로 순번을 부여하기
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , DEPARTMENT_ID
    , SALARY
FROM (
      SELECT ROW_NUMBER() OVER (PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) ROW_NUM
        , EMPLOYEE_ID
        , FIRST_NAME
        , DEPARTMENT_ID
        , SALARY
      FROM EMPLOYEES
      )
WHERE ROW_NUM = 1;

/*
페이징 처리
- 웹에서 한 화면에 표시할 수 있는 데이터의 갯수는 제한적이다.
- 사용자에게 많은 데이터를 보여주기 위해서 페이지 내비게이션을 제공하고 
  사용자가 해당 페이지번호를 클릭하면 페이지번호에 맞는 범위의 데이터를 표시하는 것이다.
- 필요한 정보
    + 한 화면에 표시할 데이터 개수 : ROWS = 10
    + 사용자가 클릭한 페이지 번호 : PAGENO = 1
    예시)
           페이지번호    시작순번:(PAGENO-1)*ROWS+1      끝순번:PAGENO*ROWS
        1                        1                         10
        2                        11                        20
        3                        21                        30
        4                        31                        40
        5                        41                        50
        
    + SQL
        게시글을 페이지 번호에 맞게 조회해서 제공하는 SQL(최근에 게시된 글이 먼저 출력된다.)
        SELECT ROW_NUM
            , POST_NO
            , POST_TITLE
            , POST_WRITER
            , POST_CREATED_DATE
        FROM (
              SELECT ROW_NUMBER() OVER (ORDER BY POST_NO DESC) ROW_NUM
                    , POST_NO
                    , POST_TITLE
                    , POST_WRITER
                    , POST_CREATED_DATE
              FROM POSTS
              )
        WHERE ROW_NUM >= 시작순번 AND ROW_NUM <= 끝순번;
              
*/
-- 직원정보를 직원아이디를 기준으로 10개씩 조회하기
-- (직원아이디를 기준으로 오름차순으로 정렬했을 때)
-- 데이터가 삭제, 수정될 수 있으므로 먼저 순번을 매기고 순번에 따라 가져와야 함.
SELECT ROW_NUM
    , EMPLOYEE_ID
    , FIRST_NAME
FROM (
      SELECT ROW_NUMBER() OVER (ORDER BY EMPLOYEE_ID ASC) ROW_NUM
            , EMPLOYEE_ID
            , FIRST_NAME
      FROM EMPLOYEES
      )
WHERE ROW_NUM >= 11 AND ROW_NUM <= 20;

/*
순위함수
- RANK, DENSE_RANK, ROW_NUMBER
- RANK 
    + 중복 순위가 있는 경우 다음 순위로 건너뛴다.
    + 1,2,2,2,5,5,7...
- DENSE_RANK
    + 중복 순위가 있어도 순위가 연속적이다.
    + 1,2,2,2,3,4,4,5...
- ROW_NUMBER
    + 중복순위없이 순번을 부여한다.
    + 1,2,3,4,5,6,7,8,...
    + 페이징 처리에는 지정된 범위에 대해서 항상 같은 갯수의 데이터가 조회되는 
        ROW_NUMBER을 사용한다.
- NTILE
    + 조회결과를 N개의 그룹으로 분류한다.
*/
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
    , RANK() OVER (ORDER BY SALARY DESC) RK
    , DENSE_RANK() OVER (ORDER BY SALARY DESC) DR
    , ROW_NUMBER() OVER (ORDER BY SALARY DESC) RN
FROM EMPLOYEES;

-- NTITLE로 조회된 행을 그룹으로 분류하기
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
    , NTILE(2) OVER (ORDER BY SALARY DESC) G2
    , NTILE(3) OVER (ORDER BY SALARY DESC) G3
    , NTILE(4) OVER (ORDER BY SALARY DESC) G4
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50;

/*
집계함수
- SUM, MIN, MAX, AVG, COUNT
- 위의 함수는 그룹함수와 집계함수(분석함수)로 사용할 수 있다.
    + 그룹함수로 사용될 때
        SELECT SUM(SALARY)
        FROM EMPLOYEES;
        * 조회결과가 한 건 조회된다.
        * 그룹함수와 컬럼명을 같이 적을 수 없다.
        
    + 집계함수(분석함수)로 사용될 때
        SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, SUM(SALARY) OVER ()
        FROM EMPLOYEES;
        * OVER 키워드와 같이 사용하면 분석함수가 된다.
        * 분석함수는 행마다 하나의 결과가 반환되기 때문에 컬럼명과 같이 적어도 된다.
        
*/

-- SUM을 그룹함수로 사용할 때
SELECT SUM(SALARY)
FROM EMPLOYEES;
-- * 테이블이 하나의 그룹이기 때문에 조회결과가 한 건 조회된다.

SELECT JOB_ID, SUM(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID;
-- * JOB_ID가 같은 것끼리 그룹이 만들어졌기 때문에 각 그룹마다 조회결과가 한 건 조회된다.

-- SUM을 집계함수(분석함수)로 사용할 때
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
    , DEPARTMENT_ID
    , SUM(SALARY) OVER () AS TOTAL_SALARY
    , SUM(SALARY) OVER (PARTITION BY DEPARTMENT_ID) AS DEPT_SALARY
    , SUM(SALARY) OVER (PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) AS SUM_SALARY 
FROM EMPLOYEES;
-- * 집계함수(분석함수)로 사용하면 행마다 결과가 반환되기 때문에 컬럼명과 같이 사용할 수 있다.

/*
윈도우 함수
- 분석함수 중에서(AVG, COUNT, SUM, MAX, MIN) 윈도우 절을 사용할 수 있는 함수다.
- SQL
    SELECT
        윈도우함수 OVER(PARTITION BY 컬럼명
                        ORDER BY 컬럼명 ASC|DESC
                        ROWS
                        BETWEEN 표현식 AND 표현식)
        * ROWS: 행의 집합을 지정한다.
            * BETWEEN A AND B : 윈도우의 시작과 끝을 지정한다
            * 표현식에 사용가능한 값
                UNBOUNDED PRECEDING : PARTITION의 첫번째 행에서 윈도우가 시작된다.
                UNBOUNDED FOLLOWING : PARTITION의 마지막 행에서 윈도우가 시작된다.
                CURRENT ROW: 윈도우의 시작이나 끝 위치가 현재 행이다.
*/
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , DEPARTMENT_ID
    , SALARY
    , SUM(SALARY) OVER (ORDER BY DEPARTMENT_ID, SALARY
                        ROWS 
                            BETWEEN UNBOUNDED PRECEDING 
                            AND UNBOUNDED FOLLOWING) TOTAL_SALARY
    , SUM(SALARY) OVER (ORDER BY DEPARTMENT_ID, SALARY
                        ROWS 
                            BETWEEN UNBOUNDED PRECEDING 
                            AND CURRENT ROW) FIRST_CURRENT_SALARY
    , SUM(SALARY) OVER (ORDER BY DEPARTMENT_ID, SALARY
                        ROWS 
                            BETWEEN CURRENT ROW 
                            AND UNBOUNDED FOLLOWING) CURRENT_LAST_SALARY                        
FROM EMPLOYEES;

/*
기타함수
- LISTAGG(List Aggregate 함수)
    + 행데이터를 특정한 구분문자를 가지는 열로 표현하는 함수다.
    + 그룹함수이다.
*/
-- 60번 부서에 소속된 직원들의 이름을 하나의 문자열로 조회하기
SELECT LISTAGG(FIRST_NAME, ',') WITHIN GROUP(ORDER BY FIRST_NAME ASC)
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60;

SELECT FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60
ORDER BY FIRST_NAME ASC;

-- 각 소재지아이디별 부서명을 조회하기
SELECT D.LOCATION_ID
    , L.CITY
    , LISTAGG(DEPARTMENT_NAME, ',') WITHIN GROUP(ORDER BY DEPARTMENT_NAME ASC) NAMES
FROM DEPARTMENTS D, LOCATIONS L
WHERE D.LOCATION_ID = L.LOCATION_ID
GROUP BY D.LOCATION_ID, L.CITY;

-- 소재지아이디별 부서수를 조회하기
SELECT LOCATION_ID
    , COUNT(*)
FROM DEPARTMENTS
GROUP BY LOCATION_ID;

-- 소재지아이디별 부서수를 조회하는데, 소재지아이디, 도시명, 부서개수를 조회
SELECT L.LOCATION_ID
    , L.CITY
    , A.CNT
FROM (
      SELECT LOCATION_ID, COUNT(*) CNT
      FROM DEPARTMENTS
      GROUP BY LOCATION_ID) A, LOCATIONS L
WHERE A.LOCATION_ID = L.LOCATION_ID;

SELECT D.LOCATION_ID
    , L.CITY
    , COUNT(*)
FROM DEPARTMENTS D, LOCATIONS L
WHERE D.LOCATION_ID = L.LOCATION_ID
GROUP BY D.LOCATION_ID, L.CITY;

/*
    계층검색
    - 테이블의 데이터가 상위-하위 관계에 있는 계층적 구조를 이루고 있을 때
      특정 데이터의 상위 데이터 혹은 특정 데이터의 하위 데이터를 검색하는 SQL 구문이다.
    - SQL 형식
        SELECT LEVEL, 컬럼, 컬럼, 컬럼
        FROM 테이블
        START WITH 조건식
        CONNECT BY PRIOR 조건식;
        + LEVEL
            * 의사컬럼이다.
            * 조회되는 각 행에 대해서 레벨을 반환한다.
            * 레벨은 최상위행부터 부여되는 1부터 시작하는 순번이다.
        + START WITH 조건식
            * 계층 검색의 시작행을 지정한다.
            * 제시된 조건식이 TRUE로 판정되는 행이 계층검색의 시작점이 된다.
        + CONNECT BY PRIOR 조건식
            * 부모행과 자식행간의 관계를 설정한다.
            * 부모행과 자식행간의 관계를 어떻게 설정하느냐에 따라서
              시작행에서 상위방향으로, 시작행에서 하위방향으로 계층 검색을 수행한다.
            * 시작행에서 -> 하위방향으로 검색하기
                CONNECT BY PRIOR 부모행 = 자식행;
                CONNECT BY PRIOR 부모행(부모키 혹은 기본키) = 자식행(외래키)
                예시)
                
                EMP_ID  EMP_NAME  MGR_ID
                100      김사장    NULL
                101      이부장    100
                102      박부장    100
                103      송과장    101
                
                *김사장의 모든 하위행을 조회하기
                START WITH EMP_ID = 100
                CONNECT BY PRIOR EMP_ID = MGR_ID;
                * EMP_ID는 기본키 컬럼이다.
                * MGR_ID는 외래키 컬럼이다.
                  외래키 컬럼이 있는 곳이 자식행이다.
                * 즉, CONNECT BY PRIOR EMP_ID = MGR_ID;
                                        부모행 = 자식행;
                                        
            * 시작행에서 -> 상위방향으로 검색하기
                CONNECT BY PRIOR 자식행 = 부모행;
*/ 
-- 102번 직원의 모든 하위행을 조회하기
SELECT LEVEL, EMPLOYEE_ID, FIRST_NAME, MANAGER_ID
FROM EMPLOYEES
START WITH EMPLOYEE_ID = 102
CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID;

-- 100번 직원의 하위 직원을 전부 조회하기
SELECT LEVEL
    , EMPLOYEE_ID
    , LPAD(' ', (LEVEL-1)*3, ' ') || FIRST_NAME
    , MANAGER_ID
FROM EMPLOYEES
START WITH EMPLOYEE_ID = 100
CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID;

-- 트리 구조에서 특정한 행의 상위는 무조건 1개임.

-- 113번 직원의 상위 직원을 전부 조회하기
SELECT LEVEL
    , EMPLOYEE_ID
    , LPAD(' ', (LEVEL-1)*3, ' ') || FIRST_NAME
    , MANAGER_ID
FROM EMPLOYEES
START WITH EMPLOYEE_ID = 113
CONNECT BY PRIOR MANAGER_ID = EMPLOYEE_ID;

SELECT LEVEL
FROM DUAL
CONNECT BY LEVEL <= 12;

-- 2004년 월별 입사 직원 수 조회
SELECT TO_CHAR(HIRE_DATE, 'MM') MONTH, COUNT(*) CNT
FROM EMPLOYEES
WHERE TO_CHAR(HIRE_DATE, 'YYYY') = '2004'
GROUP BY TO_CHAR(HIRE_DATE, 'MM')
ORDER BY 1;

-- 1부터 12까지의 MONTH에 1~9월은 앞에 0을 붙여서 얻기.
WITH MONTHS AS (
    SELECT LPAD(LEVEL, 2, '0') MONTH
    FROM DUAL
    CONNECT BY LEVEL <= 12
)

-- 2004년 월별 입사 직원 수를 빠짐없이 조회
SELECT B.MONTH, NVL(A.CNT, 0) CNT
FROM (
        SELECT TO_CHAR(HIRE_DATE, 'MM') MONTH, COUNT(*) CNT
        FROM EMPLOYEES
        WHERE TO_CHAR(HIRE_DATE, 'YYYY') = '2004'
        GROUP BY TO_CHAR(HIRE_DATE, 'MM')
      ) A, MONTHS B
WHERE A.MONTH(+) = B.MONTH
ORDER BY 1;

SELECT TO_DATE('2019/07/01') + level-1
from dual
connect by level <= to_date('2019/07/07') - to_date('2019/07/01') + 1
