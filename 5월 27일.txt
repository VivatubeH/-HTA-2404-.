2024/05/27(월)
: 점심시간 12시 50분 ~ 2시

강사님 이메일, 연락처
eungsulee@hanmail.net
010-2837-2557 

복습 필수. 무조건 9시까지 자율학습 해야함.... 
예비군도 프로젝트 할 때 가기. ( 하반기 작계는 연기하자... )
수업은 빠지면 안됨.
진짜 어려우니 각오하고 열심히 하기.
평일에 아무것도 하지말기. 모르는 건 무조건 물어보기.
6개월 간 매일매일 새로운 걸 배움. 꼭 메모하기.
블로그나 노션에 정리하기. ( 나중에 찾아볼 수 있게 ) ( 저녁에 or 수업중에 )
예습은 필요 없음. 수업 시간에 코딩 해본 거 저녁에 다시 리뷰하기. ( 그냥 따라치기 x, 이해하면서 하기 )
그 날 그 날 수업 들을 때 생각하면서 듣기. ( 왜인지에 대해서 고민하면서 듣기. 더 좋은 방법은 없는지 같은 )
모르고 넘어가는 게 있으면 안됨. 앞은 천천히 하고 갈수록 빨라질 예정.

java - 변수, 자료형, 제어문, 반복문
- 클래스, 객체, 메서드, 생성자
- 상속, 클래스형변환, 추상화, 인터페이스
- Java API
- 자료구조, 스레드, 네트워크

등등을 배울 예정. 

database
- SQL

과정에서는 PL/SQL은 안 배움.
자바랑 SQL만 배움.

web 
- HTML [ 웹브라우저 용 문서 작성 ]
- CSS [ 문서에다가 스타일 부여 ]

html + css 조합으로 웹브라우저에서 보여지는 문서 제작 가능.
but 문서 형태는 정해져있지만, 시간이나 상황에 따라서 내용이 달라져야 함.
웹 문서 디자인은 퍼블리셔가 함. 
 
html과 css는 수업에서 많이 다루지 않을 예정. 
그냥 부트스트랩을 배울 거임.

- Javascript [ 아주 중요. ] 
: 브라우저안에서 실행되는 프로그램을 위해 배움.
그 순간에 동적으로 실행되게 만들어야 함.

- JSP ( java server pages )

수업에서 잘해야 할 것 가장 큰 것 3개
1) JAVA
2) SQL
3) JAVASCRIPT

교재는 복습용이고, 수업 시간에는 교재 진행은 x ( 복습 때 키워드 보고 복습하기. )

이후 세미프로젝트 
- 2주~3주 정도. ( 간단한 웹 애플리케이션 제작 )

그 다음은 Spring, spring boot를 배움.
- 의존성주입, 관점지향프로그래밍, 선언적트랜잭션처리
- spring mvc, RESTful,
- thymeleaf, jpa, mybatis

docker, aws

이후 파이널 프로젝트 - 6~7주 정도.

배울 게 많음...

취업이 목적이니까, 자바 공부를 하면서도 병행해서 준비해야 할 게 있음.
( 코딩 테스트, 자격증 등... )

우선순위 : 자바 >>>>>>>>>>>>>>> 자격증.

환경이 어려울수록 더 열심히 해야함.
절대 혼자 20분 이상 고민하지 말기. ( 고민의 한계는 20분임. 20분 이상 고민해서 안 풀리면 물어보기. )
[ 왜? 20분 이상 고민해도 모르면 그냥 모르는거임. ]

근데, 코딩테스트는 2~3시간 고민해야 함.

혼자 공부하기 보다는 조별로 하든, 스터디 그룹을 만들든 하는 게 필요할 수 있음.
작심삼일이 되지 않게 새로운 작심삼일을 계속해야 함.

----------------------------------------------------------------------------------------------------------------

프로그래밍 : 컴퓨터에게 일을 시키기 위해 작성하는 것.
[ 컴퓨터에게 특정 작업을 시키는 것. ]

프로그램을 작성함 = 컴퓨터가 수행할 작업 지시서를 만든 것임.
[ 순서와 절차가 중요함. ]

- 한국어로 먼저 생각해서 설계하고, 이후 프로그래밍으로 옮겨야 함.
- 코딩은 타자 연습이 아니라, 스스로 먼저 읽고 생각해서 작성해야 함. 
- 코드에다가 한글로 주석 달아두기. ( 연습이 많이 됨. )
: 저녁에 코드를 리뷰할 때 수업 끝난 뒤에 각자의 주석을 달아야 함. 

자바를 사용하려면 
1) 컴퓨터에 자바 개발환경을 먼저 설치해야함.
2) 코드에 대한 문법 검사 및 자동 완성을 지원해주는 통합 개발 도구도 설치해야 함.

수업때는 이클립스를 사용함.
협업을 위해서는 개발환경을 통일하는 것이 중요함. ( 소스코드를 주고받을 때 중요. )

초창기 자바에서 하드웨어에 구애받지 않는 프로그램 개발을 위해서 번역기를 사용함. 
번역기를 한 번 거쳐야 하니깐, 자바는 프로그램의 실행 속도가 기본적으로 느림.
초창기 자바인 oak에서 위와 같이 만들었는데 인터넷의 등장으로
운영체제가 달라서 실행이 안 되는 문제를 해결하기 위해서
운영체제 별로 번역기를 따로 만듬. 컴퓨터에는 번역기만 설치하면 다 실행가능해짐. 
이게 자바임.

c나 c++은 각각의 버전으로 따로 만들어서 속도가 자바에 비해 빠름.
 
자바 실행 환경 = 자바 번역기임.

오라클 = 오라클 회사에서 만든 최초의 상용 데이터베이스.
jdk는 오라클 홈페이지에서 다운로드 받을 수 있음.
java.sun.com

자바
- JRE ( Java Runtime Environment, 자바 실행 환경 )
: 번역기(JVM, Java Virtual Machine, 자바가상머신) + 라이브러리
* 즉, JRE는 자바로 작성된 애플리케이션을 실행할 수 있는 환경을 구축함.

- JDK ( Java Development Kit, 자바개발도구 )
: JRE가 포함되어 있고 부가적으로 컴파일러, 디버거도 포함되어 있음.
* 즉, JDK는 자바로 애플리케이션을 개발하고 실행할 수 있는 환경을 구축함.
* 기본적으로 JavaSE용 JDK를 설치한다.

: 즉 JRE는 실행만 가능하고, JDK가 있어야 개발이 가능함.

자바는 프로그램 작성 JVM(번역기)가 이해할 수 있는 언어로 자동 변환됨.

java edition 
- java ME(Micro Edition) : 소형 기기, 태블릿, 휴대폰, 드론 등에 사용되는 애플리케이션 개발용 자바 버전.
- java SE(Standard Edition) : 데스크탑, 노트북에서 사용되는 애플리케이션 개발용 자바 버전.
- java EE(Enterprise Edition) : 서버용 컴퓨터에서 실행되는 애플리케이션 개발용 자바 버전. 

오픈 소스 : 누구나 접근해서 무료로 사용할 수 있음.

bin 폴더내에 자바 개발파일 등이 포함되어 있음. 
java.exe - 자바 가상머신을 실행할 수 있음.

시스템 환경 변수가 필요한 이유 - 자바로 만들어진 프로그램을 사용할 때, 
사용하기 위해서는 자바의 라이브러리가 필요함. jdk가 설치된 경로가 컴퓨터마다 상이함.
자바가 설치된 경로를 JAVA_HOME이라는 이름으로 등록하면
자바가 어느 폴더에 설치되어있는지 알려주게 됨. 
자바로 만들어진 프로그램은 JAVA_HOME을 찾아서 실행하게 됨.

path에 등록하면 실제로 그 폴더로 이동하지 않더라도 아무 위치에서나 실행가능함.

스크립트 언어와 컴파일 언어 

스크립트 언어 : javascript, python
 - 소스코드를 바로 실행할 수 있다. ( 작성한 코드를 변환없이 실행 가능. )

컴파일 언어 : c, c++, java
 - 소스코드를 실행코드로 변환한 다음에 실행할 수 있다. ( 바로 실행 불가능. )
각 운영체제에 맞는 기계어 코드로 변환됨. ( 윈도우면 윈도우에 맞게, 맥이면 맥에 맞게 )
[ 바꾸는 도구를 컴파일러라고 부름. compiler ] 
변환된 실행코드를 실행함.

소스코드를 실행코드로 바꾸는 걸 컴파일이라고 하고,
소스코드를 실행코드로 바꾸는 걸 컴파일러라고 함.
( 자바에서는 javac.exe가 컴파일러임. )

실행 속도는 컴파일 언어가 실행속도 면에서 우수함.

소스코드가 javac.exe로 인해 바이트 코드로 된 실행파일로 만들어지고 
java.exe로 바이트 코드(자바 가상머신이 이해할 수 있는 코드)로 된 실행파일을 실행시킴.
java.exe는 즉 JVM(번역기)를 실행시키는 역할을 수행함.

자바스크립트, 파이썬은 실행환경을 컴퓨터에 설치하는 게 반드시 선행되어야 함.

C는 실행환경 필요없이 그냥 윈도우 운영체제에서 실행 가능함. ( 번역하는 과정이 필요 없음. )
즉, C는 윈도우가 이해할 수 있는 기계어코드로 바로 변환됨.
예를 들어 C를 윈도우 개발환경에서 컴파일하면 윈도우가 이해하는 기계어 코드로 변환되고
리눅스 개발환경에서 C를 컴파일하면 리눅스가 이해하는 기계어 코드로 변환됨.
C는 해당 운영체제가 바로 실행할 수 있기 때문에 속도가 빠름.

C는 실행 파일을 플랫폼에서 공유해서 쓸 수가 없음.

자바는 플랫폼에 독립적인 언어임. ( 소프트웨어나 하드웨어의 종류와 상관없음. )

C는 운영체제에 따라 자료형의 크기도 가변적일 수 있다. ( int가 2바이트가 되거나, 4바이트가 되거나... )
반면 자바는 어디서든 자료형의 크기가 동일한 특징을 가진다.

코딩에 적합한 글꼴은 숫자 1, 소문자 l, 대문자 I 및 숫자 0, 알파벳 O를 구분할 수 있어야 함.

한메타자연습으로 영타 연습하기.

자바에서의 소스코드 ( 설계도 ) 는 항상 기본 형식이 정해져있음.

public class 설계도이름 { 
    public static void main(String[] args){
      수행문;
      수행문;
      수행문;
    }
}

JVM은 설계도 안에 있는 main을 자동으로 무조건 실행함. ( main은 진입점이 된다. )
System은 실행이 되는 내 컴퓨터
System.out은 표준 출력 장치 ( 모니터 ) / System.in은 표준 입력 장치 
print 뒤에 ln은 line new, 즉 새로운 줄로 바꾼다는 뜻임.

public class Hello{ // 자바 설계도의 시작, public class 설계도이름.
	public static void main(String[] args) { // JVM이 자동으로 실행하게 되는 진입점.
		System.out.println("Hello,Java!"); // System : 내 컴퓨터, out : 출력
// System.out : 표준출력 System.in : 표준입력 println : 화면에 출력함. ( ln은 line new, 줄바꿈 )
	}
}

소스코드를 파일로 저장하는 이름이 설계도이름과 같아야 함. 
소스파일인 경우에는 확장자가 java로 끝나야 함. ( 원래 확장자의 이름은 결정되어 있지 않음. )
반드시 지켜야하는 건 설계도 이름과 파일명이 같아야 함.

.java(얘는 그냥 이름 붙인거)를 컴파일하면 바이트코드(실행파일)인 .class 파일이 생성됨.
.java를 .class로 만들려고 하면 javac.exe Hello.java와 같은 방식으로 적어야 함.
javac.exe는 컴파일러를 실행하는 명령어 - 즉, 소스코드를 바이트코드로 변환해주는 명령어임.
( .class라는 이름을 가지게 되는 건 무조건임. 즉, 자바에서 실행파일은 무조건 .class라는 이름을 가짐. )

위 단계를 컴파일이라고 함.

실행하려면 java.exe Hello와 같은 방식으로 적어야 함.
( 실행파일은 무조건 .class 여서 class를 붙일 필요가 없음. )

컴파일하기
 - 형식
      javac.exe 소스파일명.확장자
 - Hello.java 소스파일의 코드를
   JVM이 이해하는 바이트코드로 변환한다.
 - 컴파일이 완료되면 Hello.class 실행 파일이 생성된다.
 * 실행파일의 확장자는 언제나 .class다.

실행하기 ( 번역 )  
 - 형식 
    jave.exe 실행파일명
 - JVM을 실행시킨다.
 - JVM은 실행파일명에 해당하는 Hello.class 파일을 로드한다.
 - JVM은 Hello.class를 운영체제가 이해할 수 있는 기계어코드로 변환해서 운영체제에 전달해 실행시킨다.

명령 프롬프트에서 cd는 change directory, 디렉터리 변경 명령어임.

.class는 가상 머신용 설계도이고 .java는 개발자용 설계도임. 

javac.exe는 컴파일러 실행이고, java.exe는 JVM을 실행함.

JDK를 설치했기 때문에 메모장에서도 개발은 가능하지만 불편하니까,
IDE를 설치해서 개발을 함.

백엔드 기본 기술 - Spring, java, sql, jsp

처음 한달이 가장 중요함. 
자바를 완벽하게 한 달 동안 배우고 이해해야지 나중에 스프링을 잘 해내갈 수 있음.

자바로 백엔드를 개발할 때 스프링을 필수적으로 사용함.
스프링을 뒤에서 길게 진행할 예정임. 

AWS 같은 건 개발자의 영역이 아닌 인프라팀의 영역이니 깊게 다루지 않을 것.
초급에게 요구되는 기술이 아님.

제일 중요한 것
: 자바를 완벽하게 할 줄 알아야 하고, SQL 할 줄 알아야 하고, 스프링 할 줄 알아야 하고,
자바 스크립트를 할 줄 알아야 함.

이클립스 초기 세팅에서 encoding에서 Workspace, CSS files, HTML files, JSP file 전부 UTF-8로 바꿔야 함

https://github.com/naver/d2codingfont
가독성 좋은 개발자용 글꼴.

이클립스 초기 설정할 것 2가지
1. 인코딩 설정.
2. 폰트 설정.

이클립스에서 창 하나하나를 뷰라고 부름.
( project explorer뷰, outline 뷰, problems 뷰 등등... )

이클립스의 perspective 
: javaEE, Database, debug 등등....

각각의 perspective 마다 적정한 화면 뷰를 여러 개 가지고 있음.
perspective 전환은 우측 상단 눌러서 바꿈.

기본은 java perspective로 간다...

코딩하다 실수로 perspective의 뷰 하나를 지워도
우측 상단 아이콘 오른쪽 버튼 눌러서 reset 하면 다시 초기세팅으로 돌아감.

이클립스에서는 항상 프로젝트 단위로 작업을 함. ( 실제 현업에서도 )
프로젝트를 만들고 그 안에서 만들어내야 함.

주로 자바에서 java.lang이나 java.util에 있는 파일들을 사용하게 됨.

프로그래밍에서 라이브러리는 유용한 기능들의 집합임. ( 자바에서는 클래스들을 모아놓은 것. )

java.base, java.sql 같은 건 모듈임. ( 모듈은 아직 신경 x ) 
새로 하나 만드는 단축키 - ctrl + n

자바의 관례 - 클래스이름은 반드시 대문자로 시작해야 함. 
이클립스에서 자주빛을 띄는 걸 예약어라고 함. 
예약어는 자바에서 특정 목적으로 사용하기로 이미 예약되어 있는 단어를 말함.

public - 공개된 , class - 설계도
public class - 공개된 설계도

main만 입력하고 ctrl + space를 누르면 자동 완성으로 main 구문을 완성할 수 있음.
ctrl + space는 코드 자동 완성임. 항상 자바 코딩할 때 사용하기.

들여쓰기를 꼭 해야함. 들여쓰기는 코드의 가독성을 높여줌. ( 소스코드의 구조 파악 )
중괄호(brace)가 열릴 때는 항상 들여쓰기 해야 함.
유지보수의 용이성을 위해 들여쓰기를 필수로 해야 함.

System.out.println()도 sysout이라고 입력후에 ctrl+space 하면 됨.

상용구는 자주 쓰는 문장이나 수식을 미리 등록해서 필요할 때 간단한 키 입력으로 씀.

구문 뒤에 초록 줄이 생기면 한 번만 방향키 이동해도 그 위치로 이동함.
( 그냥 편의상 알고 있으면 될 듯..? )

이클립스의 장점 
1) 코드 자동 완성.
2) 잘못 쓴 경우는 자동으로 빨간 줄이 생김. ( 오류를 빨리 발견할 수 있음. )
3) 지금 시점에서 가장 적절해 보이는 코드를 제시해줌 ( 코드 어시스턴트 )

코드를 작성했는데 .java 앞에 *가 있으면 아직 저장하지 않았다는 뜻임.

저장 단축키 : ctrl + s

이클립스에서 저장 버튼을 누르는 순간, 실행 파일은 자동으로 만들어짐.
실행법은 그냥 초록색 화살표 누르면 됨. ( 초록색 화살표는 제일 최근에 실행한 걸 실행 )

eclipse를 IDE라고 함( Integrated Development Environment, 통합 개발 환경 )
- 자바용 통합개발환경 툴.
- IDE가 지원하는 기능 : 구문 강조 표시 + 지능형 코드 완성 + 코드 편집 자동화 + 컴파일 + 테스트 + 디버깅 + 리팩토링 

ctrl+alt+방향키 : 구문 복사 단축키. 