equals(Object obj) 메소드는 문자열의 내용을 비교한다.
equals 메서드의 반환값은 boolean 타입이며
문자열의 내용이 일치하면 true, 일치하지 않으면 false를 반환한다.

1. 정보를 표현하는 클래스 정의
2. 저장 / 변경 / 삭제
표현 -> 서비스 -> 영속화
3. 조회
표현 <- 서비스 <- 영속화

표현 계층은 사용자와 상호작용( 입력을 받아옴 ) 이 메인
서비스 계층은 정보를 가지고 처리하는 게 메인 [ 제일 중요한 기능 ]

객체 조립하기
 	+ ScoreApp 객체는 ScoreService 객체에 정의된 기능을 사용한다.
 	즉, ScoreApp 객체는 ScoreService 객체에 의존한다.
	1. 사용하는 객체(ScoreApp)에 의존하는 객체(ScoreService)를
 	참조하는 참조변수를 정의한다.
	2. 의존하는 객체를 생성해서 참조변수에 대입한다.
	
	public class ScoreApp {
	// 0. 의존하는 객체를 조립하였다.
	private ScoreService service = new ScoreService();
	}
	
1. 신규 성적정보 저장하기
	ScoreApp 객체
	+ 학번, 이름, 국어, 영어, 수학 점수를 입력받는다.
	+ Score객체를 생성해서 입력받은 학번, 이름, 국어, 영어, 수학 점수를 담는다.
	+ ScoreService 객체의 saveScore 메소드의 인자값을 Score객체를 전달해서
	호출한다.
	ScoreService 객체
	+ Score 객체를 전달받아서 배열객체의 position 위치에 저장한다.
	+ position 변수의 값을 1증가시켜서 다음번 Score 객체가 저장될 위치를 유지한다.

	public class ScoreApp{
	private ScoreService service = new ScoreService();
	
	void createScore(){
		// 키보드입력을 읽어온다.
		int no = Keyboard.readInt();
		String name = Keyboard.readString();
		int kor = Keyboard.readInt();
		int eng = Keyboard.readInt();
		int math = Keyboard.readInt();
		// Score 객체를 생성해서 읽어온 값을 담는다.
		Score score = new Score(no, name, kor, eng, math);
		// ScoreService의 saveScore 메소드에 Score 객체를 전달해서 호출한다.
		service.saveScore(score);
		}
	}

	public class ScoreService {
		// 성적정보를 최대 100개까지 저장가능한 배열 객체를 생성한다.
		private Score[] database = new Score[100];
		// 학생 성적 정보를 배열에 몇 번째 값에 저장할지를 결정한다.
		private int position = 0;

		public void saveScore(StudentScore score){
			database[position] = score;
			position++;
		}

2. 모든 성적정보 출력하기
	ScoreApp
	+ ScoreService 객체의 getAllScores 메소드를 실행해서 성적정보 객체가 저장된 배열 객체를 반환받는다.
	+ 획득한 배열객체에서 순서대로 성적을 꺼내서 성적정보를 화면에 출력한다.
	ScoreService 
	+ 모든 성적 정보 객체가 저장된 배열 객체를 반환한다.
	
	public class ScoreApp {
		private ScoreService service = new ScoreService();
	
		void viewScores(){
			// ScoreService 객체의 getAllScores 메소드를 호출해서 성적정보가 저장된 배열 객체를 반환하고, 참조변수에 대입한다.
 			score[] scores = service.getAllScores();
			// 향상된 for문을 이용해서 배열객체의 처음부터 끝까지 저장된 객체를 하나씩 꺼내서 반복처리한다.
			for( Score score : scores ) {
				if (score == null) break;
				System.out.println(score.getNo());
			}
			System.out.println(score.getNo());
			System.out.println(score.getName());
			System.out.println(score.getKor());
			System.out.println(score.getEng());
			System.out.println(score.getMath());
		}
	}
}

	public class ScoreService {
		private Score[] database = new Score[100];
		private int position = 1;
		
		Score[] getAllScores(){	
			// 성적 정보 객체가 전부 저장된 배열 객체를 반환한다.
			return database;	
		}	
	}

3. 성적 정보 수정하기
	ScoreApp
	+ 수정에 사용되는 정보(학번, 과목명, 점수)를 키보드로 입력받는다.
	+ ScoreService의 updateScore 메소드를 인자로 학번, 과목명, 점수를 전달하고
	호출한다.
	ScoreService 
	+ 매개변수로 전달받은 학번과 일치하는 성적정보를 배열객체에서 찾는다.
	+ 일치하는 성적정보가 존재하지 않으면 메시지를 출력하고 메서드를 종료한다.
	+ 일치하는 성적정보가 존재하면, 매개변수로 전달받은 과목의 점수를 변경한다.

	public class ScoreApp {
		private ScoreService service = new ScoreService();

		void updateScore() {
			// 수정할 정보를 키보드로 입력받는다.
			int no = Keyboard.readInt();	
			String subject = Keyboard.readString();
			int amount = Keyboard.readInt();

			// ScoreService 객체의 updateScore 메소드에 인자로
			// 학번, 과목명, 점수를 전달해서 호출한다.	
			service.updateScore(no, subject, amount);
			}
	}

	public class ScoreService{
		private Score[] database = new Score[100];
		int position = 0;
		
		void updateScore(int no, String subject, int amount){
			// 검색된 성적정보객체를 참조할 변수를 정의한다.
			Score foundScore = null;
			// 배열객체의 0번째부터 position위치 앞까지 배열객체에 저장된
			Score 객체를 하나씩 반복처리한다.
			for (int i = 0; i < position; i++) {
				Score score = database[i];
				// 성적 정보의 학번과 전달받은 학번이 일치하면
				해당 성적정보 객체를 foundScore 변수에 대입한다.
				if(Score.getNo() == no){
					foundScore = score;
					break;
				}
			}
			// 검색된 성적정보가 null이면 메시지를 출력하고
			   메소드 실행을 즉시 종료한다.
			if (foundScore == null){
				System.out.println("성적정보가 존재하지 않음");
				return;
			}
			// 과목명에 해당하는 점수를 변경한다.
			 switch(subject){
				case "국어" : foundScore.setKor(amount);
					      break;
				case "영어" : 
					      foundScoere.setEng(amount);
					      break;
				case "수학" : 
					      foundScore.setMath(amount);
					      break;
				}
			}	
		}
	}

4. 성적 정보 삭제하기
	 ScoreApp
	+ 삭제할 학번을 키보드로 입력받는다.
	+ ScoreService 객체의 deleteScore 메소드에 학번을 인자로 전달하고 호출한다.
	 ScoreService
	+ 삭제할 학번을 매개변수로 전달받는다.
	+ 성적정보객체가 저장된 배열객체에 전달받은 학번과 일치하는 성적정보객체가 저장된
	위치를 조회한다.
	+ 해당 위치의 다음 칸부터 한 칸씩 앞으로 이동시킨다.
	+ position 값을 1감소시키고, 해당 위치의 칸으로 null로 변경한다.
         * 삭제 전 맨 마지막번째 객체가 저장되어 있던 곳을 null로 변경한 것이다.
	 * 맨 마지막번째 객체가 앞으로 한 칸 이동했기 때문에 원래 저장되어 있던 곳을 
	   null로 변경하는 것이다.

	public class ScoreApp {
		private ScoreService service = new ScoreService();
		
		void deleteScore() {
			//삭제할 학번으로 키보드로 입력받는다.
			int no = Keyboard.readInt();	
			// ScoreService 객체의 deleteScore 메소드에 인자로
			학번을 전달하고 호출한다.
			service.deleteScore(no);
		}
	}
	
	public class ScoreService {
		private Score[] database = new Score[100];
		private int position = 0;
		
		void deleteScore(int no) {
			// 전달받은 번호와 일치하는 성적 정보가 저장된 위치를 담는 변수를 정의한다.
			int foundIndex = -1;
			// 배열의 0번째부터 position 앞까지 반복하면서 배열 객체에서 성적정보 객체를 하나씩 가져온다.
			for (int i = 0; i < position; i++) {
				Score score = database[i];
				// 조회된 성적정보객체의 학번과 전달받은 학번이 일치하면 해당 저장위치를 foundIndex에 대입한다.
				if(score.getNo() == no){
					foundIndex = i;		
					vreak;	
				}
			}
			// foundIndex가 -1이면 학번과 일치하는 성적정보가 존재하지 않으므로 메시지를 출력하고 메소드를 즉시 종료한다.
			if ( foundIndex == -1 ) {
				System.out.println("성적 정보가 존재하지 않습니다.");
				return;	
			}

			for (int i = foundIndex; i < position-1; index++) {
				database[i] = database[i+1];
			}
			// 다음번에 저장된 위치를 한 칸 앞으로 이동시킨다.
			position--;
			// 맨 마지막번째 성적정보가 저장되어 있던 칸으로 null로 변경한다.
			database[position] = null;
		}
	}

1. 상품정보를 표현하는 Product 클래스 정의하기
	+ 상품번호, 이름, 제조사, 가격, 할인율, 재고수량 정보를 담는 멤버변수 정의
	+ 기본 생성자 메소드 정의
	+ 모든 멤버변수를 초기화하는 생성자 메서드 정의
	+ getter / setter 메서드 정의하기

2. 신규 상품정보 등록하기 구현하기
	+ ProductApp의 addNewProduct() 메서드 구현하기
	
	- add NewProduct 구조
	    반환타입 : void
	    메서드명 : addNewProduct
	    매개변수 : 없음

	- 구현 내용
	1. 상품번호, 이름, 제조사, 가격, 할인율, 재고수량은 입력받아서 읽어온다.
	2. Product 객체를 생성하고 입력받은 값으로 멤버변수를 초기화한다.
		* 객체 생성할 때 모든 멤버변수를 초기화하는 생성자 메서드를 이용하는 방법
		* 객체 생성할 때 기본 생성자 메서드를 실행해서 초기화하고,
		Setter 메서드를 이용해서 각각의 멤버변수를 초기화하는 방법
		* 위의 나열한 2가지 방법 중 하나를 사용한다.
	3. 조립된 ProductService 객체의 saveProduct 메서드의 인자로 2번에서 생성한 Product 객체를
	전달하고 메서드를 호출한다.
	
	+ProductService의 saveProduct 메소드 구현하기
	- 메서드 구조
	*반환타입 : void
	* 메서드명 : saveProduct
	* 매개변수: Product product
	- 구현내용
	1. 매개변수로 전달받은 신규 상품정보 객체를 배열에 저장한다.
	2. 다음 상품정보 객체를 저장하기 위해 저장위치를 관리하는 position 변수의 값을 1 증가시킨다.

3. 모든 상품정보 출력하기 구현하기
 + ProductApp의 viewAllProduct 메서드 구현하기
  - 메서드 구조
 * 반환타입 : void
 * 메소드명 : viewAllProducts
 * 매개변수 : 없음
 - 구현내용
	1. ProductService 객체의 getAllProducts 메소들르 호출해서 모든 상품정보가 저장된 배열 객체를
	반환받는다.
 	2. 1번에서 획득한 배열 객체를 향상된 for문을 이용해서 반복처리한다.
	* 배열객체에서 하나씩 꺼낸 상품정보객체를 Product product 타입의 변수에 저장되도록
	향상된 for문을 작성한다.
	* product 변수의 값이 null이면 반복문을 탈출한다.
	* product 변수의 값이 null이 아니면 product 변수가 참조하는 Product 객체의 Getter
	메소드를 실행해서 상품정보를 화면에 출력한다.
 + ProductServicce의 getAllProducts 메소드 구현하기
 - 메서드 궂
 반환타입 : Product[]
 메서드명 : getAllProducts
 매개변수 : 없음

4. 상품정보 상세정보 출력하기 구현하기
 + ProductApp의 viewProductDetail 메소드 구현학
 - 메소드 구조
 * 반환타입 : void
 * 메서드명 : viewProductDetail
 * 매개변수 : 없음
 - 구현내용
 1. 제품상세정보를 조회할 상품번호를 키보드로 입력하고 읽어온다.
 2. productService의 getProductById 메소드의 인자로 전달하고 메소드를 호출해서 상품정보를 조회한다.
 3. 2번에서 조회한 상품정보객체의 Getter 메서드를 실행해서 해당 객체에 저장된 상품정보를 화면에 출력
 
 + ProductService의 getProductByNo 메소드 구현하기
 - 메소드 구조
 반환타입 : Product
 메소드명 : getProductByNo
 매개변수 : int no
 
 내용
 1 매개변수로 전달받은 상품객체를 찾아서 저장하는 Product 타입의 참조변수를 정의한다.
 2 for 문을 이용해서 배열객체에 저장된 성적정보객체를 하나씩 순서대로 처리한다
 * 하나씩 꺼낸 상품객체가 null 이면 반복문을 탈출한다.
 * 하나꺼낸 상품객체의 번호와 매개변수로 잔달받은 상품번호가 일치하면 1번에서 생성한
 참조변수에 해당 객체를 대입하고, 반복문을 탈출한다.
 3. 1번에서 생성한 참조변수의 값을 반환한다.

↑ 오늘의 과제