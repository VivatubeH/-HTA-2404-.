JSON 객체의 활용

클라이언트
1. 서버에 데이터 요청
2. 서버가 보낸 데이터(json 텍스트) 수신
3. JSON.parse(json 텍스트)를 실행해서 자바스크립트 객체나 배열로 변환
4. 객체나 배열에서 데이터 추출
5. 추출한 데이터로 HTML 태그 생성
6. HTML 태그를 화면에 반영

브라우저 내장 객체(BOM)
Window 객체
	웹브라우저의 화면을 표현하는 객체다.
	브라우저 환경에서 최상위 전역객체다.
Document 객체
	웹브라우저가 현재 표시하고 있는 HTML 문서를 표현하는 객체다.
History 객체
	웹브라우저의 방문이력 정보를 표현하는 객체다.
Location 객체
	웹브라우저 주소창의 주소정보를 표현하는 객체다.
Navigator 객체
	웹브라우저에 대한 정보를 표현하는 객체다.
Screen 객체
	사용자의 모니터에 대한 정보를 표현하는 객체다.
	
웹 브라우저
window -> Window 객체[ 프로퍼티 : document, history, location, navigator, screen ]
[ 각각은 Document 객체, History 객체, Location 객체, Navigator 객체, Screen 객체를 가리킴 ]

Element 객체의 textContent 프로퍼티
태그 <p id="test-1">안녕</p>

Element 객체
property 
	id : "test-1"
	textContent : "안녕"

텍스트 컨텐츠 조회하기 

	1. 엘리먼트를 검색한다. [Element 객체를 검색하고 반환]
	let p = document.getElementById("test-1");

	2. 엘리먼트의 텍스트 컨텐츠 조회하기 
	let text = p.textContent;
	console.log(text); // 안녕
	
	1+2. 엘리먼트를 검색하고 텍스트 컨텐츠 조회하기 [ 한 번에 조회하기 ] 
	let ext = document.getElementById("test-1").textContent;
	console.log(text);
	
텍스트 컨텐츠 변경하기
	
	1. 엘리먼트 검색하기
	let p = document.getElementById("test-1");
	
	2. textContent 프로퍼티 변경하기
	p.textContent = "반갑습니다.";
	
Element 객체의 innerHTML 프로퍼티 [ 태그가 포함된 것까지 바꾸기 ]

html 태그
<tbody id="test-1">
	<tr>
		<td>김유신</td>
		<td>kim@gmail.com</td>
		<td>010-1111-1111</td>
	</tr>
</tbody>

Element 객체
textContent:"김유신kim@gmail.com010-1111-1111"
innerHTML: "<tr><td>김유신</td><td>kim@gmail.com</td><td>010-1111-1111</td></tr>"

innerHTML 프로퍼티 변경하기

	1. 새로운 HTML 컨텐츠 작성하기
	let row = ` 
	<tr>
		<td>홍길동</td>
		<td>hong@gmail.com</td>
		<td>010-2222-2222</td>
	</tr>
	`;
	
	2. 새로 작성한 HTML 컨텐츠를 반영시킬 Element 선택하기
	let tbody - document.querySelector("#test-1");
	
	3. 검색된 엘리먼트의 HTML 컨텐츠를 바꾸기
	tbody.innerHTML = row;
	
<table id="table-carts">
   <thead>
      <tr>
		<th>번호</th><th>이름</th><th>수량</th>
	</tr>
   </thead>
   <tbody>
	<tr>
	     <td>10</td><td>색연필</td><td>5</td>
	</tr>
	<tr>
	     <td>10</td><td>색연필</td><td>5</td>
	</tr>
   </tbody>
</table> 

innerHTML 프로퍼티를 이용해서 삭제하기
// 1. 삭제한 HTML 컨텐츠를 포함하고 있는 엘리먼트 검색
let tbody = document.querySelector("#table-carts tbody");

// 2. tbody 엘리먼트의 HTML 컨텐츠를 ""로 변경한다.
tbody.innerHTML = "";

엘리먼트 객체의 remove() 메소드를 이용해서 삭제하기
// 1. 삭제할 엘리먼트를 전부 검색한다.
let trList = document.querySelectAll("#table-cart tbody tr");

// 2. 반복문을 이용해서 조회된 엘리먼트를 하나씩 삭제한다.
for (let el of trList) {
	tr.remove();
}

HTML DOM의 주요 API

+ Document 객체 [ 문서 안에서 엘리먼트를 검색 / 검색용 ]
	- HTML 문서를 표현하는 객체다.
	- 주요 메소드
		* 엘리먼트를 검색 메소드
			Element document.getElementById(아이디)
			Element document.querySelector(선택자)
			NodeList document.querySelectorAll(선택자)
		* 엘리먼트 생성 메소드
			Element createElement(태그명)

+ Element 객체 [ 엘리먼트를 조작하면 화면 내용이 조작됨. / 조작용 ]
	- HTML 태그를 표현하는 객체다.
	- 주요 프로퍼티
		* innerHTML	
			HTML 컨텐츠를 반환한다.
		* textContent
			순수 텍스트 컨텐츠를 반환한다.
		* classList
			클래스 속성값을 다루는 DOMTokenList를 반환한다.
		* value
			input, select, textarea만 가지고 있다.
			폼입력요소의 값을 반환한다.
		* checked
			<input type="checkbox">와 <input type="radio">만 가지고 있다.
			체크여부를 반환한다. true/false 값 중에 하나다.
	- 주요 메소드
		* 엘리먼트 추가/삭제 메소드
			.prepend(엘리먼트)    현재 엘리먼트의 마지막번째 자식 엘리먼트로 추가한다.
			.append(엘리먼트)     현재 엘리먼트의 첫번째 자식 엘리먼트로 추가한다.
			.before(엘리먼트)     현재 엘리먼트의 형제(앞에) 엘리먼트로 추가한다.
			.after(엘리먼트)	     현재 엘리먼트의 형제(뒤에) 엘리먼트로 추가한다.
			
			.insertAdjacentHTML('afterbegin', 'html 컨텐츠')		prepend와 동일
			.insertAdjacentHTML('beforeend', 'html 컨텐츠')		append와 동일
			.insertAdjacentHTML('beforebegin', 'html 컨텐츠')		before와 동일
			.insertAdjacentHTML('afterend', 'html 컨텐츠')		after와 동일
			
			.remove()		엘리먼트를 삭제한다.
		* 속성 조회/추가/삭제 메소드
			.getAttribute("속성명")			속성명으로 속성값을 조회한다.
			.hasAttribute("속성명")			속성명에 해당하는 속성이 있으면 true를 반환한다.
			.setAttribute("속성명", "속성값")		속성을 추가하거나 변경한다.	
			.removeAttribute("속성명")			지정된 속성명의 속성을 삭제한다.
			
		* 클래스 속성값의 추가/삭제/변경
			.classList.add("속성값")			  클래스 속성값 추가
			.classList.remove("속성값")			  클래스 속성값 삭제
			.classList.contains("속성값")	 	  클래스 속성값이 있으면 true
			.classList.toggle("속성값")			  클래스 속성값을 토글시킨다.
			.classList.replace("속성값1", "속성값2") 기존 클래스 속성값을 변경한다.