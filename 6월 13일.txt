this라는 속성에는 자신의 주소값이 들어 있음.
super라는 속성에는 부모의 주소값이 들어 있음.

this는 자기 자신의 인스턴스를 참조하고,
super는 조상 객체의 인스턴스를 참조함.

Object는 모든 객체의 조상 객체임.
클래스 생성 시 명시적으로 부모를 지정하지 않으면 자동으로 Object가 부모 객체가 됨.
( Object는 최상위 객체이므로 super가 없음 )

메소드 재정의(overriding)
- 부모/자식 관계가 있는 클래스에서 자식 클래스가 부모클래스로부터 물려받은 기능을
  자신에게 맞게 재정의하는 것이다.
- 형식 
    접근제한자 
      부모클래스 메서드의 접근제한자와 동일한 접근제한 혹은 더 느슨한 접근제한으로 
      지정해야 한다.
    반환타입
      부모클래스 메서드의 반환타입과 동일하게 지정해야 한다.
    메서드이름
      부모클래스 메서드의 이름과 동일하게 지정해야 한다.
    매개변수
      부모클래스 메서드의 매개변수와 동일하게 지정해야 한다.

- 목적 
    + 비슷한 기능은 하나의 이름으로 일관되게 사용하자.
    + 자식 클래스에서 부모로부터 물려받은 기능을 재정의할 필요가 있을 때
    별도의 새로운 메소드를 정의하는 대신 부모로부터 물려받은 메소드구조를 그대로 활용후
    구현내용만 다르게 정의할 수 있게 한 것이다.
    + 위의 사실 때문에 여러 자식 클래스들이 같은 이름으로 비슷한 기능들을 구현했을 것이다.

    따라서, 자식클래스가 달라지더라도 해당 기능을 실행하는 방법은 동일한 방법으로 실행 가능하다.

메소드 중복정의와 메소드 재정의

메소드 중복정의(Method Overloading) 
        하나의 클래스안에 같은 이름의 메소드를 여러 개 정의하는 것.
                 + 형식
                    접근제한자 : 무관
	     	    반환타입   : 무관
 		    메소드명   : 동일한 이름
		    매개변수   : 갯수가 다르거나 타입이 달라야 한다.

메소드 재정의(Method Override) 
 	상속관계에 있는 클래스의 자식클래스에서 부모 클래스로부터 물려받은 메소드와 동일한
                메소드로 구현내용을 다르게 정의하는 것.
		+ 형식
		  접근제한자 : 부모와 동일하거나 더 느슨하다.
                  반환타입   : 동일
		  메소드명   : 동일
		  매개변수   : 동일

오버로딩의 목적 - 유사한 기능을 하는 메서드들은 일관된 이름으로 사용하기 위해서
[ 하나의 클래스에 같은 이름으로 여러 개 정의함 ]

기본 자료형의 형변환
# 정수 <-> 실수, 정수 <-> 문자 [ 2가지 경우만 가능함 ]

형변환이 일어나는 시기 : 연산이 필요할 때 ( 대입 연산, 사칙 연산, 비교 연산 등... )
- 자바는 같은 타입끼리만 연산이 가능하다.
- 연산이 일어날 때는 항상 같은 타입으로 변경한 이후에 연산이 일어남.
[ 기본 자료형의 형 변환은 값 자체가 바뀜 ]

클래스 형변환 : 부모 타입의 참조변수로 자식타입의 객체를 참조하는 것.
[ 하위 타입의 객체를 부모 타입의 참조변수에 저장하는 것 ]
[ 부모를 바라볼 지, 자식 객체를 바라볼 지 어느 시점인 지 지정하는 것 ]
[ 생성한 객체를 다른 타입 참조변수에 담을 때 형변환이 발생함. ]
[ 자신의 타입에 해당되는 객체를 내부에서 위로 올라가면서 찾으면서 자기 자신의 객체를 바라봄 ]
[ 실제 생성한 객체와 다른 객체를 바라보는 것. ]
[ 거슬러 올라가서 없으면 오류(상속관계가 아니면) / 즉 참조변수가 조상 타입일 때만 가능함. ]

[ 특정 타입을 지정하면 그 타입 및 그 하위 타입을 모두 관리할 수 있게된다. ]

자바 어노테이션(@) : 부가적인 정보를 표현할 때 사용함.

@Override
	public void print() {
		// TODO Auto-generated method stub
		super.print();
	}

@Override를 통해 메서드명을 잘못적거나 하면 오류가 남.

원래는 조상 타입의 참조변수로 자식의 메서드를 실행하지 못한다.
하지만, 자식의 메서드가 조상의 메서드를 오버라이딩한 메서드라면 ( 이름이 같다면 )
오버라이딩( 재정의 ) 한 메서드가 실행된다.

메서드를 재정의 하는 이유 - 클래스 형변환을 통해 자식의 메서드를 사용하려고.

상속을 하는 이유
- 부모 타입 참조변수로 모든 자식 객체를 연결해서 사용할 수 있게 하기 위해서
- 자식을 빠르게 만들기 위해서

재정의 된 메서드가 실행되도록 함으로써, 다형성이 발휘될 수 있다.

다형성 : 실행 방법은 동일하지만, 연결하는 객체에 따라 결과가 다르게 된다.

다형성을 발휘하게 하려면 재정의 하게 해야 함 -> 재정의 하지 않으면 오류가 나게 하고 싶음  
[ 추상화 ] 

여태껏 만든 메서드는 구현메서드임.

body(실행부)가 없는 메서드를 추상메서드라고 한다.
abstract void read(); <-- 추상메서드

abstract class DataReader <-- 추상클래스

추상 클래스는 구현 메서드를 보유할 수 있지만, 반대로 구현 클래스는 추상 메서드를 보유할 수 없다.

추상클래스
- abstract 키워드가 지정된 클래스다.
- 추상 메서드를 보유할 수 있다.
- 구현 메서드를 보유할 수 있다.
- new 키워드를 이용해서 객체를 생성할 수 없다. 

구현클래스
- abstract 키워드를 지정하지 않은 클래스다.
- 추상 메서드를 보유할 수 없다.
- 구현 메서드를 보유할 수 있다.
- new 키워드를 통해 객체를 생성할 수 있다.

구현메소드
- 메소드가 바디부를 가지고 있으면 구현 메소드다.
- 메소드의 구성
	접근제어자 반환타입 메소드명(타입 매개변수)
	{
	
	}

추상메소드
- abstract 키워드가 지정된 메소드다.
- 메소드가 바디부를 가지고 있지 않는 메소드다.

부모에서 추상 메서드를 정의하는 것의 의미
- 상속받은 메서드 재정의하지 않으면 사용 불가능하게 만듦. ( 자식 클래스가 해당 기능을 반드시 구현하게 함 )
[ 추상화를 통해 무조건 오버라이딩하게 만든다. - ★ 해당 기능 사용법이 통일된다. ★ ]

다형성
- 동일한 방법으로 메서드를 실행하지만, 실제로 조립된 객체에 따라서 실행 결과가 다르게 발현되는 것.
[ 언제든지 객체를 교체할 수 있도록 만들어준다. ]
[ 사용법이 동일한 객체를 만드는 게 중요. - 사용성이 동일한 객체를 만들게 하는 방법 : 추상화 ]

추상화 
- 모든 자식(구현)클래스가 반드시 구현해야하는 기능을 추상메서드로 정의하는 것이다.

★ 실제로 조립된 객체의 메서드가 실행된다 ★