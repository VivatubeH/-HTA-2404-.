-- 직종아이디별로 종사하는 직원수를 조호하고, 직원수로 오름차순 정렬해서 조회하기
SELECT JOB_ID, COUNT(*) CNT
FROM EMPLOYEES
GROUP BY JOB_ID
ORDER BY CNT ASC;

-- 'Neena'보다 많은 급여를 받는 직원의 아이디, 이름, 급여를 조회하기
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
FROM EMPLOYEES
WHERE SALARY > (SELECT SALARY
                FROM EMPLOYEES
                WHERE FIRST_NAME = 'Neena');
                
-- 200번 직원과 같은 부서에서 근무하는 직원의 아이디, 이름, 급여를 조회하기
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                       FROM EMPLOYEES
                       WHERE EMPLOYEE_ID = 200);
                
-- 직종아이디별 평균급여를 계산했을 때 평균급여가 가장 적은 직종아이디와 평균급여를 조회하기
-- 그룹함수를 조회한 결과에 대해서 필터링을 하려면 HAVING을 써야 함..
SELECT JOB_ID, AVG(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID
HAVING AVG(SALARY) <= (SELECT MIN(AVG(SALARY))
                       FROM EMPLOYEES
                       GROUP BY JOB_ID);

-- 가상 테이블 이용하기     
WITH JOB_AVG_SALARY AS
(SELECT JOB_ID, AVG(SALARY) AVG_SALARY
FROM EMPLOYEES
GROUP BY JOB_ID)
SELECT JOB_ID
    , AVG_SALARY
FROM JOB_AVG_SALARY
WHERE AVG_SALARY = (SELECT MIN(AVG_SALARY)
                    FROM JOB_AVG_SALARY);

-- 직종아이디별 평균급여를 계산햇을 때 평균급여가 가장 적은 직종의 아이디, 직종제목, 그 직종의 최저급여, 그 직종의 최대급여를 구하시오.
WITH JOB_AVG_SALARY AS
(SELECT JOB_ID
    , AVG(SALARY) AVG_SALARY
 FROM EMPLOYEES
 GROUP BY JOB_ID)
SELECT S.JOB_ID
    , J.JOB_TITLE
    , S.AVG_SALARY
    , J.MIN_SALARY
    , J.MAX_SALARY
FROM JOB_AVG_SALARY S
     JOIN JOBS J
     ON S.JOB_ID = J.JOB_ID
WHERE S.AVG_SALARY = (SELECT MIN(AVG_SALARY)
                      FROM JOB_AVG_SALARY);
                      
-- 부서아이디별 평균급여를 계산했을 때 'Isamel'이 근무하는 부서의 평균급여보다 급여를 많이 받는 부서의 부서 아이디와 평균급여 구하기
SELECT DEPARTMENT_ID
    , AVG(SALARY)
FROM EMPLOYEES
WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) > (SELECT AVG(SALARY)
                      FROM EMPLOYEES
                      WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                                             FROM EMPLOYEES
                                             WHERE FIRST_NAME = 'Ismael'));

SELECT DEPARTMENT_ID
    , AVG_SALARY
FROM ( 
        SELECT DEPARTMENT_ID
            , AVG(SALARY) AVG_SALARY
        FROM EMPLOYEES
        WHERE DEPARTMENT_ID IS NOT NULL
        GROUP BY DEPARTMENT_ID
) A
WHERE AVG_SALARY > (SELECT AVG(SALARY)
                    FROM EMPLOYEES
                    WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                                           FROM EMPLOYEES
                                           WHERE FIRST_NAME = 'Ismael'));
                                        
SELECT A.DEPARTMENT_ID, A.AVG_SALARY
FROM (
      SELECT DEPARTMENT_ID
        , AVG(SALARY) AVG_SALARY
      FROM EMPLOYEES
      WHERE DEPARTMENT_ID IS NOT NULL
      GROUP BY DEPARTMENT_ID
) A, (
      SELECT AVG(SALARY) AVG_SALARY
      FROM EMPLOYEES
      WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                            FROM EMPLOYEES
                            WHERE FIRST_NAME = 'Ismael')
) B
WHERE A.AVG_SALARY > B.AVG_SALARY;

-- 직원 테이블의 급여를 기준으로 급여 등급을 조회했을 때, 급여등급별 직원수를 조회하기
SELECT G.SAL_GRADE, COUNT(*)
FROM EMPLOYEES E
    JOIN SALARY_GRADES G
        ON E.SALARY BETWEEN G.MIN_SALARY AND G.MAX_SALARY
GROUP BY G.SAL_GRADE;

-- 가장 적은 직원이 입사한 해의 직원수와 직원의 아이디, 이름, 입사일을 조회하기
WITH YEAR_EMP AS
(
 SELECT TO_CHAR(HIRE_DATE,'yyyy') AS YEAR
 , COUNT(*) CNT 
 FROM EMPLOYEES
 GROUP BY TO_CHAR(HIRE_DATE, 'yyyy')
)
SELECT A.YEAR
    , A.CNT
    , E.EMPLOYEE_ID
    , E.FIRST_NAME
    , E.HIRE_DATE
FROM YEAR_EMP A
    , EMPLOYEES E
WHERE A.CNT = (SELECT MIN(CNT)
               FROM YEAR_EMP)
AND A.YEAR = TO_CHAR(E.HIRE_DATE, 'YYYY');

select * from all_users;

select * from all_tables;

--관리자 아이디별 직원수를 조회했을 때 직원수가 10명이 넘는 관리자 아이디와 직원수를 조회하기
SELECT MANAGER_ID, COUNT(*)
FROM EMPLOYEES
WHERE MANAGER_ID IS NOT NULL
GROUP BY MANAGER_ID
HAVING COUNT(*) > 10;

-------------------------------------------------------------------------------------------------------------------------------

-- 직원들의 모든 직종아이디를 조회하기
SELECT DISTINCT JOB_ID
FROM EMPLOYEES;

-- 급여를 12,000달러 이상 받는 직원의 이름과 급여를 조회하기
SELECT FIRST_NAME
    , SALARY
FROM EMPLOYEES
WHERE SALARY >= 12000;

-- 직원번호가 176번 직원의 아이디와 이름 직종을 조회하기
SELECT EMPLOYEE_ID
     , FIRST_NAME
     , JOB_ID
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 176;

-- 급여를 12,000달러 이상 15,000달러 이하 받는 직원들의 직원 아이디와 이름과 급여를 조회하기
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
FROM EMPLOYEES 
WHERE SALARY BETWEEN 12000 AND 15000;

-- 2005년 1월 1일부터 2005년 6월 30일 사이에 입사한 직원의 아이디, 이름, 직종아이디, 입사일을 조회하기
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , JOB_ID
    , HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE >= '2005-01-01' AND HIRE_DATE < '2005-07-01';

-- 급여가 5,000달러와 12,000달러 사이이고, 부서번호가 20 또는 50인 직원의 이름과 급여를 조회하기
SELECT FIRST_NAME
     , SALARY
     , DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY BETWEEN 5000 AND 12000
AND 
DEPARTMENT_ID IN (20, 50);

-- 관리자가 없는 직원의 이름과 직종아이디를 조회하기
SELECT FIRST_NAME
     , JOB_ID
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL;

-- 커미션을 받는 모든 직원의 이름과 급여, 커미션을 급여 및 커미션의 내림차순으로 정렬해서 조회하기
SELECT FIRST_NAME
     , SALARY
     , COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY SALARY DESC, COMMISSION_PCT DESC;

-- 이름의 2번째 글자가 e인 모든 직원의 이름을 조회하기
SELECT FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_e%';

-- 직종아이디가 ST_CLERK 또는 SA_REP이고 급여를 2,500달러, 3,500달러, 7,000달러 받는 모든 직원의 이름과 직종아이디, 급여를 조회하기
SELECT FIRST_NAME
     , JOB_ID
     , SALARY
FROM EMPLOYEES
WHERE JOB_ID IN ('ST_CLERK', 'SA_REP')
AND
SALARY IN (2500, 3500, 7000);

-- 모든 직원의 이름과 입사일, 근무 개월 수를 계산하여 조회하기, 근무개월 수는 정수로 반올림하고, 근무개월수를 기준으로 오름차순으로 정렬하기
SELECT FIRST_NAME
     , HIRE_DATE
     , ROUND(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) MONTHS
FROM EMPLOYEES
ORDER BY MONTHS ASC;

-- 직원의 이름과 커미션을 조회하기, 커미션을 받지 않는 직원은 '없음'으로 표시하기
SELECT FIRST_NAME
     , NVL(TO_CHAR(COMMISSION_PCT), '없음')
FROM EMPLOYEES;

-- 모든 직원의 이름, 부서번호, 부서이름을 조회하기
SELECT E.FIRST_NAME
    , E.DEPARTMENT_ID
    , D.DEPARTMENT_NAME 
FROM EMPLOYEES E
    , DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID(+);

-- 80번부서에 소속된 직원의 이름과 직종아이디, 직종제목, 부서이름을 조회하기
SELECT E.FIRST_NAME
    , E.JOB_ID
    , J.JOB_TITLE
    , D.DEPARTMENT_NAME
FROM EMPLOYEES E, JOBS J, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = 80
AND
E.JOB_ID = J.JOB_ID
AND
E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- 커미션을 받는 모든 직원의 이름과 직종아이디, 직종제목, 부서이름, 부서소재지 도시명을 조회하기
-- [100 홍길동 10 VP_PRES] [VP_PRES VICE PRESIDENT] [10 ... 1700] [1700 .. .. 시애틀]
SELECT E.FIRST_NAME
    , E.JOB_ID
    , J.JOB_TITLE
    , D.DEPARTMENT_NAME
    , L.CITY
FROM EMPLOYEES E, JOBS J, DEPARTMENTS D, LOCATIONS L
WHERE COMMISSION_PCT IS NOT NULL
AND
E.JOB_ID = J.JOB_ID
AND
E.DEPARTMENT_ID = D.DEPARTMENT_ID(+)
AND
D.LOCATION_ID = L.LOCATION_ID(+);

SELECT E.FIRST_NAME
    , E.JOB_ID
    , J.JOB_TITLE
    , D.DEPARTMENT_NAME
    , L.CITY
FROM EMPLOYEES E
JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
LEFT OUTER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT OUTER JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
WHERE E.COMMISSION_PCT IS NOT NULL;

-- 유럽에 소재지를 두고 있는 모든 부서아이디와 부서이름을 조회하기
/*
r_id  r_name   -->    c_id  c_name r_id  -->  locations                                       country_id -->   department               l_id
 1	Europe             BE	Belgium	1        1000	1297 Via Cola di Rie	00989	Roma		IT              10	Administration	200	1700
*/
SELECT D.DEPARTMENT_ID
    , D.DEPARTMENT_NAME
FROM REGIONS R
    , COUNTRIES C
    , LOCATIONS L
    , DEPARTMENTS D
WHERE R.REGION_NAME = 'Europe'
AND
R.REGION_ID = C.REGION_ID
AND 
C.COUNTRY_ID = L.COUNTRY_ID
AND
L.LOCATION_ID = D.LOCATION_ID;

SELECT *
FROM REGIONS R
JOIN COUNTRIES C
    ON R.REGION_ID = C.REGION_ID
JOIN LOCATIONS L
    ON C.COUNTRY_ID = L.COUNTRY_ID
JOIN DEPARTMENTS D
    ON L.LOCATION_ID = D.LOCATION_ID
WHERE R.REGION_NAME = 'Europe';

-- 직원의 이름과 소속부서명, 급여, 급여 등급을 조회하기
SELECT E.FIRST_NAME
    , D.DEPARTMENT_NAME
    , E.SALARY
    , G.SAL_GRADE
FROM EMPLOYEES E
    , DEPARTMENTS D
    , SALARY_GRADES G
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND
E.SALARY BETWEEN G.MIN_SALARY AND G.MAX_SALARY;

SELECT E.FIRST_NAME
    , D.DEPARTMENT_NAME
    , E.SALARY
    , G.SAL_GRADE
FROM EMPLOYEES E
JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN SALARY_GRADES G
    ON E.SALARY BETWEEN G.MIN_SALARY AND G.MAX_SALARY;

-- 직원의 이름과 소속부서명, 소속부서의 관리자명을 조회하기, 소속부서가 없는 직원은 소속부서명 '없음, 관리자명 '없음'으로 표시하기
SELECT 직원.EMPLOYEE_ID 
    , 직원.FIRST_NAME 
    , NVL(소속부서.DEPARTMENT_NAME, '소숙부서 없음') DEPT_NAME
    , NVL(상사.FIRST_NAME, '상사 없음')             EMP_MANAGER_NAME
    , NVL(부서관리자.FIRST_NAME, '부서관리자 없음')   DEP_MANAGER_NAME
FROM EMPLOYEES 직원
LEFT OUTER JOIN EMPLOYEES 상사
    ON 직원.MANAGER_ID = 상사.EMPLOYEE_ID
LEFT OUTER JOIN DEPARTMENTS 소속부서
    ON 직원.DEPARTMENT_ID = 소속부서.DEPARTMENT_ID
LEFT OUTER JOIN EMPLOYEES 부서관리자
    ON 소속부서.MANAGER_ID = 부서관리자.EMPLOYEE_ID; 

-- 모든 직원의 급여 최고액, 급여 최저액, 급여 총액, 급여 평균액을 조회하기
SELECT MAX(SALARY)
    , MIN(SALARY)
    , SUM(SALARY)
    , AVG(SALARY)
FROM EMPLOYEES;

-- 직종아이디별 급여 최고액, 급여 최저액, 급여 총액, 급여 평균액을 조회하기
SELECT JOB_ID
    , MAX(SALARY)
    , MIN(SALARY)
    , SUM(SALARY)
    , AVG(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID;

-- 각 직종아이디별 직원수를 조회해서 가장 직원수가 많은 직종아이디 3개를 조회하기, 직종아이디와 직원수 표시하기
SELECT ROWNUM
    , JOB_ID
    , CNT
FROM
(
    SELECT JOB_ID, COUNT(*) CNT
    FROM EMPLOYEES 
    GROUP BY JOB_ID 
    ORDER BY CNT DESC)
WHERE ROWNUM <= 3;

-- 관리자별 직원수를 조회하기, 관리자 이름과 그 관리자가 관리하는 직원수 표시하기
SELECT E.MANAGER_ID
    , M.FIRST_NAME
    , COUNT(*) CNT
FROM EMPLOYEES E
JOIN EMPLOYEES M
    ON E.MANAGER_ID = M.EMPLOYEE_ID
WHERE E.MANAGER_ID IS NOT NULL
GROUP BY E.MANAGER_ID, M.FIRST_NAME; 

SELECT M.FIRST_NAME
    , A.CNT
FROM
(
    SELECT MANAGER_ID
        , COUNT(*) CNT
    FROM EMPLOYEES
    WHERE MANAGER_ID IS NOT NULL
    GROUP BY MANAGER_ID
) A, EMPLOYEES M
WHERE A.MANAGER_ID = M.EMPLOYEE_ID;

-- 각 부서에 대해 부서이름, 관리자 이름, 소속직원 수, 소속직원들의 평균 급여를 조회하기
WITH DEPT_STATS AS 
( SELECT DEPARTMENT_ID, COUNT(*) CNT, TRUNC(AVG(SALARY)) AVG_SALARY
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID IS NOT NULL
  GROUP BY DEPARTMENT_ID)
SELECT D.DEPARTMENT_ID
    , D.DEPARTMENT_NAME
    , M.FIRST_NAME
    , S.CNT
    , S.AVG_SALARY
FROM DEPARTMENTS D 
LEFT OUTER JOIN EMPLOYEES M -- D와 M을 LEFT OUTER JOIN
    ON D.MANAGER_ID = M.EMPLOYEE_ID
LEFT OUTER JOIN DEPT_STATS S -- D와 S를 LEFT OUTER JOIN
    ON D.DEPARTMENT_ID = S.DEPARTMENT_ID
ORDER BY D.DEPARTMENT_ID ASC;

-- Steven과 같은 부서에 속한 직원의 이름과 입사일을 조회하기
-- 동명이인임.
-- 다중행 서브쿼리는 IN을 쓰자.
SELECT EMPLOYEE_ID 
    , FIRST_NAME
    , HIRE_DATE
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
                       FROM EMPLOYEES
                       WHERE FIRST_NAME = 'Steven');
                       
-- 소속 부서의 평균급여보다 많은 급여를 받는 직원의 아이디와 직원이름, 급여, 그 부서의 평균 급여를 조회하기
WITH DEPT_AVG_SALARY AS (
    SELECT DEPARTMENT_ID
        , TRUNC(AVG(SALARY)) AVG_SALARY
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID IS NOT NULL
    GROUP BY DEPARTMENT_ID
) 
SELECT E.EMPLOYEE_ID
    , E.FIRST_NAME
    , E.SALARY
    , D.DEPARTMENT_ID
    , D.AVG_SALARY
FROM EMPLOYEES E
JOIN DEPT_AVG_SALARY D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
    AND
    E.SALARY > D.AVG_SALARY
ORDER BY E.EMPLOYEE_ID ASC;
    
-- Kochhar과 동일한 급여를 받는 모든 직원의 이름과 입사일 급여를 조회하기, 결과에 Kochhar은 포함시키지 않기
-- 단, Kochhar는 직원의 LAST_NAME임.
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , HIRE_DATE
    , SALARY
FROM EMPLOYEES
WHERE SALARY IN (SELECT SALARY
                 FROM EMPLOYEES
                 WHERE LAST_NAME = 'Kochhar')
AND LAST_NAME != 'Kochhar';

-- 소속 부서에 입사일이 늦지만, 더 많은 급여를 받는 직원의 이름과 소속부서명, 급여를 조회하기
SELECT DISTINCT ME.EMPLOYEE_ID 
    , ME.FIRST_NAME
    , ME.HIRE_DATE
    , ME.SALARY
    , D.DEPARTMENT_ID
FROM EMPLOYEES ME
JOIN EMPLOYEES YOU
    ON ME.DEPARTMENT_ID = YOU.DEPARTMENT_ID
    AND
    ME.HIRE_DATE > YOU.HIRE_DATE 
    AND
    ME.SALARY > YOU.SALARY
JOIN DEPARTMENTS D
    ON ME.DEPARTMENT_ID = D.DEPARTMENT_ID
ORDER BY ME.EMPLOYEE_ID;

-- 관리자 아이디, 관리자명, 그 관리자가 관리하는 직원수, 그 관리자가 소속된 부서를 조회하기
/*
    A                                       M                                                           D
    MANAGER_ID      CNT                     EMPLOYEE_ID     FIRST_NAME   DEPARTMENT_ID                  DEPARTMENT_ID       DEPARTMENT_NAME
    --------------------                    ------------------------------------------                 -------------------------------------
    100             14                       100            Steven         90                               10                  XXXX
    101             5                        101            Neena          90                               20                  XXXX
    102             4                        102            LEX            90                               ...                 ....
                                                                                                            80                  XXXX
                                                                                                            90                  XXXX
*/  
SELECT M.EMPLOYEE_ID
    , M.FIRST_NAME
    , A.CNT
    , D.DEPARTMENT_NAME
FROM (SELECT MANAGER_ID
            , COUNT(*) CNT
      FROM EMPLOYEES
      WHERE MANAGER_ID IS NOT NULL
      GROUP BY MANAGER_ID) A
JOIN EMPLOYEES M
    ON A.MANAGER_ID = M.EMPLOYEE_ID
JOIN DEPARTMENTS D
    ON M.DEPARTMENT_ID = D.DEPARTMENT_ID
ORDER BY M.EMPLOYEE_ID ASC;

---------------------------------------------------------------------------------------------------------------------------------------------