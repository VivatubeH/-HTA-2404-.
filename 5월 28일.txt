5/28

사이버 강의같은 걸로 컴퓨터 과학적인 지식 수강하기. ( 시간 되면 )
정보처리기사 자격증은 취업에 필수임. 
학위 같은 것도 필요하면 될 수 있으면 따기. ( 최소 조건은 충족시켜야 함. )
다양한 경험을 해보는 게 중요함. ( 노트나 구글 문서 같은 데 메모해놓아야 연차가 쌓일 때 도움이 됨. )

너무 최신기술에 매몰되면 안됨. 실제로 프로젝트에 사용한 기술 같은 거만 염두에 두기. ( 방향성 확립 )
조별로 멘토가 붙을 예정. ( 프로젝트 조언, 이력서 쓰는 법, 모의 면접, 성능 테스트 등등... )

오늘부터 본격적인 자바 학습 예정.
[ 변수와 자료형 - 연산자 - 제어문과 반복문 - 배열 - ☆객체지향 프로그래밍☆ - 예외처리 - java API 
- 콜렉션 프레임워크 - 스레드와 네트워크 - 람다식과 스트림 ] 

콜렉션 프레임워크 : 자바에서 제공하는 자료구조 라이브러리. ( 데이터와 관련된 기능 제공 )

스레드와 네트워크 : 컴퓨터와 컴퓨터 간의 네트워크 통신을 위해 사용

자바의 특징
1. 플랫폼에 독립적이다. [ a에서 만든 걸 b에서도 사용가능. / 자료형 크기가 동일 ]
- 하드웨어/소프트웨어에 상관없이 모든 플랫폼에서 실행 가능함.
- 자료형 크기가 플랫폼에 상관없이 항상 일정한 크기를 가짐.
2. 객체지향프로그래밍 언어이다. 
객체 : 고유한 속성과 기능을 갖고 있는 것. [ 속성은 객체를 구별할 수 있게 해줌. ]
한 객체는 다른 객체들의 조립으로 이루어져 있어서, 유지 보수 비용이 적게 들 수 있음.
확장성이 확장됨. [ 부품만 교체하면 되니 재사용성 + 유지보수성 + 확장성 확보 가능. ]
3. 비교적 배우기 쉽다. [ 포인터 사용 x ]
4. 자동 메모리 관리를 지원한다.
- 자바가상머신에는 메모리를 자동으로 관리하는 가비지컬렉터 프로그램이 실행중임.
- 가비지 컬렉터는 메모리에서 더이상 사용하지 않는 객체들을 찾아서 삭제함.
- 자동 메모리 관리기능은 자바 개발자의 메모리 관리부담을 경감시키고, 개발에만 
집중할 수 있게 해줌.
5. 네트워크 및 분산처리를 지원한다.
 - 자바는 인터넷이 발명된 이후에 개발된 언어이기 때문에, 기본적으로 
컴퓨터간의 통신기능을 지원하는 클래스( 설계도, Socket과 ServerSocket 등)이 포함
되어 있다.
- 자바가 제공하는 네트워크 관련 API를 이용하면 손쉽게 컴퓨터간의 통신을 구현할 
수 있다.
6. 멀티스레드를 지원한다.
- 스레드 : 하나의 프로세스에서 동시 작업을 하기 위해 설계된 것.
( 카톡 내의 파일 전송 기능같은 )
- 자바가 제공하는 클래스(설계도, Thread과 Runnable 등)을 이용하면 동시작업을 
쉽게 구현할 수 있다.
7. 동적 로딩을 지원한다.
자바에서 JRE(Java Runtime Environment)자체가 이미 JVM과 라이브러리를 동시에
포함하고 있기 때문에 실행 파일에 자바 라이브러리를 따로 포함할 필요는 없음.
어차피 프로그램이 실행될 때 해당 라이브러리를 찾아서 동적으로 가져오게 됨.
[ 실행 파일의 크기가 상대적으로 적게 됨. ] 

데이터는 프로그램에서의 재료가 된다.
재료의 종류에 따라 담는 용기가 다름.
그 용기를 프로그램에서는 변수라고 함. [ 값을 담는 용기 역할을 함 . ]
자료의 손실, 메모리 공간 낭비를 막기 위해 변수의 종류가 다양함.
변수의 종류를 타입이라고 함.

int x; 에서 int는 타입, x는 이름 - 정수를 담을 수 있는 x라는 용기를 만듬.
double y;에서 double은 타입, y는 이름 - 실수를 담을 수 있는 y라는 용기를 만듬.
char z;에서 char은 타입, z는 이름 - 문자를 담을 수 있는 z라는 용기를 만듬.
[ 특정 타입의 값을 저장할 수 있는 변수(저장소)를 메모리에 생성하고, 이름을 지음 ]

자바의 기본 데이터 타입의 종류 ( 8가지 )
boolean 논리형 1byte - true / false
byte 정수형 1byte -128~127
short 정수형 2byte 
int 정수형 4byte
long 정수형 8byte
float 실수형 4byte
double 실수형 8byte
char 문자형 2byte(유니코드)

자주 사용하는 거 boolean ( 논리형 ) , int ( 정수형 ) , double ( 실수형 )

국어 점수 같은 걸 저장할 때도 int를 사용함. ( 0~100 일 때도 )
정수는 항상 int를 사용한다. ( -21억 ~ 21억 )

정적 데이터 타입 - 그릇의 종류를 먼저 정하고 값을 담음. ( 그릇의 종류가 안 변함 )
동적 데이터 타입 - 값을 담으면 그릇의 종류가 자동으로 변함. 

x = 10; // =는 대입 연산자, 오른쪽의 값을 왼쪽의 저장소에 저장.
y = 3.14;
z = '가';

패키지 = 관련된 클래스들을 모아놓은 것.

//를 하고 적으면 단일행 주석. ( 실행 시에 무시됨. )
/*하고 적으면 다중행 주석. ( 실행 시에 무시됨. )

변수를 생성하고나서 사용하지 않으면 IDE 환경에서 경고를 표시함.
변수에 값을 저장(대입)하는 것을 초기화라고 함.

변수명 = 값; 
이미 같은 이름의 저장소가 있으면 중복으로 생성이 불가함. 

변수에 저장된 값을 이용하려면 변수명으로 이용한다.

리터럴 - 프로그램에서 데이터를 표현하고 나타내는데에 사용됨. ( 구분을 위해 )

정수 리터럴 - 2, 10000, 10_000_000 ( 자바 7부터 도입된 기능, 니 맘대로 2자리 4자리 끊으면 안됨._)
실수 리터럴 - 3.14, 3.
문자 리터럴 - '가'

즉,
System.out.println(a); 는 변수 a에 있는 값 출력이고
System.out.println('a');는 문자 a 출력임.

리터럴에 의해 구분됨.

ctrl + alt + 방향키 아래 누르면 행 복사.

변수의 크기에 따라 범위를 벗어나는 값을 저장할 수 없음. 

이클립스에서 디버그 없이 바로 실행하는 단축키 - ctrl + F11

long은 int 범위를 초과하는 값을 담을 때 사용하는 자료형인데,
자료형에 따라 해당 타입이 여러개일 때는 기본 타입이 있음.
( 정수형은 4가지 타입으로 이루어져있는데 기본 타입은 int,
  실수형은 2가지 타입으로 이루어져있는데 기본 타입은 double이라서
  정수 리터럴로 그냥 적으면 int라고 생각하고, 
  실수 리터럴로 그냥 적으면 double이라고 생각함. )

long으로 쓰려면 뒤에다가 L이나 l을 붙여줘야 함. ( 안 그러면 int로 판단해서 값 범위 초과 오류가 남. )

float aa = 3.14;
에서 3.14는 실수 기본형으로 생각되어서 8바이트 값인데
float라는 그릇은 4바이트임.

4바이트에 8바이트 값을 담는 건 범위 초과이므로 오류 발생.
float로 쓰려면 뒤에다가 f를 붙여줘야 함.

접미사 붙일 때 대소문자는 상관 없음.

double cc = 3.;
double dd = .314;

실수로 적을 때는 위와 같이 표기해도 상관없음.
위의 경우 3.0 , 아래의 경우 0.314가 됨.

이클립스에서 잘못 작성한 코드 위치 옮기기 단축키
ctrl+x로 잘라내기 후 ctrl+v로 붙여넣기.

자바에서 지수 표현식 e(숫자) = 10x숫자 거듭제곱

유니코드 - 아스키코드에서 발전한 형태,
전세계의 모든 문자를 다루기 위함.
( 아스키 코드를 포함하고 있고, 이후에 추가함. )

자바에서 유니코드 값에 해당하는 문자를 저장하라면
'\u 뒤에 16진수유니코드값'로 하면 됨.

char c5 = '\uac00'; 하면 가 출력

자바에서 char에 글자를 저장하든, 숫자를 저장하든
해당되는 유니코드값이 저장된다.

bit - 2가지 상태의 값을 담을 수 있음 ( 0 또는 1 )
[ 표현 가능한 값 2가지 - 0, 1 ]

byte - 8비트가 모여야 1바이트가 됨.
( 2의 8제곱만큼 256가지의 값을 표현할 수 있음. )

정수형에서 제일 왼쪽 비트를 부호비트라고 부름.
( 0이면 양수, 1이면 음수. ) [ 즉, 첫 번째 값으로는 숫자 표현이 안됨. ]

8비트 정수면 -128~127까지 표현되는 이유임.

문자형은 부호비트가 없고, 모든 비트가 다 사용됨.

1 = 00000001
-1 = 10000001
을 이진수끼리 자릿수 맞춰서 덧셈하면
0이 안나옴.

그래서 음수는 양수와 더해서 0이 나오도록 따로 규칙을 만듬.
양수를 음수로 만드려면 원래 수에 보수를 취하고 1을 더함.
[ 2의 보수로 구해야 함. = 비트를 반전시킨 다음에 1을 더해야 함 ]

1의 보수 = 각 자리 부호를 모두 반전시킨 것.
2의 보수 = 각 자리 부호 모두 반전후 1을 더한 것.

ac00은 유니코드 16진수

'가' -> AC00이면 4칸씩 따로 떼내서 구할 수 있다

A C 0 0
1010 1100 0000 0000

이진수로 적으면 16자리나 적어야 하는데, 16진수는 4자리라서
표현이 훨씬 간결하게 되는 장점이 있음.

https://www.step.or.kr/home/ncs
ncs 직무 정보통신쪽 강의 모여있는 곳.

실수형 - 부동소수점 방식.
[ 1.xxx(가수부) X 2^n(지수부) ] [ 부호비트 + 지수부 + 가수부 ] 

-110.625에서
-는 부호비트
110은 = 1110110(2)
0.625는 0.625 x 2 = 1.250 - 정수부 1
            0.250 x 2 = 0.500 - 정수부 0
            0.500 x 2 = 1.000 - 정수부 1
[ 소수점 뒤가 0이 될 때까지 함 ]

110110.101에서 소수점을 이동시켜 정수부가 한자리가 되도록 변환함.
[110110101을 가수부에 그대로 적는다. ( 소수점 무시 )]

바이어스 값인 127을 더한 다음 지수부 비트를 넣는다.
[ 음수 표현식을 사용하지 않기 위해 ]
[ 0-127의 값이 나오면 음수, 128부터의 값은 양수가 됨. ]

0.2 - 0.4 - 0.8 - 1.6 - 1.2 - 0.4 의 경우 
        0       0      1      1     0 ... 반복
: 위와 같은 경우 가수부를 통해 숫자를 정확하게 표현하는 게 불가능함. ( 근삿값 )

예를 들어 0.1 + 0.2는 0.3이 아닌 0.30000000000000004가 됨.

그래서 실수 연산 때는 정수로 먼저 변환한 다음에 다시 연산해서 정확한 값으로 해야함.
( 금융이나 드론처럼 정확한 연산이 필요하면 실수값에 담으면 안됨. 오차 발생 )

그래서 int, long 정수형 타입으로 치환하고 사용하거나
BigDecimal 클래스를 사용해야 함.

값이 있으면 대입이고, 변수명만 있으면 조회해서 이용하는 것임.

변수의 생성 : int a; 
변수의 초기화 : a = 10;
조회 및 이용 : s.o.p(a);

자료형 변수명; <------ 변수 생성
자료형 변수명 = 값; <------ 변수 생성 및 초기화(변수에 값을 저장함)
변수명 = 값; <------ 변수의 초기화(변수에 값을 저장함)
변수의 이용 - 출력에 이용함 
                   System.out.println(변수명);

초기화를 안하면 전에 사용했던 쓰레기 값이 연산에 사용될 수 있음.

자바에서 모든 변수는 초기화 한 이후에만 출력이나 연산에 사용할 수 있다.

컴파일 오류면 실행 파일 생성이 안됨.

변수 -> 고유한 이름을 가져야함. [ 식별 및 구분 가능 ]
변수명으로 식별할 수 있어서 식별자라고도 불림.

식별자 - 구분 가능, 고유한 이름
식별자는 사용할 수 있는 글자가 정해져 있음.
식별자의 예시 : 변수명, 메소드명, 클래스명, 패키지명 ....
- 작성 규칙 
    1. 예약어는 식별자로 사용할 수 없다. [ int class = 10; 과 같이 불가능 ]
     [ int public = 20;도 마찬가지로 불가능. ]
    2. 식별자는 문자로 시작해야 한다. [ 숫자로 시작할 수 없음. ]
    3. 식별자는 _와 $이외의 특수문자(공백 탭문자 포함)를 포함할 수 없다.

- 자바에서의 관례(Convention) 
1. 식별자가 두 단어 이상의 합성어일 때, 두 번째 단어의 첫번째 글자는 대문자로 작성.
[ 예 : int totalScore, String departmentName - 카멜 익스프레션 ]
2. 식별자 중에서 클래스 이름은 대문자로 시작한다.
public class Student { }
public class OrderService{ }
3. 프로그램이 실행되는 동안 값이 변하지 않는 상수의 이름은 전부 대문자.
[ 예 : int MAX_UPLOAD_SIZE ] - 상수를 표현할 때만 _ 사용함.
앞에 public static final이 붙음.
public static final int MAX_UPLOAD_SIZE = 500;
[ public static을 붙이는 건 메서드 영역 내에서는 불가능함. ]
4. 식별자 이름으로 약어의 사용은 지양하자.
 int studentScore = 100; ( 한 눈에 알아볼 수 있도록 )
 int stdScr = 100; ( 권장되지 않음 )
5. 식별자의 이름은
    변수명인 경우 그 변수에 저장된 값을 잘 설명하는 이름이어야 한다.
    메소드명인 경우 그 메소드의 기능을 잘 설명하는 이름이어야 한다.
    클래스명인 경우 그 클래스가 고유한 속성과 기능을 잘 드러내는 이름이어야 한다.
 나쁜 변수명 int a; 좋은 변수명 int name;

변수명은 항상 명사로
변수도 ctrl + space 누르면 자동완성 시킬 수 있다.
좋은 변수명은 저장된 값을 한 눈에 파악할 수 있음.

https://naver.github.io/hackday-conventions-java/
자바 코딩 규칙 가이드.

자바의 데이터 타입은 2가지가 있음.
기본 자료형과 참조 자료형.
기본 자료형 8가지를 제외한 자료형은 전부 참조 자료형임.

문자열은 기본 자료형이 아닌 String을 이용함. 
boolean 타입 중 true, false는 각각 참, 거짓을 나타내는 예약어임.

boolean 타입의 true, false는 문자열이 아닌 true, false라는
이름으로 관리되어지는 미지의 값임. [ 그냥 문자열이 아니라는 것만 알기 ]

참조 자료형은 클래스를 통해 객체라는 게 만들어짐.

자바 가상 머신에는 클래스 영역, 스택 영역, 힙 영역이 있는데
( 클래스 영역의 이름은 교재마다 상이함. )

힙 영역에 객체라는 게 만들어짐. 
스택 영역에 변수가 만들어짐. 

기본 자료형의 변수는 실제 값을 저장하고 있음.
참조 자료형은 객체라는 게 만들어짐. 

String b = "안녕"; 
변수 b는 스택 영역에 생성됨, 반면 객체는 힙영역에 생성됨.
즉, 스택 영역에 있는 변수 b를 통해 힙 영역에 생성된 "안녕" 객체를
참조할 수 있게 됨. [ 그래서 참조형이라고 함. ]

참조 자료형을 쓰는 이유는 기능이 부가적으로 필요할일이 많기 때문임.

자바에서 문자는 한 글자, 문자열은 한 글자 이상임.
한 글자를 표현할 때는 문자를 써도 되고, 문자열을 써도 되지만
한 글자가 넘어가면 무조건 문자열을 써야 함.

문자열은 빈문자열, 공백문자, 탭문자 등도 포함할 수 있음.

객체는 다른 곳에 생기고, 참조변수는 객체의 주소를 저장함.
[ 참조변수는 리모콘의 역할을 수행함. ]

이클립스 내부에서 특정 검색어 검사 명령어 - ctrl + F

이클립스 단일 주석 단축키 ctrl + /
이클립스 블록 주석 단축키 ctrl + shift + /
이클립스 블록 주석 해제 단축키 ctrl + shift + \ 

이클립스 import 되지 않은 클래스 로드 단축키 ctrl + shift + o

참조 변수의 타입은 무수히 많음. 

추가로 이클립스에서 ctrl+shift+f를 누르면 전체 들여쓰기를 다 교정해줌.
