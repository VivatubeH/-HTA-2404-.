데이터베이스 : 여러 사람들이 공유하고 사용할 목적으로 통합관리되는 정보의 집합
관련성 있는 데이터의 모음
일반적으로 DBMS(DataBase Management System)과 함께 사용됨.

DBMS(Database Management System)
- 데이터베이스를 관리하는 소프트웨어다.
- 데이터베이스의 데이터를 효율적으로 저장, 검색, 수정, 삭제할 수 있도록 지원한다.

Database 
- 데이터를 저장하는 저장소다.

데이터베이스의 특징
- 통합된 데이터 ( Integrated Data )
 + 데이터베이스는 데이터를 통합해서 관리한다.
 + 데이터를 통합해서 관리하면 자료의 중복을 최소화할 수 있다.
 + 데이터를 통합해서 관리하면 저장 용량의 낭비를 방지할 수 있다. 
- 저장된 데이터 ( Stored Data )
 + 데이터 베이스는 컴퓨터가 접근할 수 있는 매체에 데이터를 저장한다.
- 운영 데이터 ( Operational Data )
 + 조직의 목적을 위해서 존재하고 활용되는 운영 데이터를 다룬다.
 + 회사에서는 인사관리를 위해서 직원 정보, 근태 정보, 실적 정보 등의 데이터를
   다루게 되는데, 이 데이터들은 한 번 쓰고 버리는 게 아니라 인사 관리를 위해서 데이터베이스에 저장하고
   운영 데이터로 활용된다.
 + 쇼핑몰은 고객 정보, 상품 정보, 주문 정보 등이 운영 데이터다. 
- 공유 데이터 ( Shared Data )
 + 여러 사람 혹은 여러 애플리케이션이 공유하고 사용할 목적으로 통합 관리하는 데이터

데이터베이스의 기능적 특징
- 실시간 접근성(Real-time Accessibility)
   + 데이터베이스는 사용자의 요구에 실시간 응답이 가능하다.

- 계속적인 변화(Continuous Evolution)
   + 데이터베이스는 항상 최신의 데이터 상태를 유지한다.
   + 새로운 데이터의 추가/삭제/변경이 바로 바로 가능하다.

- 동시 공유(Concurrent Sharing)
   + 다수의 사용자 혹은 애플리케이션이 같은 내용의 데이터를 공유할 수 있다. 

- 내용에 의한 참조(Content Reference)
   + 데이터베이스에 있는 데이터를 검색할 때는 데이터의 내용으로 찾는다.

DBMS
- 데이터베이스를 관리하는 소프트웨어다.
- 종류
     
+ 관계형 DBMS - 데이터를 테이블 형태로 표현하는 방식.
        
: * 가장 많이 사용하는 데이터베이스 종류다.
  테이블 형태로 데이터를 표현한다.
  테이블이 실질적인 데이터의 저장소다.
  테이블은 이름을 가지고 있으며, 행과 열로 구성되어 있다.
  관계형 데이터베이스는 테이블이 다른 테이블과 
  관계를 맺고 모여있는 집합체다.

  관계형 데이터베이스의 특징
  + 데이터의 분류 속도가 빠르다.
  
      [ 가로 - 행(Row), Tuple(튜플), 레코드(Record) ]
      [ 세로 - 열(Column), Attribute(속성) ]

  + 객체지향형 DBMS 
  - 데이터를 객체 형태로 표현하는 방식이다.
  - 실제로 많이 사용되지는 않는다.                              
  + NOSQL 
  - SQL과 호환되지 않는 데이터베이스다.
  - 데이터를 테이블의 형태가 아닌 문서(Document), 키-값(key-value)쌍, 그래프(Graph) 등으로 데이터를
    표현하는 데이터베이스다.
  - MongoDB(문서 기반), HBase(분산 컬럼 기반), Cassandra(컬럼 기반) <--- 하둡의 HDFS(분산파일시스템)
    Redis(키-값 기반) 등의 데이터베이스가 있다.

    주문정보
    { "no":100,
       "date":"2024-07-09",
       "items": [{"no":12, "name":"색연필", "amount":10, "price":2000},
                    {"no":15, "name":"도화지", "amount":2, "price":7000},
                    {"no":10, "name":"지우개", "amount":5, "price":1000}],
       "user": {"id":"hong", "name":"홍길동", "email","hong@gmail.com"}
     } <-- 몽고db는 이런 형식으로 저장됨. document

   system
   zxcv1234

SQL : Structured Query Language, 구조화된 질의 언어.
데이터베이스와 관련된 명령을 작성할 때 사용하는 언어
[ 사용할 수 있는 명령어의 형식을 미리 정해놓음 ]

DDL : 데이터 정의 언어
데이터베이스의 구조를 정의하는 명령어 

DML : 데이터 조작 언어
데이터베이스에서 데이터를 추가/조회/삭제/변경하는 작업을 수행함
[ INSERT, SELECT, UPDATE, DELETE ]

DCL : 데이터 제어 언어
권한 제어, 트랙잭션 제어 작업을 수행한다.

SQL의 장점 : 배우기 쉽다 ( 사람의 언어와 유사함 )
효율적이다. 

구성 요소
행 : 다른 행과 완전히 독립적임.  
열 : 데이터의 속성을 나타낸다. [ 속성 : 데이터의 이름, 데이터의 자료형 ]
      열은 서로 다른 이름을 가지고 있어야 하며, 하나의 테이블에 이름이 같은 열은 존재할 수 없다.

/*
  oracle 12c 버전부터 "C##아이디" 형식으로만 아이디를 생성할 수 있다.
  아래 명령어를 실행하면 "아이디" 형식으로 아이디를 생성할 수 있다.
*/
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

/*
  사용자 생성하기
  CREATE USER 아이디 
  IDENTIFIED BY 비밀번호
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE temp;
*/
CREATE USER hta IDENTIFIED BY zxcv1234 
DEFAULT TABLESPACE USERS    -- hta 사용자가 사용할 기본 테이블스페이스를 지정한다.
TEMPORARY TABLESPACE temp;  -- hta 사용자가 사용할 임시 테이블스페이스를 지정한다.

/*
  사용자에게 권한 부여하기
  GRANT 권한명, 권한명, ...
  TO 아이디;
  
  GRANT 롤, 롤, ...
  TO 아이디;
  
  CONNECT 롤 : 데이터베이스 접속할 권한을 포함하는 롤이다.
  RESOURCE 롤 : 일반 사용자가 데이터베이스의 여러 자원을 사용할 수 있는 권한을 포함하는 롤이다.
                일반 사용자에게는 CONNECT, RESOURCE 2가지 롤을 부여한다.
  
  DBA 롤 : 데이터베이스 관리자가 필요한 모든 권한이 포함된 롤이다.
*/
GRANT CONNECT, RESOURCE, DBA TO HTA;

테이블 : 실질적인 데이터의 저장소

DML : 데이터의 조작어, [ 데이터의 추가, 조회, 변경, 삭제 명령어다. ]

데이터 조회 대상은 항상 테이블이다.

데이터 조회 : select 절 from 절 

------------------------------------------------------------

실습을 위한 테이블

REGIONS 테이블
- 지역(대륙)정보를 표현하는 테이블
- 컬럼
	REGION_ID	: 지역 아이디
	REGION_NAME	: 지역 이름
- 예시
	-------------------------
	REGION_ID  REGION_NAME
	-------------------------
	1	   Europe
	-------------------------
	2	   Americas
	-------------------------

COUNTRIES 테이블
- 국가 정보를 표현하는 테이블
- 컬럼
	COUNTRY_ID	: 국가 아이디
	COUNTRY_NAME	: 국가 이름
	REGION_ID	: 지역 아이디, REGIONS 테이블의 REGION_ID를 참조한다.
- 예시
	------------------------------------
	COUNTRY_ID  COUNTRY_NAME  REGIOIN_ID
	------------------------------------
	AR	          Argentina                2
	------------------------------------
	AU                    Australia                  3
	------------------------------------

LOCATIONS 테이블
- 부서 소재지 정보를 표현하는 테이블
- 컬럼
	LOCATION_ID	: 소재지 아이디
	STREET_ADDRESS  : 주소
	POSTAL_CODE     : 우편번호
	CITY            : 도시명
	STATE_PROVINCE  : 주 혹은 도
	COUNTRY_ID      : 국가 아이디, COUNTRIES 테이블의 COUNTRY_ID를 참조한다.

- 예시
 [ 오라클의 null은 값이 없다. ( 아직 값이 결정되지 않음을 뜻함 ) ] 
	---------------------------------------------------------------------------------
	LOCATION_ID  STREET_ADDRESS        POSTAL_CODE  CITY  STATE_PROVINCE  COUNTRY_ID
	---------------------------------------------------------------------------------
	1000         1297 Via Cola di Rie                009878       Roma             null              IT   
	----------------------------------------------------------------------------------

JOBS 테이블
- 직종 정보를 표현하는 테이블
- 컬럼
	JOB_ID		: 직종 아이디
	JOB_TITLE	: 직종 제목
	MIN_SALARY	: 해당 직종 최소 급여
	MAX_SALARY	: 해당 직종 최고 급여
- 예시
	--------------------------------------------------------------------
	JOB_ID    JOB_TITLE                     	 MIN_SALARY  MAX_SLARY
	--------------------------------------------------------------------
	AD_PRES   President                      	     20080           40000
	AD_VP     Administration Vice President     15000            30000
	---------------------------------------------------------------------

DEPARTMENTS 테이블
- 부서 정보를 표현하는 테이블
- 컬럼명
	DEPARTMENT_ID	: 부서 아이디
	DEPARTMENT_NAME	: 부서 이름
	MANAGER_ID	: 부서 관리자 아이디, EMPLOYEES 테이블의 EMPLOYEE_ID를 참조한다.
	LOCATION_ID     : 소재지 아이디, LOCATIONS 테이블의 LOCATION_ID를 참조한다.
- 예시
	--------------------------------------------------------------------------
	DEPARTMENT_ID  DEPARTMENT_NAME  MANAGER_ID  LOCATION_ID
	--------------------------------------------------------------------------
	10             	Administration             200              1700
	20             	Marketing                   201              1800
	--------------------------------------------------------------------------

EMPLOYEES 테이블
- 직원 정보를 표현하는 테이블
- 컬럼
	EMPLOYEE_ID	: 직원 아이디
	FIRST_NAME	: 직원 이름
	LAST_NAME	: 직원 이름
	EMAIL		: 이메일
	PHONE_NUMBER	: 연락처
	HIRE_DATE	: 입사일자
	JOB_ID		: 직종아이디, JOBS테이블의 JOB_ID를 참조한다.
	SALARY		: 급여
	COMMISSION_PCT	: 커미션 지급 비율
	MANAGER_ID	: 상사의 직원아이디, EMPLOYEES테이블의 EMPLOYEE_ID를 참조한다.
	DEPARTMENT_ID   : 소속부서 아이디, DEPARTMENTS테이블의 DEPARTMENT_ID를 참조한다
- 예시
	예시생략

JOB_HISTORY 테이블
- 직원의 직종변경 이력정보를 표현하는 테이블
- 컬럼
	EMPLOYEE_ID	: 직원 아이디
	START_DATE	: 해당 직종 근무 시작일자
	END_DATE	: 해당 직종 근무 종료일자
	JOB_ID		: 직종 아이디
	DEPARTMENT_ID	: 부서아이디
- 예시
	-------------------------------------------------------------
	EMPLOYEE_ID  START_DATE  END_DATE    JOB_ID   DEPARTMENT_ID
	-------------------------------------------------------------
	102                2001-01-12    2006-07-24   IT_PROG         60
	--------------------------------------------------------------


SELECT *은 나쁜 코딩임. ( 나중에 컬럼이 아무리 많아져도 하나하나 다 적어야 한다. )

일반적으로는 컬럼을 한 줄에 하나만 적고 다 밑으로 적는다.

/*
    테이블에서 모든 데이터 조회하기
        
    SELECT *
    FROM 테이블명;
    
    SELECT 컬럼명, 컬럼명, 컬럼명, ... 
    FROM 테이블명;
*/

-- 모든 지역 정보를 조회하기
SELECT *
FROM REGIONS;

-- 모든 지역정보를 조회하기
SELECT REGION_ID, REGION_NAME
FROM REGIONS;

/*
    테이블에서 모든 행, 특정 컬럼을 조회하기
    
    SELECT 컬럼명, 컬럼명
    FROM 테이블명;
    
    * 조회할 각각의 컬럼명은 ,로 구분한다.
    * 맨 마지막 컬럼명에는 ,가 없다.

*/

-- 부서정보에서 부서아이디, 부서이름 조회하기
SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM DEPARTMENTS;

-- 오라클에서는 대소문자를 구분하지 않는다
SELECT department_id, department_name
FROM departments;
/*
    오라클의 SQL문에서 오라클 명령어, 테이블명, 컬럼명은 대소문자를 구분하지 않는다.
*/

-- 직종 정보에서 직종아이디, 직종 제목을 조회하기
SELECT JOB_ID
      ,JOB_TITLE
FROM JOBS;

-- 직원 정보에서 직원아이디, 직원이름(first_name), 입사일, 급여를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, SALARY
FROM EMPLOYEES;

-- 직종 변경이력 정보에서 직원아이디, 직종아이디, 시작일, 종료일 조회하기
SELECT EMPLOYEE_ID, JOB_ID, START_DATE, END_DATE
FROM JOB_HISTORY;

-- 소재지 정보에서 소재지 아이디, 도시명, 주소, 국가아이디를 조회하기
SELECT LOCATION_ID, CITY, STREET_ADDRESS, COUNTRY_ID
FROM LOCATIONS;

/*
    산술식 사용하기
    
    SELECT 절에서는 사칙연산자를 이용해서 산술식을 작성할 수 있다.
    
    SELECT 컬럼명 연산자 컬럼명
    FROM 테이블명;
    
    SELECT 컬럼명 +숫자
    FROM 테이블명
*/

-- 직원정보에서 직원아이디, 이름, 급여, 연봉을 조회하기
-- 연봉은 급여*12다.
-- 컬럼명에다가 별칭 부여하기 - AS 별칭
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, SALARY*12 AS ANNUAL_SALARY
FROM EMPLOYEES;

-- 직종정보에서 직종아이디, 최소급여, 최대급여와 최소급여의 차이를 조회하기
SELECT JOB_ID
    , MIN_SALARY
    , MAX_SALARY
    , MAX_SALARY - MIN_SALARY AS SALARY_GAP
FROM JOBS;

-- 직원정보에서 직원아이디, 직원이름을 조회하기
-- 오라클에서는 산술 연산은 숫자값끼리만 할 수 있다.
-- 오라클에서 문자열을 연결하려면 ||를 사용한다.
-- 별칭을 작성할 때는 AS를 생략할 수 있다.
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , LAST_NAME
    , FIRST_NAME || LAST_NAME FULL_NAME
FROM EMPLOYEES;

/*
    별칭 적용하기
    
    SELECT 컬럼명 AS 별칭
        , 컬럼명 AS 별칭
        , 컬럼명 별칭
    FROM 테이블명
    
    * 별칭에는 한글, 특수문자(공백문자)의 사용도 가능하다.
    * 단, 별칭에 특수문자 사용될 때는 "별칭" 즉 별칭을 ""로 감싼다.
    * 오라클의 문자열은 '' 홑따옴표임. [ 오라클에서는 홑따옴표와 쌍따옴표가 구분된다. ]
    * 별칭에 한글 사용은 권장되지 않음. [ 되도록 쓰지 말자 ]
*/

SELECT EMPLOYEE_ID "직원 아이디"
    , FIRST_NAME AS "직원 이름"
FROM EMPLOYEES;

-- DATE는 오라클의 예약어라 별칭으로 사용할 수 없다. [ 그럴 때도 쌍따옴표로 감싸자. ]
SELECT EMPLOYEE_ID AS ID
    , FIRST_NAME AS NAME
    , HIRE_DATE AS "DATE"
FROM EMPLOYEES;

-- 날짜 데이터에 대해서는 덧셈, 뺄셈을 사용할 수 있다.
SELECT SYSDATE
    , SYSDATE-1
    , SYSDATE+1
FROM DUAL;

-- (1/24)을 더함으로써 1시간을 증가시킬 수도 있다.
SELECT SYSDATE          -- 현재 시간
    , SYSDATE-1         -- 어제
    , SYSDATE+1         -- 내일
    , SYSDATE + (1/24)  -- 현재 시간에서 1시간 후
FROM DUAL;

-- DISTINCT는 중복행을 제거한다.  

-- 직원정보에서 직원들의 소속 부서아이디를 조회하기
SELECT DISTINCT DEPARTMENT_ID
FROM EMPLOYEES;

-- DISTINCT는 컬럼이 2개 이상일 때 나열된 모든 컬럼의 값이 일치해야 중복이 됨.
SELECT DISTINCT EMPLOYEE_ID, DEPARTMENT_ID
FROM EMPLOYEES;

/*
    중복행 제거하기
    
    DISTINCT는 중복행을 제거한다.  
    
    SELECT DISTINCT 컬럼명
    FROM 테이블명;
    * 지정된 컬럼명의 값이 동일한 행은 한번만 조회된다.
    
    SELECT DISTINCT 컬럼명1, 컬럼명2
    FROM 테이블명;
    * 나열된 모든 컬럼의 값이 동일한 행은 한번만 조회된다.
    * 컬럼명1      컬럼명2
    -----------------------
      홍길동       영업팀
      홍길동       기술1팀
      *위의 2행은 중복행이 아니다.
*/

SELECT *
FROM BOOKS
ORDER BY 판매량 DESC; -- 판매랑 많은 순

SELECT *
FROM BOOKS
ORDER BY 출판일 DESC; -- 최신순

SELECT *
FROM BOOKS
ORDER BY 가격 ASC; -- 낮은 가격순

SELECT *
FROM BOOKS
ORDER BY 가격 DESC; -- 높은 가격순

/*
    조회결과를 정렬하기
    
    ORDER BY 절을 이용해서 조회결과를 정렬할 수 있다.
    ORDER BY 절에는 컬럼명, 연산식, 별칭, 컬럼의 순번을 사용할 수 있다.
    오라클에서는 인덱스(순번)이 1부터 시작한다.
    ORDER BY 절에는 2개 이상의 정렬 기준을 사용할 수 있다.
    
    *지정된 컬럼명의 값을 기준으로 오름차순 정렬하기
    SELECT 컬럼명, 컬럼명, ...
    FROM 테이블명
    ORDER BY 컬럼명; [ 이렇게 생략해도 오름차순이 default임 ]
    
    SELECT 컬럼명, 컬럼명, ...
    FROM 테이블명
    ORDER BY 컬럼명 ASC;
    
    *지정된 컬럼명의 값을 기준으로 내림차순 정렬하기
    SELECT 컬럼명, 컬럼명, ...
    FROM 테이블명
    ORDER BY 컬럼명 DESC;
    
    * 2개 이상의 정렬 기준을 사용해서 정렬하기
    SELECT 컬럼명, 컬럼명, ...
    FROM 테이블명
    ORDER BY 컬럼명 DESC, 컬럼명 ASC;
*/

-- 직원정보에서 직원아이디, 이름, 급여를 조회하기
-- 이름순으로 오름차순 정렬한다.
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY FIRST_NAME ASC;

-- 직원정보에서 직원아이디, 이름, 급여를 조회하기
-- 급여순으로 내림차순 정렬하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY SALARY DESC;

-- 직원정보에서 직원아이디, 이름, 급여를 조회하기
-- 급여순으로 내림차순 정렬한다.
-- 여기서 3은 컬럼 순번( 3번째인 SALARY를 말함 )
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY 3 DESC;

-- 직원정보에서 직원아이디, 이름, 직종아이디, 급여를 조회하기
-- 직종아이디 순으로 오름차순 정렬하고, 급여순으로 내림차순 정렬하기
-- 앞서 나온 기준에 따라 정렬되고, 이후에 같으면 두 번째 기준에 따라 정렬됨.
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY
FROM EMPLOYEES
ORDER BY JOB_ID ASC, SALARY DESC;

-- 직원정보에서 직원아이디, 이름, 급여, 연봉을 조회하기
-- 연봉은 급여*12다, 별칭은 ANNUAL_SALARY다.
-- 연봉순으로 오름차순 정렬한다.
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, SALARY*12 AS ANNUAL_SALARY
FROM EMPLOYEES
ORDER BY ANNUAL_SALARY ASC;

행의 제한(데이터 필터링)
- WHERE 절을 사용한다.

SELECT절에 지정하는 컬럼명은
테이블에서 해당 컬럼의 모든 값을 조회한다.

테이블의 전체 컬럼중에서
SELECT절에 지정하는 컬럼명에
해당하는 열만 조회한다.

관계형 데이터베이스의 관계대수

- 프로젝션, 셀렉션 혹은 필터링, 합집합, 교집합, 차집합, 조인

내일부터는 오라클 QUIZ를 많이 풀어볼 계획