insert/update는 그냥 실질적인 기능만 코딩하고,
클라이언트에게 보여줘야 할 화면은 따로 redirect해야함 ( 항상 ) 

공통적으로 페이지에 구현해야 될 기능을 common이라는 폴더에 만들고
그 기능을 <%@ %>로 include filt="파일경로"로 인클루드해서 사용할 수 있다.

include 사용 시 동일한 이름의 변수를 인클루드하면 오류가 발생한다.
( 해당하는 자리에 코드가 그대로 들어간다고 생각하면 됨 )

선택한 메뉴바만 active 되게 하려면?

nav.jsp
<ul>
	<li <%="홈".equals(menu) ? "active" : "" %>><a href="/home.jsp">홈</li>
	<li <%="상품".equals(menu) ? "active" : "" %>><a href="/product/list.jsp">상품</li>
	<li <%="장바구니".equals(menu) ? "active" : "" %>><a href="/user/cart.jsp">장바구니</li>
	<li <%="고객센터".equals(menu) ? "active" : "" %>><a href="/help.jsp">고객센터</li>
</ul>

home.jsp에서
<%
	String menu = "홈";
%>
얘를 먼저하고 이후에 include한다.
<%@ include file="nav.jsp" %>

product.jsp에서
<%
	String menu = "상품";
%>
얘를 먼저하고 이후에 include한다.
<%@ include file="nav.jsp" %>

HTTP -> ( Stateless Protocol, 무상태 프로토콜 )
: 서버가 클라이언트의 정보를 유지하지 않는다.

쿠키(cookie) 
: 클라이언트에 저장된 사용자 정보
[ 클라이언트와 서버가 주고 받는 정보 ]
[ name, value로 이루어진 문자값 [ 텍스트 값 ]
[ 쿠키는 요청시마다 전달되서 보안에 취약하다. ( 정보 탈취의 기회가 많아짐 ) ]

그래서 쿠키에서 세션으로 넘어간다.

세션 - 요청할 때마다 똑같은 세션번호를 보낼 때, 톰캣에서 세션을 처리하는 객체는 항상 동일하다.
두 클라이언트에서 다른 세션번호를 보내기 때문에, 연결되는 세션도 다르다.
[ 브라우저를 닫으면 세션이 없어짐 ]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

웹브라우저에서 index.jsp 요청 --> Tomcat에서 쿠키 정보가 없는 요청객체를 생성
[ 원래 요청객체에는 쿠키 정보가 전달되어야 한다. ]

---- > jspService메서드가 실행되는데 요청객체에서 JsessionId 쿠키값을 조회한다.
void _jspService(request, response) {
  pageContext pageContext = ...
  HttpSession session = 
a. 쿠키값이 없을 때는 HttpSession 객체를 새로 생성한다. 
b. 쿠키값이 있을 때는 Jsessionid와 일치하는 세션 객체를 찾아서 session에 객체를 대입한다.
  ServletContext application = ...
}

응답객체를 통해 응답을 내려보낸다. 
[ 이 때, Set-Cookie라는 이름으로 내려보내는데, 그러면 웹 브라우저가 JSESSIONID를 가지게 됨 ]

이후

웹브라우저에서 index.jsp 요청 --> Tomcat에서 쿠키 정보가 있는 요청객체를 생성.

HttpSession 객체는 일정 시간동안 접속하지 않으면 세션 객체가 파괴되어서 로그아웃된다.

첫 번째 요청 : 브라우저를 껐다켜서 하는 첫 번째 요청 - 쿠키 정보가 없다.

톰캣
+ 요청객체/응답객체를 생성
+ 요청객체에 쿠키정보가 없다.
+ index_jsp 객체의 _jspService() 메소드를 실행
[ JSP의 내장객체를 찾아서 각각의 변수에 연결한다. ]
[ HttpSession 객체 관련 작업 ]
- 쿠키정보(JSESSIONID)를 조회한다.
	* 쿠키정보 없음
	- HttpSession 객체를 새로 생성하고, 변수에 대입한다.
	- HttpSession 객체의 정보로 Cookie 객체를 생성해서 응답메세지에 담아 보낸다.
	* 쿠키정보 있음
	- JSESSIONID로 전달받아온 세션아이디와 일치하는 HttpSession 객체를 검색해서, 변수에 대입한다.
	- HttpSession 객체를 새로 생성하지 않았기 때문에 응답메세지에 Cookie 정보를 담지 않는다.
	
두 번째 요청부터는 쿠키정보가 요청헤더에 포함되게 된다.

HttpServletRequest

요청헤더 정보
----------------------------
name		value
----------------------------
Cookie	JSESSIONID=abc123
----------------------------
	  +
요청파라미터 정보

HttpServletResponse

HttpSession 객체들 [ 기존에 생성된 id가 다 다른 객체들 ]
[ 세션 객체는 같은 사용자에 한 해 여러 jsp 페이지들이 같은 세션 객체를 공유할 수 있다. ]
---------------------------------------------------------------------------------------------------------------------------

조건 검사는 항상 null부터 검사해야함.

HttpSession에 담아놓은 속성은 클라이언트마다 고유하게 사용할 수 있다.