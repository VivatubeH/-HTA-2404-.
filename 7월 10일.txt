select 컬럼명
from 테이블명
where 검색조건
order by 정렬기준 ASC/DESC

/*
    행의 제한
    - where절을 사용하면 조회되는 행을 제한할 수 있다.
    - where절은 from절 다음에 위치한다.
    - where절은 true/false로 판정되는 조건식을 포함한다.
    - 제시된 조건식이 true로 판명되는 행만 조회된다.
    - 조건식은 하나 이상 포함할 수 있다.
    - 조건식이 여러 개일 때는 논리연산자를 이용해서 조건식을 작성.
    - 논리연산자 : AND OR NOT 이 있다.
    - 형식
        select 컬럼명, 컬럼명, 컬럼명
        from 테이블명
        where 조건식
        
        select 컬럼명, 컬럼명, 컬럼명
        from 테이블명
        where 조건식1 AND 조건식2 AND 조건식3
        + 조건식1, 조건식2, 조건식3이 모두 TRUE로 판정되는 행만
        조회
        
        select 컬럼명, 컬럼명, 컬럼명    
        from 테이블명
        where 조건식1 OR 조건식2 OR 조건식3
        + 조건식1, 조건식2, 조건식3 중에서 하나라도 TRUE로 
        판정되면 조회된다.
        
        select 컬럼명, 컬럼명, 컬럼명
        from 테이블명
        where 조건식1 AND (조건식2 OR 조건식3)
        + OR 연산으로 연결된 부분은 반드시 괄호로 감싼다.
        
    - 비교연산자
        =       같다
        != , <> 같지 않다
        >       크다     
        <       작다
        >=      크거나 같다
        <=      작거나 같다
        
    오라클에서 대입 연산자는 :=이다.
    
*/

-- 직원 정보에서 급여를 15000 이상 받는 직원의 아이디, 이름, 직종아이디, 급여를 조회하기
-- 급여를 기준으로 오름차순 정렬하기
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY
FROM EMPLOYEES
WHERE SALARY >= 15000
ORDER BY SALARY ASC;

-- 직원 정보에서 프로그래머 직종(IT_PROG)에 종사하는 직원 아이디, 이름, 입사일, 급여를 조회하기
-- 입사일을 기준으로 오름차순 정렬하기
-- 반드시 홑따옴표로 작성할 것.
-- 값에 대해서는 대소문자를 엄격하게 구분함.
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, SALARY
FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG'
ORDER BY HIRE_DATE ASC;
-- 오라클에서 문자 데이터를 표현할 때는 ''로 감싼다.
-- 오라클에서 문자 데이터는 대소문자를 엄격하게 구분한다.

-- 직원정보에서 60번 부서에 소속되어 있고 급여를 5000 이상 받는 직원의 아이디, 이름, 급여를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60 AND SALARY >= 5000;

------------------------------------------------------------------------------------------------------

-- 부서정보에서 관리자가 없는 부서의 부서아이디, 부서이름을 조회하기
-- 부서아이디를 기준으로 오름차순 정렬하기
-- NULL은 같다 아니다 이런식으로 비교할 수 없다.
-- NULL 연산자는 IS NULL이라는 단항 연산자를 사용해야 한다
SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM DEPARTMENTS
WHERE MANAGER_ID IS NULL
ORDER BY DEPARTMENT_ID ASC;

/*
    NULL을 판정하는 연산자 
    
    컬럼명 IS NULL
    컬럼명 IS NOT NULL
    
    * IS NULL과 IS NOT NULL은 단항 연산자다.
    * IS NULL은 해당 컬럼의 값이 NULL이면 TRUE로 판정된다.
    * IS NOT NULL은 해당 컬럼의 값이 NULL이 아니면 TRUE로 판정된다.
    
    예시
        SELECT 컬럼명, 컬럼명
        FROM 테이블명
        WHERE 컬럼명 IS NULL;
*/

-- 직원정보 중에서 30번 부서와 60번 부서에 근무하는 직원의 아이디, 이름, 부서아이디를 조회하기
select 컬럼명
from 테이블명
where 검색조건
order by 정렬기준 ASC/DESC

/*
    행의 제한
    - where절을 사용하면 조회되는 행을 제한할 수 있다.
    - where절은 from절 다음에 위치한다.
    - where절은 true/false로 판정되는 조건식을 포함한다.
    - 제시된 조건식이 true로 판명되는 행만 조회된다.
    - 조건식은 하나 이상 포함할 수 있다.
    - 조건식이 여러 개일 때는 논리연산자를 이용해서 조건식을 작성.
    - 논리연산자 : AND OR NOT 이 있다.
    - 형식
        select 컬럼명, 컬럼명, 컬럼명
        from 테이블명
        where 조건식
        
        select 컬럼명, 컬럼명, 컬럼명
        from 테이블명
        where 조건식1 AND 조건식2 AND 조건식3
        + 조건식1, 조건식2, 조건식3이 모두 TRUE로 판정되는 행만
        조회
        
        select 컬럼명, 컬럼명, 컬럼명
        from 테이블명
        where 조건식1 OR 조건식2 OR 조건식3
        + 조건식1, 조건식2, 조건식3 중에서 하나라도 TRUE로 
        판정되면 조회된다.
        
        select 컬럼명, 컬럼명, 컬럼명
        from 테이블명
        where 조건식1 AND (조건식2 OR 조건식3)
        + OR 연산으로 연결된 부분은 반드시 괄호로 감싼다.
        
    - 비교연산자
        =       같다
        != , <> 같지 않다
        >       크다     
        <       작다
        >=      크거나 같다
        <=      작거나 같다
        
    오라클에서 대입 연산자는 :=이다.
    
*/

-- 직원 정보에서 급여를 15000 이상 받는 직원의 아이디, 이름, 직종아이디, 급여를 조회하기
-- 급여를 기준으로 오름차순 정렬하기
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY
FROM EMPLOYEES
WHERE SALARY >= 15000
ORDER BY SALARY ASC;

-- 직원 정보에서 프로그래머 직종(IT_PROG)에 종사하는 직원 아이디, 이름, 입사일, 급여를 조회하기
-- 입사일을 기준으로 오름차순 정렬하기
-- 반드시 홑따옴표로 작성할 것.
-- 값에 대해서는 대소문자를 엄격하게 구분함.
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, SALARY
FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG'
ORDER BY HIRE_DATE ASC;
-- 오라클에서 문자 데이터를 표현할 때는 ''로 감싼다.
-- 오라클에서 문자 데이터는 대소문자를 엄격하게 구분한다.

-- 직원정보에서 60번 부서에 소속되어 있고 급여를 5000 이상 받는 직원의 아이디, 이름, 급여를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 60 AND SALARY >= 5000;

------------------------------------------------------------------------------------------------------

-- 부서정보에서 관리자가 없는 부서의 부서아이디, 부서이름을 조회하기
-- 부서아이디를 기준으로 오름차순 정렬하기
-- NULL은 같다 아니다 이런식으로 비교할 수 없다.
-- NULL 연산자는 IS NULL이라는 단항 연산자를 사용해야 한다
SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM DEPARTMENTS
WHERE MANAGER_ID IS NULL
ORDER BY DEPARTMENT_ID ASC;

/*
    NULL을 판정하는 연산자 
    
    컬럼명 IS NULL
    컬럼명 IS NOT NULL
    
    * IS NULL과 IS NOT NULL은 단항 연산자다.
    * IS NULL은 해당 컬럼의 값이 NULL이면 TRUE로 판정된다.
    * IS NOT NULL은 해당 컬럼의 값이 NULL이 아니면 TRUE로 판정된다.
    
    예시
        SELECT 컬럼명, 컬럼명
        FROM 테이블명
        WHERE 컬럼명 IS NULL;
*/

-- 직원정보 중에서 30번 부서와 60번 부서에 근무하는 직원의 아이디, 이름, 부서아이디를 조회하기
-- 문장 끝에 세미콜론 찍는 습관 들이기.... 
SELECT EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30 OR DEPARTMENT_ID = 60;

-- 직원정보 중에서 30번 부서와 60번 부서에 근무하고, 급여를 5000 이상 받는
-- 직원의 아이디, 이름, 급여, 부서아이디를 조회하기
-- 부서아이디를 기준으로 오름차순, 급여를 기준으로 오름차순 정렬하기
-- 괄호를 사용해서 명확하게 의도를 명시해줘야 함.
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE (DEPARTMENT_ID = 30 OR DEPARTMENT_ID = 60) AND SALARY >= 5000
ORDER BY DEPARTMENT_ID ASC, SALARY ASC;

-- 직원정보에서 급여를 10000이상 15000이하로 받는 직원의 아이디, 이름, 급여를 조회하기
-- 급여를 기준으로 오름차순 정렬하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >= 10000 AND SALARY <= 15000
ORDER BY SALARY ASC;

SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 10000 AND 15000
ORDER BY SALARY ASC;

/*
    기타 연산자
    
    BETWEEN A AND B
    A와 B 사이 값에 해당하는 행을 조회한다.
    + A값과 B값도 포함된다.
    + 값 >= A AND 값 <= B
    
    + 형식    
        SELECT 컬럼명, 컬럼명, 컬럼명
        FROM 테이블명
        WHERE 컬럼명 BETWEEN 시작값 AND 끝값;
        
    IN (값, 값, 값)
    + 나열된 값 중 하나라도 일치하면 그 행을 조회한다.
    + 형식
        SELECT 컬럼명, 컬럼명, 컬럼명
        FROM 테이블명
        WHERE 컬럼명 IN (값1, 값2, 값3); [ equal 비교를 여러 개 하는 경우 가능하면 IN 연산자 사용하기 ]
        * 제시된 컬럼명의 값이 값1 혹은 값2 혹은 값3 중 하나와 일치하면 TRUE로 판정한다.
        * (컬럼명 = 값1 OR 컬럼명 = 값2 OR 컬럼명 = 값3) 조건식과 동일하다.
        
    LIKE '패턴'
    + 지정된 패턴과 일치하는 문자값을 가진 행을 조회한다.
    + 패턴도 문자 형식이므로 ' ' 로 감싸야 함
    + 형식
        SELECT 컬럼명, 컬럼명, 컬럼명
        FROM 테이블명
        WHERE 컬럼명 LIKE '패턴';
    + 패턴문자
        '%'
            * 0개 이상의 문자와 매칭된다.
            * 예
                WHERE TITLE LIKE '자바%'; [ 얘만 그나마 조회 성능이 나옴. , 아래 2개와 같은 방법으로는 사용하지 말기 ]
                + 매칭되는 값 -> "자바", "자바의 정석", "자바 하루만에 끝내기"
                
                WHERE TITLE LIKE '%자바';
                + 매칭되는 값 -> "자바", "이펙티브 자바"
                
                WHERE TITLE LIKE '%자바%';
                + 매칭되는 값 -> "자바", "이펙티브 자바", "자바의 정석", "이것이 자바다."
        '_'
            * 1개 문자와 매칭된다.
                WHERE USER_NAME LIKE '이-'
                + 매칭되는 값 -> '이황', '이이' [ '이'는 매칭 안됨. 무조건 한 문자는 있어야 함 ]
*/

-- 직원정보에서 30번 부서와 60번 부서에 소속된 직원의 아이디, 이름, 소속부서 아이디를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (30, 60);

-- 직원정보 중에서 30번 부서와 60번 부서에 근무하고, 급여를 5000 이상 받는
-- 직원의 아이디, 이름, 급여, 부서아이디를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (30, 60) AND SALARY >= 5000;

-- 직종정보 중에서 직종아이디가 'AD'로 시작하는 직종의 아이디, 제목을 조회하기
SELECT JOB_ID, JOB_TITLE
FROM JOBS
WHERE JOB_ID LIKE 'AD%';

-- 직원정보 중에서 이름이 'A'로 시작하는 4글자 이름을 가진 직원의 아이디, 이름을 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'A___';

/*
    도구 - sql 워크시트하면 새로운 워크시트 생성 가능
    
    테이블 생성하기
        DDL(데이터 정의어) 명령을 사용한다.
    
    CREATE TABLE 테이블명 (
        컬럼명 데이터타입(사이즈),
        컬럼명 데이터타입(사이즈),
        컬럼명 데이터타입(사이즈),
        컬럼명 데이터타입(사이즈),
        컬럼명 데이터타입(사이즈)
    );  
        + 테이블명, 컬럼명은 영어대소문자, 숫자, _를 포함할 수 있다.
        + 테이블명, 컬럼명은 30글자를 초과할 수 없다.
        + 테이블명, 컬럼명은 숫자로 시작할 수 없다.
        + 데이터 타입
            NUMBER      숫자 타입 ( 정수, 실수 다 가능 )
            CHAR        고정 길이 문자타입 ( 글자 수 상관없음. 그냥 고정[값의 길이가 미리 결정된] 길이면 CHAR )
            VARCHAR2    가변 길이 문자타입 ( 기존에 설정한 크기를 초과해서 담으려 하면 오류이지만, 모자라게 담으려 하면 길이가 알아서 맞춰짐 )
            DATE        날짜타입
            LONG        대용량의 텍스트 데이터 타입(현재는 잘 사용되지 않음)
            CLOB        대용량의 텍스트 데이터 타입(Character Large Object)
            BLOB        대용량의 바이너리 데이터 타입(Binary Large Object)
            
        NUMBER(a,b)에서 b는 소수점 자릿수임.
*/

-- 테이블을 설계할 때는 자바랑 다르게, 이름을 연관성 있게 짓는 게 낫다. ( 나중에 JOIN 쓸 때 유리함. )
-- DATE는 따로 크기를 지정할 필요가 없다.
CREATE TABLE SAMPLE_PRODUCTS (
    PRODUCT_NO NUMBER(4),
    PRODUCT_NAME VARCHAR2(255),
    PRODUCT_COMPANY VARCHAR2(255),
    PRODUCT_PRICE NUMBER(7, 0), 
    PRODUCT_STOCK NUMBER(3, 0),
    PRODUCT_SOLDOUT CHAR(1),
    PRODUCT_CREATED_DATE DATE,
    PRODUCT_UPDATED_DATE DATE
);

/*
    새로운 행 추가하기 [ 항상 행 단위로 추가나 삭제가 이루어짐 ]

    + 컬럼명 명시적으로 적는 방법    
    [ 일반적으로는 이 방법을 사용하자 . ]
    INSERT INTO 테이블명(컬럼명, 컬럼명, 컬럼명, ...)
    VALUES              (값,     값,     ,값);
        * 지정된 컬럼에만 값을 설정해서 행을 추가할 때 사용한다.
        * 생략된 컬럼은 NULL값으로 채워진다.
        * 생략된 컬럼에 기본값이 설정되어 있으면 기본값으로 채워진다.
        * 컬럼의 순서는 테이블의 컬럼순서와 달라도 상관없다.
        
    + 컬럼명을 생략하는 방법
    [ 사용 지양하기 ]
    INSERT INTO 테이블명
    VALUES              (값,     값,     ,값);
        * 모든 컬럼의 값을 VALUES 항목에서 적어야 한다.
        * 테이블의 컬럼순서에 맞게 값을 나열해야 한다.
        * 특정 컬럼에 NULL값을 저장하는 경우에도 NULL을 명시적으로 적어야 한다.
*/

INSERT INTO SAMPLE_PRODUCTS
(PRODUCT_NO, PRODUCT_NAME, PRODUCT_COMPANY, PRODUCT_PRICE)
VALUES 
(100, '갤럭시 s24', '삼성전자', 1500000);

INSERT INTO SAMPLE_PRODUCTS
(PRODUCT_NO, PRODUCT_NAME, PRODUCT_COMPANY, PRODUCT_PRICE, PRODUCT_STOCK)
VALUES
(102, '갤럭시 플립', '삼성전자', 2000000, 30);

INSERT INTO SAMPLE_PRODUCTS
(PRODUCT_NO, PRODUCT_NAME, PRODUCT_COMPANY, PRODUCT_PRICE)
VALUES
(103, '아이폰15', '애플', 1700000);

-- 기본키의 조건
-- 값이 반드시 존재해야 하고,
-- 중복되어서는 안된다.

INSERT INTO SAMPLE_PRODUCTS
VALUES
(105, '아이폰15 플러스', '애플', 1900000, 100, 'N', NULL, NULL);

/*
    테이블의 값을 수정하기
    
    UPDATE 테이블명
    SET 
        컬럼명 = 값,
        컬럼명 = 컬럼명 + 값,
        컬럼명 = (SELECT 컬럼명 
                  FROM 테이블명
                  WHERE 조건식) // 이렇게 하려면 데이터가 한 행이 조회되야 함.
        WHERE 조건식;
        
        * WHERE 조건식을 생략하면 테이블의 모든 행에 대해서 지정된 컬럼의 값이 변경된다.
            (특별한 경우가 아니면 WHERE 조건식은 필수다.)
        * 테이블에 저장된 정보중에서 오직 한 행만 변경해야 할 때에는
        반드시 WHERE절의 조건식에 기본키컬럼을 사용한다.
      
       
        * 컬럼명 = 값 : 해당 컬럼에 지정된 값을 대입한다
        * 컬럼명 = 컬럼명 연산자 값 : 해당 컬럼의 기존값에 새로운 값을 더한 다음 대입한다.
*/

SELECT *
FROM SAMPLE_PRODUCTS;

-- 갤럭시 플립의 가격을 180만원으로 변경하기
UPDATE SAMPLE_PRODUCTS
SET
    PRODUCT_PRICE = 1800000
WHERE PRODUCT_NAME = '갤럭시 플립';

-- 상품정보에서 삼성전자 제품의 가격을 원래 가격보다 10% 할인된 가격으로 변경하기
UPDATE SAMPLE_PRODUCTS
SET
    PRODUCT_PRICE = PRODUCT_PRICE * 0.9
WHERE PRODUCT_COMPANY = '삼성전자';

-- 상품정보에서 아이폰 15제품의 재고량을 0으로 변경하고, 판매완료여부를 'Y'로 변경하기
UPDATE SAMPLE_PRODUCTS
SET 
    PRODUCT_STOCK = 0,
    PRODUCT_SOLDOUT = 'Y',
    PRODUCT_UPDATED_DATE = SYSDATE
WHERE PRODUCT_NAME = '아이폰15';

-- 메서드는 함수의 특별한 형태임
-- 함수는 이름이 있는 코드블록이다.
-- 메서드는 이름이 있는 코드블록 중에서 특별히 객체안에 정의된 것만 메소드라 함.
-- 오라클에서는 매개변수가 없는 함수는 괄호를 안 적는다. 

/*
    SYSDATE
    
    + 오라클의 내장함수다.
    + 시스템의 현재 날짜와 시간정보를 DATE 타입으로 반환한다.
    + INSERT, UPDATE 구문에서 현재 날짜와 시간정보를 저장할 때 사용한다.
    
*/

INSERT INTO SAMPLE_PRODUCTS
(PRODUCT_NO, PRODUCT_NAME, PRODUCT_COMPANY, PRODUCT_PRICE, PRODUCT_CREATED_DATE)
VALUES
(110, 'LG 그램', 'LG전자', 2500000, SYSDATE);

-- default 값으로 SYSDATE라는 함수를 넣을 때는 문자가 아니니 홑따옴표 사용 x, 함수도 기본값으로 지정가능.

INSERT INTO SAMPLE_PRODUCTS
(PRODUCT_NO, PRODUCT_NAME, PRODUCT_COMPANY, PRODUCT_PRICE)
VALUES
(113, '맥북 프로', '애플', 2800000);

SELECT *
FROM SAMPLE_PRODUCTS;

SELECT LENGTH(FIRST_NAME)
FROM EMPLOYEES;

/*
    테이블에서 행 삭제하기 [ 삭제는 항상 가로 행 하나를 통째로 날리는 것임 ]
    
    DELETE FROM 테이블명;
    + 해당 테이블의 모든 행을 삭제한다.
    
    DELETE FROM 테이블명
    WHERE 조건식
    + 해당 테이블에서 조건식이 TRUE로 판정되는 행을 삭제한다.
    + DELETE 명령으로 삭제한 행은 COMMIT 명령어를 실행하기 전에는 ROLLBACK 명령어로
      복구가 가능하다.
    
    TRUNCATE TABLE 테이블명
    + 지정된 테이블의 모든 행을 잘라낸다.
    + 테이블을 생성했을 때의 최초의 상태로 돌리는 느낌
    + TRUNCATE로 삭제된 정보는 복구할 수 없다.
    - 테이블의 모든 행의 데이터를 삭제한다.
    - 삭제된 행이 사용하고 있던 저장공간을 모두 반납한다.
    - 테이블의 인덱스도 전부 삭제된다.
    
    DROP TABLE 테이블명
    + 지정된 테이블을 삭제한다.
    + 테이블이 삭제되면 해당 테이블에 저장된 모든 데이터, 모든 인덱스,
    모든 제약조건이 완전히 사라진다.
    + 삭제 후 되돌릴 수 없다.
    
    -------------------------------------------------------------------------
    구분         데이터        저장공간         테이블           복구
    --------------------------------------------------------------------------
    DELETE        삭제         남아있음        남아있음          가능
    --------------------------------------------------------------------------
    TRUNCATE      삭제          삭제           남아있음         불가능
    --------------------------------------------------------------------------
    DROP          삭제          삭제             삭제           불가능
    --------------------------------------------------------------------------
    
*/
-- 상품정보에서 상품번호가 100인 상품 삭제하기
DELETE FROM SAMPLE_PRODUCTS
WHERE PRODUCT_NO = 100;

-- 전체 상품정보 조회하기
SELECT *
FROM SAMPLE_PRODUCTS
WHERE PRODUCT_DELETED = 'N';

UPDATE SAMPLE_PRODUCTS
SET   
    PRODUCT_STOCK = 30
WHERE PRODUCT_COMPANY = '삼성전자';

-- 102 상품의 삭제여부를 Y로 변경하기
UPDATE SAMPLE_PRODUCTS
SET
    PRODUCT_DELETED = 'Y'
WHERE PRODUCT_NO = 102;