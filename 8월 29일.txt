8월 29일

<h1>콜백함수의 활용</h1>
	
	<div>
		<button id="btn-del">삭제</button>
		<button id="btn-save">저장</button>
		<button id="btn-save1">저장1</button>
		<button id="btn-save2">저장2</button>
	</div>
	
<script type="text/javascript">
	// 이벤트처리
	/*
		이벤트와 이벤트처리
			- 사용자가 화면의 HTML 요소와 상호작용할 때마다
			해당 HTML 요소(엘리먼트)가 발생시키는 신호
			- HTML 요소가 발생시키는 신호는 이벤트 객체를 만든다.
			이벤트 객체에는 상호작용이 발생한 엘리먼트(HTML 요소)
							상호작용의 종류(click, mousemove, keyup, ...)
							기타 정보가 포함되어 있다.
							
		+ 이벤트 처리
			- 이벤트 처리는 이벤트가 발생할 때 실행될 이벤트 핸들러(콜백함수)
			  등록하는 것이다.
			- 이벤트 핸들러는 사용자의 상호작용에 어떻게 행돌할 지
			  자바스크립트 코드로 구현해놓은 것이다.
			- 웹 브라우저는 이벤트가 발생하면 등록된 이벤트 핸들러를 실행시킨다.
		
		+ 이벤트 처리 절차
			1. 사용자와 상호작용하는 HTML 요소(엘리먼트)를 선정한다.
			2. 이벤트 처리에 사용될 상호작용의 종류를 선정한다.
			3. 이벤트에 반응해서 실행될 이벤트핸들러 함수를 작성한다.
			4. 1번에서 선정한 엘리먼트에서 2번에서 선정한 상호작용이
			  발생했을 때, 3번에서 작성한 이벤트핸들러가 실행되도록
			  이벤트핸들러를 등록한다.
			
			1. 사용자와 상호작용하는 HTML 요소는 삭제버튼이다.
			2. 상호작용의 종류는 click이다.
			3. 이벤트핸들러 함수를 작성한다.
				function handler() {
					수행문;
					수행문;
				}
			4. let btn1 = document.getElementById("btn-del")
			   btn1.addEventListerner("click", handler);
		<div>
			<button id="btn-del">삭제</button>
			<button id="btn-save">저장</button>
			<button id="btn-save1">저장1</button>
			<button id="btn-save2">저장2</button>
		</div>
	*/
	
		let btn1 = document.getElementById("btn-del");
	    let btn2 = document.getElementById("btn-save");
	    let btn3 = document.getElementById("btn-save1");
	    let btn4 = document.getElementById("btn-save2");
	    
	    btn1.addEventListener("click", function() {
	        alert("삭제버튼이 클릭되었습니다.");
	    });
	    btn2.addEventListener("click", function() {
	        alert("저장버튼이 클릭되었습니다.");
	    });
	    
	    btn3.addEventListener("click", () => alert("저장1버튼이 클릭됨"));
	    btn4.addEventListener("click", () => alert("저장2버튼이 클릭됨"));
	    
	<h1>화살표 함수</h1>
<script>
	// 화살표 함수
	/*
		+ 화살표 함수
			- 함수표현식보다 더 간결하게 함수를 생성할 수 있는 방식이다.
			- 주로 콜백함수를 정의할 때 활용된다.
		+ 화살표 함수의 형식
			let fn = (매개변수, 매개변수, ...) => 표현식
			* 표현식은 수행문이다.
			
		+ 화살표 함수의 작성법
			- 인자가 하나만 있는 경우, 인자를 감싸는 괄호는 생략가능하다.
			- let fn = (a) => console.log(a);
			  let fn = a => console.log(a);
			  
			- 인자가 하나도 없는 경우, 괄호를 비워놓으면 된다.
			  단, 괄호를 생략할 수 없다.
			  let fn = () => console.log("연습");
			  
	        - 표현식의 본문 내용이 여러줄인 경우, 중괄호 안에 코드를 넣는다.
	          let fn = (a, b) => {
					let c = a*b;
					return c;
	          };
	          
	        - 표현식이 단 한 줄인 경우, 중괄호는 생략할 수 있고,
	          표현식의 연산결과가 반환값이 된다. return 키워드를 생략한다.
	          
	          let fn = (a, b) => a*b;
	          	* 표현식이 한 줄이어서 중괄호는 생략했다.
	          	* 표현식이 한 줄이어서 return 키워드는 생략했다.
	          	  fn 함수를 실행하면 a*b의 값이 반환된다.
	          	  
	          let fn = (a,b) => {a*b};
	          	* 위의 화살표 함수는 a*b값을 반환하지 않는다.
	          	* 표현식을 중괄호로 감싸면 명시적으로 return 문을 추가해야 값이 반환된다.
	          	
	*/
	
	// 인자가 없는 화살표 함수
	let fn1 = () => console.log('연습');
	fn1();
	
	// 인자가 한 개 있는 화살표 함수
	let fn2 = (a) => a*2;
	let fn3 = a => a*3;
	
	let value2 = fn2(10);
	let value3 = fn3(10);
	console.log(value2);
	console.log(value3);
	
	// 인자가 두 개 있는 화살표 함수
	let fn4 = (a,b) => a*4;				// 연산결과가 반환된다.
	let fn5 = (a,b) => { a*b };			// 값이 반환되지 않는다.
	let fn6 = (a,b) => { return a*b; };
//	let fn7 = (a,b) => return a+b;		// 문법 오류다.
	
	let value4 = fn4(3, 4);
	let value5 = fn5(3, 4);
	let value6 = fn6(3, 4);
//	let value7 = fn7(3, 4);
	
	console.log(value4);
	console.log(value5);
	console.log(value6);
	
</script>

	<h1>자동실행 함수</h1>
	
<script type="text/javascript">
	// 즉시 실행 함수
	/*
		즉시실행 함수
			- 함수를 정의하자마자 실행하는 함수를 말한다.
			- 웹페이지가 로딩되자마자 바로 실행해야 되는 작업을
			  즉시실행함수로 구현한다.
			- 전역 변수 충돌을 방지할 수 있다.
			
		즉시 실행함수의 형식
			+ 매개변수가 없는 즉시실행함수
			(function() {
				수행문;
				수행문;
			})();
	
			+ 매개변수가 있는 즉시실행함수
			(function(a, b) {
				수행문;
				수행문;
			})(값1 , 값2);
			
	*/
	(function fn() {
		console.log("즉시 실행함수가 실행됩니다.");
	})();

</script>

	<h1>배열</h1>
	
<script type="text/javascript">
	//	배열
	/*
		배열
			- 순서가 있는 콜렉션이다.
			- 자바스크립트의 배열은 가변길이 배열이다.
				* 자바의 ArrayList와 유사하다.
		
		배열의 선언
			let arr1 = [];
			let arr2 = [값, 값, 값, 값, ...];
			
		배열에 요소 수정/추가하기
			let arr1 = [];
		 	arr1[0] = 값; // arr1 ---> [값]
		 	arr1[1] = 값; // arr1 ---> [값, 값]
		 	arr1[4] = 값; // arr1 ---> [값, 값, undefined, undefined, 값]
		 	* 인덱스를 활용해서 배열의 특정위치에 값을 저장할 수 있다.
		 	* 배열에 값이 저장될 때마다 배열의 크기는 자동으로 변한다.
		 	
		 배열의 값 변경하기
		 	let arr1 = ['김유신', '강감찬', '홍길동'];
		 	arr1[1] = "류관순"; arr1 ----> ['김유신', '류관순', '홍길동']
		 	* 인덱스를 활용해서 지정된 위치의 값을 변경할 수 있다.
		 	
		 배열의 length 프로퍼티
		 	length 프로퍼티는 배열의 길이를 나타낸다.
		 	let arr1 = ['김유신', '강감찬', '홍길동'];
		 	console.log(arr1.length); // 3이 출력된다.
		 	
		 * 자바스크립트 배열의 length는 쓰기가 가능하다.
		 	let arr1 = ['김유신', '강감찬', '홍길동'];
		 	arr1.length = 1 ; arr1 ----> ['김유신']
		 * 배열의 모든 요소를 지우기
		 	arr1.length = 0;  arr1 ----> []
		 	
	*/
	
	// 배열의 선언
	let arr1 = [];
	let arr2 = ['김유신', '강감찬', '홍길동'];
	
	// 배열에 값 추가하기
	arr1[0] = 100;
	arr1[1] = 200;
	arr1[4] = 300;
	
	console.log(arr1);
	console.log('배열의 길이', arr1.length);
	console.log('배열의 길이', arr2.length);
	
	arr1.length = 0;
	arr2.length = 1;
	
	console.log(arr1);
	console.log(arr2);
</script>

	<h1>배열</h1>
	
<script type="text/javascript">
	// 배열에 저장된 값을 반복처리하기
	/*
		for문을 이용하면 배열의 저장된 값을 순회하며 처리할 수 있다.
		
		let arr = ['김유신', '홍길동', '강감찬'];
	
		+ 전통적인 for문으로 배열 반복처리하기
			for (let index = 0; index < arr.length; index++) {
				let value = arr[index];
				console.log(index, value);
			}
		
		+ for..of 구문으로 배열 반복처리하기
			for (let value of arr) {
				console.log(value);
			} 
		// 자바의 향상된 for문과 유사함 
	*/
	let arr = ['김유신', '홍길동', '강감찬'];
		
	for (let index = 0; index < arr.length; index++) {
		let value = arr[index];
		console.log(index, value);
	}
	
	// for..of 구문으로 배열 반복처리하기
	// java의 향상된 for문과 유사하다.
	// index는 알 수 없음. [ 인덱스가 필요하지 않을 때 ]
	for (let value of arr) {
		console.log(value);
	}
</script>

	<h1>배열객체의 주요 메소드</h1>

	<div>
		<input type="text" name="name" id="name">
		<button id="btn-add">추가</button>
	</div>
	
	<ul id="list-names"></ul>
	
<script type="text/javascript">
	// 입력한 이름을 저장하는 배열
	let names = [];
	
	// 추가버튼을 클릭하면 실행되는 콜백함수를 등록하기
	document.getElementById("btn-add").addEventListener('click', () => {
		// 1. 입력필드의 값을 읽어온다.
		let value = document.getElementById("name").value;
		
		// 2. 배열에 값 추가하기
		names.push(value);
		console.log(names);
		
		// 3. 배열에 저장된 값으로 <li> 태그를 생성해서 표시하기
		let content = "";
		for (let name of names) {
			content += `<li>\${name}</li>`;
		}
		
		// 4. 생성된 HTML 컨텐츠를 화면에 표시하기
		document.getElementById("list-names").innerHTML = content;
	});
	// 배열객체
	/*
		+ push(값)와 pop()
			push(값)	
				배열의 맨 끝에 값을 추가한다.
			pop()
				배열의 맨 끝에 값을 삭제하고, 그 값을 반환한다.
				
		+ unshift(값)과 shitf()
			unshitf(값)
				배열의 맨 앞에 값을 추가한다.
			shitf()
				배열의 맨 앞값을 삭제하고, 그 값을 반환한다.
		
		* 배열의 처음이나 끝에 값을 추가하거나 삭제할 때는
		  인덱스를 사용하지 않고, 위의 메소드를 사용해서 
		  추가/삭제할 수 있다.
		  
		 + splice(인덱스, 삭제할갯수, 값, 값, ...) 
		 	let arr = ['a', 'b', 'c', 'd', 'e', 'f'];
	
			-  삭제하기
				arr.splice(2, 1); --> ['a', 'b', 'd', 'e', 'f']
				arr.splice(2, 3); --> ['a', 'b', 'f']
				
			-  추가하기
				arr.splice(2, 0, 'k');
					['a', 'b', 'k', 'c', 'd', 'e', 'f']
				arr.splice(2, 0, 'k', 'm', 'l');
					['a', 'b', 'k', 'm', 'l', 'c', 'd', 'e', 'f']
					
			삭제하고 추가하기
				arr.splice(2, 1, 'k')
					['a', 'b', 'k', 'd', 'e', 'f']
				arr.splice(2, 3, 'k')
					['a', 'b', 'k', 'f']
				arr.splice(2, 3, 'k', 'l', 'm');
					['a', 'b', 'k', 'l', 'm', 'f']
	*/			
	
	let arr1 = ['김유신'];	console.log(arr1);									
	arr1.push('강감찬');	console.log(arr1);									
	arr1.push('이순신');	console.log(arr1);
	arr1.push('류관순');	console.log(arr1);
	arr1.push('홍길동');	console.log(arr1);
	
	arr1.unshift('워싱턴');		console.log(arr1);
	arr1.unshift('링컨');		console.log(arr1);
	arr1.unshift('케네디');		console.log(arr1);
	arr1.unshift('루즈벨트');	console.log(arr1);
</script>

	<h1>배열의 메소드</h1>
	
	<h3>고객명단</h3>
	<ul id="customer-list"></ul>
	
<script type="text/javascript">
/*	
	// 배열의 주요 메소드
	// 1. 배열의 모든 값을 소비하기
		배열 forEach(콜백함수) 
		value index array
			+ 배열의 forEach 메소드는 배열의 각 요소에 대해서 콜백함수를 실행한다.
			+ 콜백함수
				입력값			  반환값
				------------------------
				값 -> 콜백함수 -> 없음
			+ 콜백함수
				function(value, index, arr) { ... }
					value : 배열의 현재 값 [ 생략 불가 ]
					index : 배열의 현재 인덱스, 생략 가능
					arr : 현재 배열, 생략 가능
					
	// 2. 배열의 값을 선별하기
		배열 filter(콜백함수)
			+ filter 메소드는 배열의 각 요소에 대하여 콜백함수를 실행한다.
			+ 콜백함수가 true를 반환하는 요소만 선별해서
			  새 배열에 담아서 반환한다.
			+ filter메소드는 배열을 반환한다.
			+ 콜백함수
				입력값				반환값
				--------------------------
				값	-> 콜백함수 -> true/false
				
	// 3. 배열의 값을 변환하기
		배열 map(콜백함수)
			+ map 메소드는 배열의 각 요소에 대하여 콜백함수를 실행한다.
			+ 콜백함수는 배열의 각 요소를 하나씩 전달받아서
			  다른 값으로 변환하고, 그 값을 반환한다.
			+ map 메소드는 콜백함수가 반환하는 값을 새 배열에 담아서
			  반환한다.
			+ 콜백함수
				입력값			반환값
				-----------------------
				값 -> 콜백함수 -> 새로운값
			  
	// 4. 배열의 값을 집계하기
		값	reduce(콜백함수, 초기값)
			+ reduce 메소드는 배열의 각 요소에 대해 콜백함수를 실행한다.
			+ 콜백함수는 배열의 각 값을 집계한다.
			+ reduce 메소드는 최종적으로 값 하나를 반환한다.
			+ 콜백함수
				입력값				반환값
				-----------------------------
				값	-> 콜백함수 -> 중간단계값
			+ 콜백함수	
				function(total, value, index, arr) { ... }
					total : 이전 현재까지 집계된 값
							초기값은 배열의 첫번째값이거나,
							별도의 초기값을 지정했을 때는 
							그 값이 초기값이 된다.
					value : 배열의 현재 값
					index : 배열의 현재 인덱스, 생략 가능
					arr   : 현재 배열, 생략 가능
							
			
*/
	// 배열의 값 소비하기
	let arr1 = [10, 20, 30, 40, 50];

	// forEach 메소드의 콜백함수는 배열의 각 요소를 어떻게 소비할 지
	// 구현된 메소드다.
	arr1.forEach(function(value, index) {
		// 배열의 값을 화면에 출력하는 것으로 소비한다.
		console.log(value);
	});
	
	let total1 = 0;
	arr1.forEach(function(value) {
		total1 += value;
	})
	console.log("합계", total1);
	
	let total2 = 0;
	arr1.forEach(value => total2 += value);
	console.log("합계", total2);
	
	// 배열의 값을 선별하기
	let arr2 = [21, 43, 22, 14, 5, 7, 8, 12, 40];
	
	let arr22 = arr2.filter(function(value, index) {
		return value%2 == 0;
	});
	console.log(arr22);
	
	let arr23 = arr2.filter(value => value%2 == 0);
	console.log(arr23);
	
	// find 와 filter의 차이 
	// filter는 조건을 만족하는 모든 값을 반환
	// find는 조건을 만족하는 첫 번째 값만 반환
	let value24 = arr2.find(value => value%2 == 0);
	console.log(value24);
	
	let arr7 = [2, 4, 6, 8, 10, 12];
	let value77 = arr7.find(value => value%2);
	console.log(value77);
	
	// 배열의 값을 변환하기
	let arr3 = [1, 2, 3, 4, 5];
	let arr31 = arr3.map(function(value, index) {
		if(index == 1 ) return "안녕하세요";
		if(index == 2 ) return value*5;
	});
	console.log(arr31);
	
	let arr32 = arr3.map(value => value*3);
	console.log(arr32);
	
	let arr4 = ["김유신", "강감찬", "이순신", "류관순", "홍길동"];
	let arr41 = arr4.map(function(value, index) {
		return `<li>\${value}</li>`;
	});
	console.log(arr41);
	
	let content4 = arr4.map(value => `<li>\${value}</li>`)
						.join("");
	document.getElementById("customer-list").innerHTML = content4;
	
	// 배열의 값을 집계하기
	// 초기값을 지정하면 -> 첫 번째 값부터 total에 더한다.
	// 초기값을 지정x -> 두 번째 값부터 total에 더한다.
	let arr5 = [10, 20, 30, 40, 50];
	let result = arr5.reduce(function(total, value, index) {
		console.log(`total->\${total}, value->\${value}`);
		
		return total + value;
	});
	console.log(result);
</script>

-------------------------------------------------------------------------------------------------

자바스크립트 배열의 프로퍼티 및 메소드
property
	length

method
	push(값)
		배열의 끝에 지정된 값을 추가한다.
	pop()
		배열의 맨 끝 값을 삭제하고, 그 값을 반환한다.
	unshift(값)
		배열의 맨 앞에 지정된 값을 추가한다.
	shift()
		배열의 맨 앞에 값을 삭제하고, 그 값을 반환한다.
	splice(인덱스, 삭제할갯수, 값, 값, 값)
		지정된 인덱스 위치에서부터 지정된 갯수만큼 삭제하고, 지정된 값을 추가한다.
		인덱스 : 삭제, 추가가 발생할 위치
		삭제할 갯수 : 0이면 삭제하지 않는다.
		값 : 인덱스 위치에 추가할 값
	join(문자열)
		배열의 모든 값을 지정된 문자열을 구분문자로 이어서 하나의 텍스트로 반환한다.
		문자열을 지정하지 않으면 기본 구분문자로 ','를 사용한다.
	includes(값)
		배열에 지정된 값이 존재하면 true를 반환한다.
	indexOf(값)
		배열에 지정된 값이 존재하면 그 값이 저장된 인덱스를 반환한다.
		지정된 값이 존재하지 않으면 -1을 반환한다.
	lastIndexOf(값)
		배열의 맨 마지막번째부터 지정된 값을 탐색해서 그 값이 저장된 인덱스를 반환한다.
	배열.forEach(function(value, index, arr) { 
		수행문;
	 });
		배열의 모든 요소에 대해서 지정된 콜백함수를 실행시킨다.
		value : 배열의 현재 값
		index : 현재 인덱스, 생략가능
		arr	 : 배열
	
	let newArray = 배열.filter(function(value, index, arr) { 
		수행문;
		return 불린값;
	... });
		배열의 모든 요소에 대해서 지정된 콜백함수를 실행시킨다.
		콜백함수가 true를 반환하는 요소로 구성된 새로운 배열이 반환된다.
	
	let newArray = 배열.map(function(value, index, arr) {
		수행문;
		return 새로운값;
	});
		배열의 모든 요소에 대해서 지정된 콜백함수를 실행시킨다.
		콜백함수가 반환하는 새로운 값으로 구성된 새로운 배열이 반환된다.
		
	let 집계값 = 배열.reduce(function(total, value, index, arr) {
		수행문;
		return 중간집계표현식;
	});
		배열의 모든 요소에 대해서 지정된 콜백함수를 실행시킨다.
		콜백함수의 표현식을 활용해서 최종 집계결과를 반환한다.
	
	let 값 = 배열.find(function(value, index, arr) {
		수행문;
		return 불린값;
	});	
		배열의 모든 요소에 대해서 지정된 콜백함수를 실행시킨다.
		콜백함수가 true를 반환하는 첫 번째 값이 find() 메소드의 최종값이다.
	
	배열.sort()
	배열.sort(function(a, b) {
		return 표현식;
	});
		a, b는 배열의 값이다.
		콜백함수의 표현식은 0, 음수, 양수 중 하나를 반환한다.
		[ a-b를 구해서 양수면 바꾸는 로직을 따른다. ]
		sort() 메소드는 콜백함수가 반환하는 값을 기준으로 a, b를 비교해서 정렬한다.
		sort() 메소드는 기존 배열을 수정한다. [ 새로운 배열 생성이 아님 ]

	배열.reverse()
		배열의 저장순서를 뒤집는다.
		sort() 메소드는 기존의 배열을 수정한다.
		