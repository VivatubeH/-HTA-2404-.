Apache Commons Fileupload API를 이용한 멀티파트 요청처리
1. DiskFileItemFactory 생성
* DiskFileItemFactory는 멀티파트 요청을 분석하는 
  JakartaServletFileUpload객체가 파일업로드 처리를
  수행할 때 필요한 정보를 제공하는 객체다.
2. JakartaServletFileUpload 생성
* JakartaServletFileUpload는 요청객체를 전달받아서
  멀티파트 요청을 처리하고, 처리 결과를 반환한다.
3. JakartaServletFileUpload의 parseRequest(HttpServletRequest req)를
실행해서 멀티파트 요청을 처리하고, 처리결과를 List<FileItem>으로
반환받는다.

4. FileItem 객체는 입력필드로 입력한 정보를 표현하는 객체다.
* FileItem 객체의 isFormField() 메소드가 true를 반환하면
  일반 입력필드고, false를 반환하면 첨부파일 업로드 입력필드다.
* 주요 API
String getFieldName()
	- 입력필드의 이름을 반환한다.
String getString()
	- 입력필드에 입력한 값을 반환한다.
String getName()
	- 업로드된 첨부파일의 이름을 반환하는 메소드
String getInputStream()
	- 서버의 임시디렉토리에 저장된 첨부파일과 연결된
	  읽기전용 입력스트림을 반환하는 메소드
boolean isFormField()
	- 일반 입력필드일 때 true를 반환하는 메소드다.
	
DiskFileItemFactory factory = DiskFileItemFactory.builder()
.setCharset("UTF-8")
.get();
JakartaServletFileUpload upload = new JakartaServletFileUpload(factory);
List<FileItem> items = upload.parseRequest(request);

Builder 패턴

public class Employee {
	
	int no;
	String name;
	String email;
	String tel;
	String address;
	int salary;
	Date hireDate;
	Dept dept;
	
	// 번호, 이름, 이메일, 전화번호, 주소, 급여, 입사일, 부서정보를 전달받아서 초기화하는 생성자 메소드
	public Employee(int no, String name, String email, String tel, String address, int salary,
	 			int salary, Date hireDate, Dept dept) { 
	 		this.no = no;
	 		...	
	 }
	 
}

// 번호, 이름, 이메일, 부서정보로 Employee 객체 생성하기
Employee emp1 = new Employee(10, "홍길동", "hong@gmail.com", null, null, 0, null, dept);

// 번호, 이름으로 Employee 객체 생성하기
Employee emp2 = new Employee(20, "김유신", null, null, null, 0, null, null);

* 생성자를 통한 객체의 초기화는 다양한 경우의 수만큼 생성자 메소드를 중복정의해야 한다.
* 메소드 중복정의는 변수의 개수, 변수의 타입이 서로 다르게 정의해야 하므로 
  우연히 같은 타입, 같은 개수의 변수로 구성되어 있는 것은 중복정의가 안 된다.
  
  public Employee(int no, String name, String email, Dept dept) {
  	...
  }
  public Employee(int no, String name, String tel, Dept dept) {
  	...
  }
  위 2개의 생성자는 각각 다른 값을 전달받아서 객체를 초기화하지만,
  매개변수의 갯수, 매개변수의 타입이 동일하기 때문에 중복정의할 수 없다.

빌더 패턴은 이런 문제점을 해결하기 위해 
public class Employee {
	int no;
	String name;
	String email;
	String tel;
	int salary;
	
	public static Builder builder() {
		return new Builder();
	}
	// 내부 클래스
	public static class Builder {
		private int no;
		private String name;
		private String email;
		private String tel;
		private int salary;
		
		public Builder no(int no) {
			this.no = no;
			return this;
		}
		public Builder name(String name) {
			this.name = name;
			return this;
		}
		public Builder email(String email) {
			this.email = email;
			return this;
		}
		public Builder tel(String tel) {
			this.tel = tel;
			return this;
		}
		public Builder salary(int salary) {
			this.salary = salary;
			return this;
		}
		
		public Employee build() {
			Employee emp = new Employee(no, name, email, tel, salary);
			return emp;
		}
	}
}

Employee emp1 = Employee.builder()
					.no(10)
					.name("홍길동")
					.build();
	
Employee emp2 = Employee.builder()
					.no(20)	
					.name("김유신")
					.email("kim@gmail.com")
					.build();
Employee emp3 = Employee.builder()
					.no(30)
					.name("강감찬")
					.tel("010-1111-1111");
					.build();
Employee emp4 = Employee.builder()
					.no(40)
					.name("이순신")
					.salary(5000000);
					.build();
					
* Builder를 이용하면 객체를 생성할 때 다양한 초기화 전략을 수행할 수 있다.
* 초기화전략의 경우의 수만큼 생성자 메소드를 정의할 필요가 없다.
* Builder 객체의 메소드가 메소드 체이닝을 지원하기 때문에 
  수행문 하나로 다양한 초기화 전략을 수행할 수 있다.

Factory와 Builder 활용하기
// Builder로 세팅하고, Factory로 객체를 찍어낸다.

class ConnectionFactory {
	private String url;
	private String driverClassName;
	private String username;
	private String password;
	
	private ConnectionFactory() {
		try {
			Class.forName(driverClassName);
		} catch (ClassNotFoundException ex) {
			
		}
	}
	
	public Connection getConnect() {
		Connection con = DriverManager.getConnection(url, username, password);
		return con;
	}
	
	public static Builder builder() {
		return new Builder();
	}
	
	public static class Builder {
		private String url;
		private String driverClassName;
		private String username;
		private String password;
		
		public Builder url(String url) {
			this.url = url;
			return this;
		}
		public Builder driverClassName(String DriverClassName) {
			this.driverClassName = driverClassName;
			return this;
		}
		public Builder username(String username) {
			this.username = username;
			return this;
		}
		public Builder password(String password) {
			this.password = password;
			return this;
		}
		
		public ConnectionFactory build() {
			ConnectionFactory factory = new ConnectionFactory();
			factory.setUrl(url);
			factory.setDriverClassName(driverClassName);
			factory.setUsername(username);
			factory.setPassword(password);
			
			return factory;
		}
	}
	
}

ConnectionFactory factory = ConnectionFactory.builder()
	.driverClassName("oracle.jdbc.OracleDriver")
	.url("jdbc:oracle:this:@localhost:1521:xe")
	.username("hta")
	.password("zxcv1234")
	.build();
	
Connection con1 = factory.getConnection();
Connection con2 = factory.getConnection();
Connection con3 = factory.getConnection();
Connection con4 = factory.getConnection();
Connection con5 = factory.getConnection();

Javascript 
- 브라우저 내에서 실행되는 프로그램을 개발할 수 있는 프로그래밍 언어이다.
- 인터프리터 프로그래밍 언어이다. ( 컴파일 과정없이 소스가 실행파일로 사용된다. )
- HTML 컨텐츠 변경, 사용자와 상호작용하는 프로그램 작성, 서버와 데이터 통신 등이 가능하다.
- 클래스 없이 객체 생성이 가능하다. [ 내부적으로는 객체 지향 언어이다. ]

Java는 
	자료형 변수;
	int 	  	a;
	double 	b;
	long		c;
	char		d;
	String	e;
	
	반환타입 메소드명(타입 변수명) {
		...
	}
	
	이렇게 타입이 고정되어 있다. 자바는 정적 데이터 타입을 가지고 있다.
	
JavaScript
	let a = 10;
	    a = 3.14;
	    a = 'a';
	    a = "안녕하세요";
	    a = [10, 12, 30, 40];
	let은 자료형이 아닌 변수를 나타내는 키워드이다.
	자바스크립트는 값이 대입되는 순간에 타입이 결정된다.
	한 번 결정된 데이터 타입이 다른 값을 넣으면 즉시 변경된다.
	자바스크립트는 동적 데이터 타입을 지원한다.

	function 함수명(변수) {
		...
	}
	반환타입이나 변수명은 적지 않는다.
	
	자바스크립트의 함수는 1급시민이다.
	* 프로그래밍 언어에서의
	1급시민 : 변수에 대입 가능, 매개변수의 인자값으로 사용 가능, 반환값으로 사용 가능
	즉, 자바에서의 1급 시민은 기본자료형과 클래스였다.
	[ 자바에서 메소드는 1급 시민이 아니었다. ]
	
1. <script> 태그
+ javascript 코드를 포함하는 태그다.
+ 브라우저는 <script> 태그에 정의된 코드는 javascript 코드로
인지하고, 필요한 시점에 실행할 수 있다.

2. alert("메세지")
+ 자바스크립트 내장함수다.
+ 화면에 경고창을 띄우고, 메세지를 표현한다.

자바스크립트 파일은 확장자가 .js로 끝남.

<!-- 
외부 자바스크립트 파일을 포함시키기

<script src="경로"></script>
+ script 태그의 src 속성으로 외부 js파일을 현재 웹 페이지에
  포함시킨다.
+ <script>와 </script> 태그 사이에 컨텐츠가 없더라도
  <script> 닫는 태그를 생략할 수 없다.
  
  단, 별도의 jsp 파일로 만들면 데이터 변경 시 반영이 잘 안되니깐 그냥 <script> 코드 안에 쓰기 
 -->

웹 페이지에서 외부 스크립트 파일도 포함시키고, 
스크립트 코드도 직접 작성할 경우에
반드시, 반드시, 반드시, 반드시, 반드시, 반드시
새로운 <script></script> 태그 추가한 다음에 작성해야 한다.
[ 안 그러면 실행이 안됨 ]

<script type="text/javascript">
// 숫자 리터럴
let num1 = 10;		// 정수
let num2 = 3.14; 	// 실수
let num3 = 5.3e3; 	// 5.3*10^3 (5300)
let num4 = 1e-3;	// 0.003

// 문자열 리터럴
let str1 = '안녕하세요'; // 작은 따옴표
let str2 = "안녕하세요"; // 큰 따옴표
let str3 = `안녕하세요`; // 백틱
let str4 = `
	안녕하세요
	문자열을 여러 줄에 걸쳐서 작성할 수 있습니다.
	백틱을 사용하면요...
	`;

let name = "홍길동";
let kor = 100;
let eng = 80;
let math = 60;

// 백틱내에서는 변수의 값을 문자열의 중간에 삽입할 수 있다.
let text = `
	\${name}님의 성적을 확인하세요.
	
	국어점수: \${kor}
	영어점수: \${eng}
	수학점수: \${math}
	종합점수: \${kor + eng + math}
	평균점수: \${(kor + eng + math)/3}
`;

alert(text);

// 불린형
// 불린형의 값은 true, false 두 종류의 값이 있다.
let b1 = true;
let b2 = false;

// 배열
// 자바스크립트의 배열은 [값, 값, 값]의 형식으로 작성한다.
// 자바스크립트의 배열은 값이 서로 다른 타입이어도 상관없다.
let arr1 = [];
let arr2 = [10, 20, 30];
let arr2 = ["홍길동", "김유신", "강감찬"];
let arr3 = ["홍길동", "hong@gmail.com", 173.1, 68.1, "A"];

// 변수: 데이터를 저장할 때 사용하는 이름이 있는 저장소다.
//		 자바스크립트에서는 let 키워드를 이용해서 변수를 생성한다.
//		 예전에는 var 키워드를 이용해서 변수를 생성하였다.

// 상수 : 한번 저장된 값이 변화되지 않는 변수다.
//		  자바스크립트에서는 const 키워드를 이용해서 상수를 생성한다.
//		  상수의 값을 변경하면 오류가 발생한다.
	
// 변수의 선언

// value1 변수는 변수를 생성하고 값을 대입하지 않았다.
// value1 변수의 자료형은 undefined 타입이다.
// value1 변수는 undefined 값을 가진다.
// undefined는 자료형의 이름이다.
// undefined는 undefined 자료형의 변수가 가지는 유일한 값이다.
// 변수를 생성하고 초기화하지 않으면 무조건 undefined이다.
let value1;	

// value2 변수는 변수를 생성하고 값을 대입하였다.
// value2 변수는 number 타입이다.
// * 자바스크립트는 정수, 실수 상관없이 전부 number 타입이다.
// 자바스크립트에서 타입 확인은 typeof 변수명 으로 확인한다.
let value2 = 100;
value2 = 80; // 변수는 다른 값을 대입할 수 있다.
value2 = 70; // 변수의 값은 변경 가능하다.

// value3 변수는 변수를 생성하고 값을 대입하였다.
// value3 변수는 number 타입이다.
let value3 = 3.14;

// value4 변수는 변수를 생성하고 값을 대입하였다.
// value4 변수는 String 타입이다.
let value4 = "홍길동";

// value5 변수는 object 타입이다.
// value5 변수는 null 값을 가진다.
// null을 가지는 변수의 타입이 object 타입이다.
// null 값은 어떤 객체도 참조하고 있지 않다는 것을 의미하는 것이다.
let value5 = null;

// 상수
// 		상수는 값을 재할당할 수 없기 때문에 상수를 생성할 때
//		무조건 값을 할당해야 한다. 값을 할당하지 않으면 오류가 발생한다.
// 		상수명은 변수와 구별하기 위해서 전부 대문자로 적는다.
const MIN_PASSWORD_LENGTH = 9;

// 변수
// 변수는 let 키워드를 이용해서 생성한다.
// 자바스크립트에서 변수의 타입은 저장되는 값에 따라서 결정된다.
// 변수의 타입은 가변적이고, 저장되는 값에 따라서 동적으로 변한다.

let value;

// console.log(값)
// console은 자바스크립트의 내장객체인 Console 객체를 참조하는 참조변수다.
// log(값)은 Console 객체의 메소드다. 
// console.log(값)은 브라우저의 콘솔창에 값을 출력한다.
console.log('변수 value의 자료형', typeof value);

value = "홍길동";
console.log('변수 value의 자료형', typeof value);

value = 100;
console.log('변수 value의 자료형', typeof value);

value = false;
console.log('변수 value의 자료형', typeof value);

// 사칙연산자.
// 덧셈연산자 : +
// 뺄셈연산자 : -
// 곱셈연산자 : *
// 나눗셈연산자 : /
// 나머지연산자 : %
// 거듭제곱연산자 : **

let num1 = 3;
let num2 = 5;

console.log(num1 + num2);
console.log(num1 - num2);
console.log(num1 * num2);
console.log(num1 / num2); 
// 자바스크립트는 정수, 실수 구분이 없어서
// 0.6이 출력된다.
console.log(num1 / 0); 
// 자바스크립트는 0으로 나누면 Infinity 무한대가 된다.
console.log("안녕하세요"/num1); 
// NaN이 출력된다.
console.log(num1 % num2);
console.log(num1 ** num2);

// NaN은 Not a Number의 줄임말이다.
// NaN은 계산 중에 오류가 발생했음을 나타내는 값이다.
// 자바스크립트는 사칙연산과정에 올바르지 않은 값이 사용되면
// 오류가 발생하는 대신 NaN 값을 최종결과값으로 반환한다.

// 덧셈연산자의 예외적 사용
// + 덧셈연산자의 좌항 혹은 우항에 문자열이 있으면
//   덧셈연산자는 두 항의 값을 이어붙인 문자열을 반환한다.
let message = "안녕하세요";
console.log(message + num1); // "안녕하세요3"
console.log(num1 + num2 + message); // "8안녕하세요"
console.log(message + num1 + num2); // "안녕하세요35"

// 사칙연산에서 undefined, null, true, false 
// undefied + 1 --> NaN
// null 	+ 1 --> 1
// true		+ 1 --> 2
// flase	+ 1 --> 1
// * null은 0, true는 1, false는 0으로 변환 후 연산한다.

// 비교 연산자
// >, < , >= , <=, ==, !=
// ===, !==
	
let value1 = "23";
let value2 = 23;
let value3 = 45;

console.log(value1 == value2);	// true
console.log(value1 === value2);	// false
// == 연산자

// === 연산자
// 값1 === 값2;
// 값1과 값2의 자료형이 같고, 값1과 값2의 값이 같으면 true다.

// == 연산자
// 값1 == 값2의 값이 같으면 true다.
// 만약 자료형이 서로 다르면 같은 자료형으로 변환한 후 비교한다.

//	* 자바스크립트에서 두 값이 동일한 값인지 비교할 때는 === 연산자를
// 사용하자.

console.log(value1 != value2); // false, value1과 value2가 같다.
console.log(value1 !== value2); // true, value1과 value2가 다르다.

// != 연산자.
// 값1 != 값2의 값이 서로 다르면 true다. ( 값만 비교한다. )
// 만약 자료형이 서로 다르면 같은 자료형으로 변환한 후 비교한다.
// 23 != '23'에서 서로 타입은 다르지만 같은 자료형으로 변환하면
// 23 != 23이 된다. 따라서 같은 값이기 때문에 false가 최종결과다.

// !== 연산자
// 값1 == 값2
// 값1과 값2의 값과 자료형까지 고려하여 비교한다.

// 문자열의 비교
// 자바스크립트에서 문자열 비교는 == 혹은 === 연산자를 이용한다.
console.log("안녕" === "안녕");
console.log("안녕" === "하이");

// 논리연산자
// && || ! 

let distance = 10000;
let year = 2;

// 운행거리가 15000이상이고, 사용기간이 3년 이상이면 유상수리로 판정한다.
let isPay = distance >= 15000 || year >= 3;
console.log("유상수리 여부", isPay);

// 자바스크립트가 논리적으로 false로 여기는 것
// false, undefined, NaN, null, 0, ''

// 자바스크립트가 논리적으로 true로 여기는 것
// 위에 나열한 것 빼고 전부 다.

// 23 && 12 ---> 12
</script>

자바스크립트에서는 문자열을 '', "", `` 3가지 방식으로 나타낼 수 있다.