/*
    서브 쿼리(Sub Query)
    - 하나의 SQL 구문 내에 내포된 SQL 구문을 말한다.
    - 형식
        SELECT 컬럼, 컬럼, 컬럼
        FROM 테이블명
        WHERE 컬럼 연산자 (SELECT 컬럼
                           FROM 테이블명
                           WHERE 조건식)
    - 목적
        + 메인쿼리의 조건식에서 비교값으로 사용할 값이 SELECT 문의 실행결과로 획득되는 값일 때
          서브쿼리를 사용한다.
        + 서브쿼리는 메인쿼리의 조건식에서 사용할 값을 제공하는 SQL구문이다.
        + 예시)
            SELECT *
            FROM EMPLOYEES
            WHERE SALARY > [전체직원의 평균급여]
    - 특징
        + 서브쿼리는 한번만 실행된다.
        + 메인쿼리보다 먼저 실행된다
        + 서브쿼리의 실행결과는 메인쿼리의 조건식에서 사용된다.
  
    - 작성방법
        + 서브쿼리는 괄호안에 작성한다.
        + 서브쿼리로 획득되는 결과가 단일행인지 다중행인지 파악한 다음, 적절한 연산자를 사용한다.
        
- 서브쿼리의 종류
    + 단일행 서브쿼리
        - 서브쿼리의 실행결과값이 1개의 행만 획득되는 서브쿼리다.
        - 연산자 : =, != , > , <, >=, <= 
    + 다중행 서브쿼리
        - 서브쿼리의 실행결과값이 2개이상의 행이 획득되는 서브쿼리다.
        - 연산자 : IN, NOT In, >ANY, >ALL, <ANY, <ALL
        - 다중행 서브쿼리가 사용된 곳에 =, !=, >, <, >=, <= 연산자를 사용하면 오류가 발생한다.
        
        단일행의 =와 다중행의 IN은 같으니깐, equal 비교는 그냥 IN으로 쓰자.
    + 다중컬럼 서브쿼리
        - 서브쿼리의 실행결과값이 2개 이상의 컬럼으로 구성되어 획득되는 서브쿼리다.
        - 연산자
            IN, NOT IN
        - 형식
            SELECT 컬럼, 컬럼, 컬럼, 컬럼, ...
            FROM 테이블명
            WHERE (컬럼1, 컬럼2) IN (SELECT 컬럼3, 컬럼4
                                     FROM 테이블명
                                     WHERE 조건식)
            * 컬럼1과 컬럼3, 컬럼2와 컬럼4가 모두 일치하는 경우만 TRUE로 판정한다.
*/

-- 전체직원의 평균급여보다 급여를 많이 받는 직원의 아이디, 이름, 급여를 조회하기
-- 1. 전체 사원의 평균급여를 구한다.
SELECT AVG(SALARY)
FROM EMPLOYEES;

-- 2. 1번에서 계산한 평균급여를 사용해서 평균급여보다 급여를 많이 받는 직원을 조회한다.
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY > 6488.747;

-- 서브쿼리를 사용해서 조회하기 [ 단일행 서브쿼리 ]
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY)
                FROM EMPLOYEES);
                
-- 100번 직원과 같은 부서에서 근무하는 직원의 아이디, 이름, 직종아이디를 조회하기 [ 단일행 서브쿼리 ]
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
                       FROM EMPLOYEES
                       WHERE EMPLOYEE_ID = 100);
                       
-- 90번 부서에서 근무하는 직원들과 같은 해에 입사한 직원의 아이디, 이름, 입사일을 조회하기
-- 1. 90번 부서에서 근무하는 직원들이 입사한 해 [ 결과행이 3개니깐 다중행이다. ]
SELECT TO_CHAR(HIRE_DATE, 'YYYY')
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

-- 2. 1번에서 획득한 결과값을 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE TO_CHAR(HIRE_DATE, 'YYYY') IN ('2001', '2003', '2005');

-- 다중행 서브쿼리를 이용해서 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE TO_CHAR(HIRE_DATE, 'YYYY') IN (SELECT TO_CHAR(HIRE_DATE, 'YYYY')
                                     FROM EMPLOYEES
                                     WHERE DEPARTMENT_ID = 90);
                                     
-- >ANY와 >ALL 연산자
-- 60번 부서에서 근무하는 직원보다 급여를 많이 받는 직원의 아이디, 이름, 급여를 조회하기
-- 60번 부서에서 근무하는 직원의 급여 : 4620, 5280, 6600, 9900

--> ALL 연산자: 서브쿼리의 결과값 모두보다 큰 값인 경우만 TRUE로 판단한다.
--              서브쿼리 결과값의 최대값보다 크다면 TRUE로 판정한다.
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >ALL (SELECT SALARY
                   FROM EMPLOYEES
                   WHERE DEPARTMENT_ID = 60);
                   
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >    (SELECT MAX(SALARY)
                   FROM EMPLOYEES
                   WHERE DEPARTMENT_ID = 60);
                   
--> ANY 연산자: 서브쿼리 결과값 아무것이라도 하나보다 큰 값인 경우만 TRUE로 판정한다.
--              서브쿼리 결과값이 최소값보다 크다면 TRUE로 판정한다.
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >ANY (SELECT SALARY
                    FROM EMPLOYEES
                    WHERE DEPARTMENT_ID = 60);
                    
                    SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >     (SELECT MIN(SALARY)
                    FROM EMPLOYEES
                    WHERE DEPARTMENT_ID = 60);

-- 다중컬럼 서브쿼리 연산자.
-- 부서별 최고급여를 계산했을 때 해당 부서의 최고급여와 같은 급여를 받는
-- 직원의 아이디, 이름, 급여, 부서아이디를 조회하기
SELECT EMPLOYEE_ID
    , FIRST_NAME
    , SALARY
    , DEPARTMENT_ID
FROM EMPLOYEES
WHERE (DEPARTMENT_ID, SALARY) IN (SELECT DEPARTMENT_ID, MAX(SALARY)
                                  FROM EMPLOYEES
                                  WHERE DEPARTMENT_ID IS NOT NULL
                                  GROUP BY DEPARTMENT_ID);
                                  
/*
    WHERE 절의 연산자
    
    + 항의 갯수에 따른 구분
        단항 연산자
            IS NULL, IS NOT NULL. EXISTS
            예시
                SELECT *
                FROM EMPLOYEES
                WHERE COMMISION_PCT IS NOT NULL;
                      ------------- -----------
                        연산대상      연산자
                + COMMISSION_PCT가 NULL이면 TRUE로 판정한다.
                        
                SELECT *
                FROM EMPLOYEES
                WHERE EXISTS (서브쿼리)
                      ------ ----------
                      연산자  연산대상
                + 서브쿼리 실행결과가 한 개라도 존재하면 TRUE로 판정한다.
                
        이항 연산자
            =, !=, >, >=, <, <=,
            IN, NOT IN, >ANY, >ALL, <ANY, <ALL
            
    EXISTS 연산자
        - 단항 연산자
        - 서브쿼리의 실행결과가 1개라도 존재하면 TRUE로 판정한다.
        - 형식
           + 서브쿼리의 실행결과가 하나라도 존재하면 메인쿼리를 실행한다.
            SELECT 컬럼, 컬럼, 컬럼
            FROM 테이블명
            WHERE EXISTS (SELECT 1
                          FROM 테이블명
                          WHERE 조건식)
            * EXISTS 연산자와 함께 사용되는 서브쿼리는 결과값이 중요한 것이 아니라,
              결과값이 1건이라도 존재하는지가 중요하다. 따라서, 서브쿼리의 조회결과값 자체는 의미가 없다.
              
           + 단순히 데이터의 존재 여부를 확인한다.
           SELECT 1
           FROM DUAL
           WHERE EXISTS (SELECT 'X'
                         FROM  테이블명
                         WHERE 조건식)
*/
-- 2010년에 입사한 사원이 있는지 확인하기
SELECT 1
FROM DUAL
WHERE EXISTS (SELECT 'X'
             FROM EMPLOYEES
             WHERE TO_CHAR(HIRE_DATE, 'YYYY') IN '2005');
-- EXISTS 연산자는 서브쿼리에서 2005년에 해당하는 직원정보를 처음으로 발견하는 순간
-- 테이블의 데이터 조사를 중단하고, 즉시 조건식의 계산결과를 TRUE로 판정내린다.
-- 즉, 테이블의 처음부터 첫번째 2005년 입사자 행이 나올 때까지만 조사한다.

/*
SELECT 'X'나 SELECT 1은 조건절을 만족하는 table의 행의 갯수만큼 해당 문자열을 출력하겠다는 의미이다.

SELECT 'X'
FROM TABLE
이 SQL구문은 TABLE의 행개수만큼 'X'가 나온다.

SELECT 1
FROM TABLE
이 SQL구문은 TABLE의 행개수만큼 1이 나온다.
*/
             
-- COUNT(*)로 존재여부를 확인하기
SELECT COUNT(*)
FROM EMPLOYEES
WHERE TO_CHAR(HIRE_DATE, 'YYYY') IN '2005';

-- COUNT(*)은 조회결과가 29가 나왔다.
-- 위의 SQL 구문은 2005년에 입사한 직원이 존재하는지 확인하기 위해서 
-- EMPLOYEE테이블의 처음부터 끝까지 검색해서 입사년도가 2005년인 행을 전부 조회하고
-- 그 행의 갯수를 계산해서 반환하였다.
-- 즉, 테이블의 처음부터 끝까지 모든 데이터를 조사하였음.

/*
상호연관 서브쿼리   
  - 메인쿼리의 값을 서브쿼리에 전달하고,
    서브쿼리의 실행결과를 메인쿼리에서 다시 사용하는 서브쿼리다.
  - 상호연관 서브쿼리는 메인쿼리에서 처리되는 모든 행에 대해서 한번씩 실행된다.
    (일반 서브쿼리에 비해서 상호연관 서브쿼리는 실행성능이 매우 나쁜 쿼리다. )
  - 형식
    SELECT outer.컬럼, outer.컬럼, outer.컬럼
    FROM 테이블명 outer
    WHERE 컬럼 연산자 (SELECT 컬럼
                       FROM 테이블명 inner
                       WHERE inner.컬럼명 연산자 outer.컬럼명)
                    
일반 서브쿼리
SELECT 컬럼, 컬럼, 컬럼
FROM 테이블
WHERE 컬럼 연산자 (SELECT inner.컬럼
                   FROM 테이블 inner
                   WHERE inner.컬럼 연산자 값)
                   
특징
- 메인쿼리와 상호작용하지 않는다.
- 메인쿼리보다 먼저 실행된다.
- 서브쿼리의 실행결과가 메인쿼리의 조건식에서 사용된다.
- 딱 한 번만 실행된다.

상호연관 서브쿼리
SELECT 컬럼, 컬럼, 컬럼
FROM 테이블 outer
WHERE 컬럼 연산자(SELECT 컬럼
                  FROM 테이블 inner
                  WHERE inner.컬럼 = outer.컬럼)
                  
특징 
- 메인쿼리와 상호작용이 있다.
- 서브쿼리를 실행할 때 메인쿼리의 컬럼값을 전달받는다.
  서브쿼리의 실행결과가 다시 메인쿼리에서 사용된다.
- 메인쿼리에서 처리하는 행의 갯수만큼 서브쿼리가 실행된다.

상호연관 서브쿼리 사용

- 직원정보에서 해당 부서의 최고급여와 같은 급여를 받는 직원의 아이디, 이름, 급여, 부서아이디를 조회하기
( 부서별 최고급여를 조사했을 때 해당 부서의 최고급여와 같은 급여를 받는 직원을 조회하기 )
        [서브쿼리]                    [메인쿼리]
- 직원정보에서 해당 부서의 평균급여보다 급여를 적게 받는 직원의 아이디, 이름, 급여, 부서아이디를 조회하기
( 부서별 평균급여를 조사했을 때 해당 부서의 평균급여보다 급여를 적게 받는 직원을 조회하기 )
         
*/

-- 일반 서브쿼리 활용 [ 서브 쿼리가 1번 실행됨. ]
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE (DEPARTMENT_ID, SALARY) IN ( SELECT DEPARTMENT_ID, MAX(SALARY)
                                   FROM EMPLOYEES
                                   WHERE DEPARTMENT_ID IS NOT NULL
                                   GROUP BY DEPARTMENT_ID);
                                   
-- 상호연관 서브쿼리 활용 [ 매번 서브쿼리가 실행됨 ]
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES OUTER
WHERE SALARY IN ( SELECT MAX(SALARY)
                  FROM EMPLOYEES INNER
                  WHERE INNER.DEPARTMENT_ID = OUTER.DEPARTMENT_ID );
                  
-- 부서아이디, 부서이름, 해당부서의 직원수를 조회하기
-- 상호연관 서브쿼리 [ 스칼라 서브쿼리, 1행 1열로 값 1개를 반환 ]
SELECT DEPARTMENT_ID
    , DEPARTMENT_NAME
    , (SELECT COUNT(*)
       FROM EMPLOYEES inner
       WHERE inner.DEPARTMENT_ID = outer.DEPARTMENT_ID) CNT
FROM DEPARTMENTS outer
WHERE MANAGER_ID IS NOT NULL;

/*
    서브쿼리의 종류
    + 서브쿼리의 위치에 따른 구분
    
    스칼라 서브쿼리
    - SELECT 절에서 사용되는 서브쿼리다.
    - 1행 1열의 결과값을 반환하는 서브쿼리다.
    - 스칼라 서브쿼리는 INSERT 구문이나 UPDATE 구문에서 값이 들어갈 자리에도 작성할 수 있다.
    - 예시
        * 부서아이디, 부서명, 해당부서의 직원수를 조회하기
          SELECT DEPARTMENT_ID
                , DEPARTMENT_NAME
                , (SELECT COUNT(*)
                   FROM EMPLOYEES E
                   WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID) CNT
                FROM DEPARTMENTS D;
                
        * 신규 직원을 등록할 때 해당 직원의 급여를 기존 직원들의 최소급여로 저장하기
          INSERT INTO EMPLOYEES
          (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, HIRE_DATE, JOB_ID, SALARY)
          VALUES
          (EMP_SEQ.NEXTVAL, '홍', '길동', SYSDATE, 'AC_CLERK', (SELECT MIN(SALARY)
                                                               FROM EMPLOYEES) );
                                                               
        * 직원들의 급여를 평균급여의 10%만큼 인상시키기
        UPDATE EMPLOYEES
        SET
            SALARY = SALARY + (SELECT AVG(SALARY)*0.1
                               FROM EMPLOYEES)
        
        서브쿼리
            - 메인쿼리의 WHERE 절에 사용되는 서브쿼리
            - 단일행 서브쿼리, 다중행 서브쿼리, 다중 컬럼 서브쿼리, 상호연관 서브쿼리 형태가 가능하다.
            - 예시
                * 단일행 서브쿼리
                    + 서브쿼리의 실행결과로 1건의 데이터가 획득되는 서브쿼리다.
                    + 단일행 서브쿼리 연산자를 사용한다. ( =, !=, >, <, >=, <= )
                    * 전체 직원의 평균 급여보다 급여를 적게 받는 직원정보를 조회하기
                        SELECT *
                        FROM EMPLOYEES
                        WHERE SALARY < (SELECT AVG(SALARY)
                                        FROM EMPLOYEES);
                                    
                * 다중행 서브쿼리
                    + 서브쿼리의 실행결과로 2건 이상의 데이터가 획득되는 서브쿼리다.
                    + 다중행 서브쿼리 연산자를 사용한다. ( IN, NOT IN, >ANY, >ALL, <ANY, <ALL)
                    + 소재지 아이디가 1700번인 부서에서 근무하는 직원정보를 조회하기
                        SELECT *
                        FROM EMPLOYEES
                        WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
                                                FROM DEPARTMENTS
                                                WHERE LOCATION_ID = 1700)
                        * 소재지 아이디가 1700인 부서의 아이디는 여러 개다.
                        
                * 다중컬럼 서브쿼리
                    + 서브쿼리의 실행결과로 2개 이상의 컬럼으로 구성된 데이터가 획득되는 서브쿼리다.
                    + 다중 컬럼 서브쿼리 연산자를 사용한다. (IN, NOT IN)
                    * 각 부서별 최고 급여를 조회했을 때 해당 급여를 받는 직원정보를 조회하기
                        SELECT *
                        FROM EMPLOYEES
                        WHERE (DEPARTMENT_ID, SALARY) IN (SELECT DEPARTMENT_ID, MAX(SALARY)
                                                          FROM EMPLOYEES
                                                          GROUP BY DEPARTMENT_ID);
                        * 다중컬럼 서브쿼리를 사용할 때는 비교하는 컬럼의 순서가 맞아야 하고,
                          조건식에서 비교대상이 되는 컬럼들을 ()로 묶어준다.
                          
                * 상호연관 서브쿼리
                    + 메인쿼리의 컬럼값이 서브쿼리의 실행에 사용되는 서브쿼리다.
                    + 메인쿼리에서 처리하는 행의 갯수만큼 서브쿼리문이 매번 실행된다.
                    + 자신의 상사보다 일찍 입사한 직원정보를 조회하기
                        SELECT *
                        FROM EMPLOYEES outer
                        WHERE HIRE_DATE < (SELECT HIRE_DATE
                                           FROM EMPLOYEES inner
                                           WHERE inner.EMPLOYEE_ID = outer.MANAGER_ID);
                        * 직원들마다 자신의 상사가 다르기 때문에 입사날짜를 매번 조회해야 한다.
                        
            인라인 뷰(Inline View) [ SQL 구문안에서 생성한 가상의 테이블 ]
                - 메인쿼리의 FROM 절에서 사용되는 서브쿼리다.
                - 서브쿼리의 조회결과를 가상의 테이블로 취급하고, 가상의 테이블을 대상으로 조회작업을 수행한다.
                - 형식
                    SELECT 컬럼1, 컬럼2, 컬럼3
                    FROM (SELECT 컬럼1, 컬럼2, 컬럼3
                          FROM 테이블
                          WHERE 조건식)
                    * 메인쿼리에서는 서브쿼리의 SELECT절에서 지정한 컬럼만 조회할 수 있다.
                    * 인라인 뷰가 제공하는 가상의 테이블과 일반 테이블을 조인할 수 있고,
                      인라인 뷰가 제공하는 가상의 테이블끼리 조인할 수 있다.
                
*/

-- 부서별 직원수를 조회하기
SELECT B.DEPARTMENT_ID
    , B.DEPARTMENT_NAME
    , A.CNT
FROM (SELECT DEPARTMENT_ID DEPT_ID
        , COUNT(*) CNT
      FROM EMPLOYEES
      WHERE DEPARTMENT_ID IS NOT NULL
      GROUP BY DEPARTMENT_ID) A, DEPARTMENTS B
WHERE A.DEPT_ID = B.DEPARTMENT_ID;

/*
WITH 절
- SELECT문의 실행결과를 메모리에 가상의 테이블로 생성한다.
- 형식
    WITH 가상테이블명 AS (
        SELECT 컬럼, 컬럼
        FROM 테이블명
        WHERE 조건식
    )
    SELECT *
    FROM 가상테이블명;
    
    WITH 가상테이블명1 AS (
        SELECT 구문
        FROM ...
    ), 가상테이블명2 AS (
        SELECT 구문
        FROM ...
    )
    SELECT *
    FROM 가상테이블명1 A, 가상테이블명2 B
    WHERE A.컬럼 = B.컬럼;
*/
WITH DEPT_EMP AS (
    SELECT DEPARTMENT_ID DEPT_ID
        , COUNT(*) CNT
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID IS NOT NULL
    GROUP BY DEPARTMENT_ID
)
SELECT B.DEPARTMENT_ID
    , B.DEPARTMENT_NAME
    , A.CNT
FROM DEPT_EMP A, DEPARTMENTS B
WHERE A.DEPT_ID = B.DEPARTMENT_ID;

-------------------------------------과제------------------------------------

-- 전체 직원의 평균급여보다 급여를 많이 받는 직원의 아이디, 이름, 급여를 조회하기

-- 전체 직원중에서 가장 적은 급여를 받는 직원의 아이디, 이름, 급여를 조회하기

-- 이름이 'Neena'인 직원과 같은 해에 입사한 직원의 아이디, 이름, 입사일을 조회하기

-- 80번 부서에 근무하고, 80번 부서의 최저 급여를 받는 직원의 아이디, 이름, 급여를 조회하기

-- 커미션을 받는 직원중에서 최고 급여를 받는 직원의 아이디, 이름, 급여를 조회하기

-- 부서명이 'Executive'인 부서에 소속된 직원의 아이디, 이름, 직종을 조회하기

-- 이름이 'Ismael'인 직원과 같은 해에 입사했고, 같은 부서에 근무하는 직원의 아이디, 이름, 입사일, 부서아이디를 조회하기

-- 부하직원이 있는 직원의 아이디, 이름, 직종아이디를 조회하기

-- 직원들 중에서 자신의 상사보다 먼저 입사한 직원의 아이디, 이름, 입사일을 조회하기

-- 각 직종별 직원수를 조회하고, 직종아이디, 직원수로 출력한다.

-- 부하직원이 있는 직원의 아이디, 이름, 직종아이디, 자신의 부하직원수를 조회하기

-- 입사년도별 직원수를 조회하고, 직원수가 3명 이하로 입사한 년도와 직원수를 조회하기

-- 직종이 변경된 적인 있는 직원의 아이디, 이름, 현재 직종, 현재 소속부서명을 조회하기

-- 부서 소재지 도시(city)가 'Seattle'인 부서의 부서아이디, 부서명, 부서관리자 이름을 조회하기

-- 전체 평균급여보다 급여를 적게 받는 직원의 아이디, 이름, 급여, 소속부서명을 조회하기

-- 커미션을 받는 직원들 중에서 전체 직원의 평균급여보다 급여를 많이 받는 직원의 아이디, 이름, 급여, 커미션, 급여등급을 조회하기

-- 가장 많은 급여를 받는 직원과 같은 해에 입사한 직원의 아이디, 이름, 입사일을 조회하기

-- 직원들 중에서 자신의 상사보다 늦게 입사한 직원의 아이디, 이름, 입사일, 상사의 이름, 상사의 입사일을 조회하기

