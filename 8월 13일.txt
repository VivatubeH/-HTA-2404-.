폼 입력요소에 사용자가 입력한 값 표현하기

구분
------------------------------------------------------------------------------------------------
입력필드		
------------------------------------------------------------------------------------------------
일반 	 입력필드 	<input type="text" 	value="값" />	텍스트 입력이 제한없이 가능하다.
비밀번호 입력필드	<input type="password"	value="값" />	한글 입력이 허용되지 않는다.
날짜 	 입력필드	<input type="date"	value="값" />	"yyyy-MM-dd" 형식의 문자열로 설정한다.
숫자 	 입력필드	<input type="number"	value="값" />	숫자와 +, -만 값으로 허용된다.
------------------------------------------------------------------------------------------------
★ 첨부파일 입력필드	<input type="file"> -> 첨부파일은 절대로 값을 지정할 수 없음
: 사용자가 스스로 선택한 파일만 업로드되어야 함.
  절대로 코드로 값을 설정할 수 없음. 보안때문에 절대로 임의로 값을 지정할 수 없다.
------------------------------------------------------------------------------------------------
멀티라인 입력필드
------------------------------------------------------------------------------------------------
	<textarea>값</textarea>			textarea 태그는 컨텐츠를 가지는 태그다.
						여는태그와 닫는태그 사이에 값을 위치시킨다.
------------------------------------------------------------------------------------------------
체크박스와 라디오: 체크박스와 라디오는 값은 미리 설정되어 있다.
		   체크박스와 라디오는 사용자가 원래 어떤 항목을 체크했는지를 표시해야 한다.
------------------------------------------------------------------------------------------------
체크박스	<input type="checkbox" value="값" checked/> 
		<input type="checkbox" value="값" checked="checked"/>	
	체크여부를 나타내는 checked를 태그에 추가한다.
 
라디오		<input type="radio" value="값" checked/> 
		<input type="radio" value="값" checked="checked"/> 
	체크여부를 나타내는 checked를 태그에 추가한다.  
------------------------------------------------------------------------------------------------
셀렉터박스 : option 태그를 이용해서 선택가능한 값들이 이미 나열되어 있다.
	     option 태그 중에서 사용자가 어떤 항목을 선택했는지를 표시해야 한다.
--------------------------------------------------------------------------------------------------
셀렉터 		<select>
			<option value="값"> 라벨</option>
			<option value="값" selected> 라벨</option>
			<option value="값"> 라벨</option>
		</select>
------------------------------------------------------------------------------------------------
신규 등록폼 -> 데이터베이스 등록전이기 때문에 상품번호가 없다.
카테고리
이름
가격
할인가격

수정폼 -> 데이터베이스에 등록했던 정보라서 상품번호가 있다.
	  상품번호를 서버로 제출해서 기존 정보를 수정해야 한다.
카테고리
이름
가격
할인가격
-----------------------------------------------------------------------------------------------
<form method="post" action="update.jsp?no=5201">
  <select name="catNo">
    <option value="1000" selected> 컴퓨터</option>
    <option value="1001"> 가구</option>
  </select>
  <input type="text" name="name" value="맥미니">
  ...
  <button type="submit">수정</button>
</form>


요청메시지
POST update.jsp?no=5201 HTTP/1.1
Host: localhost
Accept: ...
Accept-Ending: ...

catNo=1000&name=맥미니&price=700000
&discountPrice=...

HttpServletRequest
요청파라미터 정보
name		value
----------------------
"no"		"5201"
"catNo"		"1000"
"name"		"맥미니"
"price"		"700000"
------------------------

update_jsp 객체
void _jspService(HttpServletRequest request, HttpServletResponse) {
	
	JSP에서 작성하는 코드
	request.getParameter("no")
}

-----------------------------------------------------------------------------------------------
수정폼에서 입력한 정보
요청파라미터 정보
no = 5021
name = 맥미니
price = 700000
discountPrice = 670000
stock = 4
...

1. 요청파라미터 값을 조회한다.
int no = Utils.toInt(request.getParameter("no"));
String name = request.getParameter("name"));
int price = Utils.toInt(request.getParameter("price"));
int discountPrice = Utils.toInt(request.getParameter("dicountPrice"));
int stock = Utils.toInt(request.getParameter("stock"));
2. 상품번호로 데이터베이스의 기존 상품정보를 조회한다.
Product product = productDao.getProductByNo(no); // 수정전 정보 조회
3. 조회된 상품정보에 요청파라미터값을 대입한다.
product.setName(name);
product.setPrice(price);
product.setDiscountPrice(price);
product.setStock(stock);  // 수정전 정보를 요청파라미터값으로 업데이트

[ 참고로 product_no처럼 식별자, 기본값은 수정의 대상이 아님 ]
[ 오류 안 나게 항상 변수명, 데이터명 같은 거 복붙하기 ]

[ 수정폼에서 여러 개를 수정해야 할 때는 삭제하고 다시 생성하는 방법도 고려해보기 ] 
[ 예를 들면 추가혜택은 같은 product_no를 가진 상품이 혜택을 3~4개씩 가진다. 이걸 선택적으로 수정하기보다는
  해당되는 product_no를 다 지우고 새로 생성하는 게 더 나을 수 있다. 물론 꼭 기억해야할 정보면 얘기가 다르지만 ... ]
--------------------------------------------------------------------------------------------------------------------
상품 목록 조회하기
home.jsp
home.jsp?page=xx
home.jsp?error

home.jsp
+ 요청 파라미터 정보에서 "page"값을 조회한다. page값이 없으면 요청한 페이지를 1로한다.
+ 전체 게시글 갯수를 조회한다,
+ 페이지번호와 전체 게시글 갯수로 Pagination 객체를 생성한다.
Pagination 객체는 totalPages, totalPageBlocks, CurrentPageBlock, Begin, end, beginPage, endPage .. 등의 값을 제공한다.
+ Pagination 객체에서 begin, end 값을 조회하고 이 값을 이용해서 요청한 페이지에 맞는 게시글 목록을 조회하고 화면에 출력한다.
+ Pagination 객체에서 beginPage, endPage 값을 조회하고 이 값을 이용해서 페이지 내비게이션을 화면에 출력한다.

---------------------------------------------------------------------------------------------------------------------------------
상품 상세정보 조회하기
detail.jsp?no=5201 

detail.jsp
+ 쿼리스트링으로 전달된 상품번호를 요청파라미터에서 요청하고
+ 요청파라미터에서 얻어온 상품번호로 상품 상세정보를 조회한다.
* 상품 상세정보 = 상품정보 <- (카테고리정보, 제조회사정보, 상태정보 )
* 조회된 상품 상세정보를 화면에 표시한다.
+ 상품번호로 해당 상품의 추가혜택정보를 조회한다.
* 조회된 상품 추가혜택정보를 화면에 표시한다.
----------------------------------------------------------------------------------------------------------------------------------
신규 상품정보 입력폼
form.jsp

form.jsp
+ 입력폼을 구성한다.
* form 태그의 method 속성은 post로 지정한다.
* form태그의 action속성은 insert.jsp로 지정한다.
* form태그 내부의 모든 입력요소에 적절한 name 속성을 부여한다.
+ 입력요소 생성에 필요한 정보를 조회한다.
* 모든 카테고리정보를 조회해서 카테고리 select 박스의 option 태그를 생성한다.
* 모든 제조회사정보를 조회해서 제조회사 select 박스의 option 태그를 생성한다.
* 모든 상세정보를 조회해서 상세 radio 버튼을 생성한다.
* 모든 혜택정보를 조회해서 혜택 체크박스를 생성한다.
-----------------------------------------------------------------------------------------------------------------------------------
신규 상품정보 등록하기
insert.jsp

insert.jsp
-------------------------------
POST insert.jsp HTTP/1.1	|
Host: ...			|
Accept : ...			|
----------------------------------------------------
						    |
catNo=1000&name맥미니&price=700000		    |
&discountPrice=680000&stock=7&description=초경량PC  |
&companyNo=100&statusNo=101			    |
&benefitNo=10&benefitNo=12                          |
-----------------------------------------------------

insert.jsp
+ 요청파라미터 정보를 조회한다.
+ Product 객체를 생성해서 새 상품정보를 담는다.
 * 카테고리번호, 제조회사번호, 상태번호는 각각
   Category, Company, Status 객체를 생성해서 번호를 담고,
   객체를 Product에 저장한다.
+ 새 상품 일련번호를 조회한다.
 * 위에서 생성한 Product 객체에 새 상품 일련번호를 저장한다.
+ 새 상품정보가 저장된 Product 객체를 전달해서 데이터베이스에 저장시킨다.

+ 요청파라미터에서 체크된 추가혜택정보를 전부 조회한다.
 * ProductBenefit 객체를 생성해서 새 상품 일련번호와 혜택 번호를 담는다.
 * 추가혜택정보가 저장된 ProductBenefit 객체를 전달해서 데이터베이스에 저장시킨다.

+ list.jsp를 재요청하는 URL을 응답으로 보낸다.
------------------------------------------------------------------------------------------------------------------------------------
상품정보 수정폼

modify-form.jsp?no=5201

modify-form.jsp
+ 요청파라미터에서 상품번호를 조회한다.
+ 상품번호로 수정할 상품정보를 조회한다.
+ 상품번호로 상품의 추가혜택정보를 조회한다(store_product_benefits 테이블)

+ 입력폼을 구성한다.
 * form 태그의 method 속성은 post다.
 * form 태그의 action 속성은 update.jsp?no=5201이다.
+ 입력요소 생성에 필요한 정보를 조회한다.
 * 모든 카테고리정보를 조회해서 카테고리 select박스의 option 태그를 생성한다.
 * 모든 제조회사정보를 조회해서 제조회사 select박스의 option 태그를 생성한다.
 * 모든 상태정보를 조회해서 상태 radio 버튼을 생성한다.
 * 모든 혜택정보를 조회해서 혜택 체크박스를 생성한다.
 * 입력요소에 수정한 상품정보를 설정한다. (value, selected, checked 등의 속성을 속성을 이용해서 입력필드에 값을 지정)
-------------------------------------------------------------------------------------------------------------------------------------
상품정보 수정하기
update.jsp?no=5201

POST update.jsp?no=5201 HTTP/1.1
Host: ...
Accept: ...

catNo=1000&name=맥미니
&price=7000000&discountPrice=680000
&stock=7&description=초경량PC
&companyNo=100&statuNo=101
&benefitNo=10&benefitNo=12

update.jsp
+ 모든 요청파라미터 정보를 조회한다.
+ 상품번호로 수정 전 상품정보를 데이터베이스에서 조회한다.
+ 조회된 상품정보(Product객체)에 요청파라미터로 조회된 정보를 저장한다.
 * 위의 과정을 거치면 Product 객체에는 수정폼에 입력한 모든 정보가 반영되게 된다.
+ ProductDao 객체로 수정된 정보가 반영된 객체를 전달해서 테이블에 반영시킨다.

+ 상품번호로 기존 상품의 추가헤택정보를 전부 삭제한다.
+ insert.jsp에서처럼 추가혜택정보를 새로 저장한다.

+ 상세화면을 재요청하는 url(detail.jsp?no=5201)을 응답으로 보낸다. 
--------------------------------------------------------------------------------------------------------

HTML 엔티티 문자
- HTML에서 특수문자를 표시하게 위해서 미리 설정해 놓은 값
- XML이나 HTML의 문서 형식을 정의하는 DTD 파일에는 XML이나 HTML에서 특수한 목적으로 사용되는 특수문자를
  표현하기 위한 엔티티를 정의하고 있다.
- 예시)
	<!ENTITY 이름 "값">
	<!ENTITY lt    "<">
	<!ENTITY gt    ">">
	<!ENTITY amp   "&">
        <!ENTITY nbsp  " ">
    
   엔티티 사용하기
   형식	
	&이름;
   예
	<h1>&lt;html&gt; 배우기</h1>
이름 				값
---------------------------------------------------------------
&nbsp;			       공백
&lt;				<
&gt;				>
&amp;				&
&quot;				"
&apos;				'
&copy;				© 				
@reg;				

<!ENTITY % nbsp " ">
<!ENTITY % lt   "<">

HTML 문자 escape 시키기.
- HTML 문서에서 < > & " ' 등을 대응되는 HTML 엔티티 문자로 변환하는 것이다.
- 이유
	+ 사용자가 작성한 컨텐츠가 html 태그 자체를 작성했을 대
          (사용자 html 교육을 위해서 html 예제 텍스트 작성한 경우)
	+ 사용자가 게시판 등의 내용 입력창에 악의적인 목적의 스크립트 프로그램을 작성해서 업로드 하고
	  (사용자가 악의적인 목적으로 작성한 태그를 전부 무력화)
		XSS(Cross Site Scripting) 공격에 대한 방어
<td><%=StringEscapeUtils.escapeHtml4(product.getName()) %></td>

<td><mac>m1에어</td> 	---> 	<td>&lt;mac&gt; m1 에어 </td>






