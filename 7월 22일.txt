오전 - 과제 풀이.

데이터 정의어(DDL)
- 오라클 데이터베이스 객체 생성, 변경, 삭제에 사용되는 명령어
CREATE, ALTER, DROP, TRUNCATE

테이블 - 데이터를 저장하는 저장소
[ 테이블과 컬럼은 문자로 시작 30자까지 가능 ]
[ A-Z, a-z, 0-9, _$#만 허용 ]

테이블 생성하기
CREATE TABLE 테이블명 (
 컬럼명 데이터타입(크기) [DEFAULT 기본값],
 ...
)

테이블 삭제하기 [ 자신을 참조하는 테이블이 있으면 삭제 안됨 ]
[ 자식부터 부모 순으로 삭제해야 함]
DROP TABLE 테이블명

테이블 수정하기 [ 그냥 편집에서 편집하기 ]

- 컬럼추가
ALTER TABLE 테이블명 ADD (컬럼명 데이터타입(크기) [DEFAULT 기본값]);

- 컬럼수정
ALTER TABLE 테이블명 MODIFY (컬럼명 데이터타입(크기) [DEFAULT 기본값]);

- 컬럼삭제
ALTER TABLE 테이블명 DROP COLUMN 컬럼명;

- 테이블 이름 변경
RENAME 테이블명 TO 새테이블명

- 테이블 절단하기
TRUNCATE TABLE 테이블명;

대용량 데이터를 추가할 때는 excel을 사용하기

시퀀스 
- 일련번호를 자동으로 생성하는 데이터베이스 객체다.
- 기본키 값(행을 대표하는 값)을 생성하는 데 주로 사용된다.

뷰 
- 테이블 또는 다른 뷰를 기반으로 하는 가상의 테이블(논리적인 테이블)
- 물리적인 저장공간을 가지지 않는다.
- INSERT, UPDATE, DELETE 작업의 수행이 불편함.
- 데이터의 엑세스를 제한하기 위해서 사용 ( 데이터에 대한 보안성을 강화 )

복합뷰
- 여러 테이블의 데이터를 가져온다.
- 함수 또는 데이터 그룹을 포함하고 있다.
- DML이 거의 불가능하다.

/*
    사용자 테이블 정의하기
    SAMPLE_USERS
    
        번호          정수5자리,
        아이디        문자 100자리,
        비밀번호      문자 100자리,
        이름          문자 100자리,
        이메일        문자 256자리,
        전화번호      문자 50자리,
        상태          문자 20자리,
        등록일        날짜,
        최종수정일    날짜
*/

CREATE TABLE SAMPLE_USERS (
    USER_NO             NUMBER(5),
    USER_ID             VARCHAR2(100) NOT NULL,
    USER_PASSWORD       VARCHAR2(100),
    USER_NAME           VARCHAR2(100) NOT NULL,
    USER_EMAIL          VARCHAR2(256) NOT NULL,
    USER_TEL            VARCHAR2(50),
    USER_STATUS         VARCHAR2(20) DEFAULT '사용중',
    USER_CREATED_DATE   DATE DEFAULT SYSDATE,
    USER_UPDATED_DATE   DATE,
    
    CONSTRAINT SAMPLE_USER_PK PRIMARY KEY(USER_NO),
    CONSTRAINT SAMPLE_USERID_UK UNIQUE(USER_ID),
    CONSTRAINT SAMPLE_USERMAIL_UK UNIQUE(USER_EMAIL),
    CONSTRAINT SAMPLE_USERTEL_UK UNIQUE(USER_TEL)
);

-- 테이블에 새로운 컬럼 추가하기
ALTER TABLE SAMPLE_USERS ADD (USER_DELETED_DATE DATE DEFAULT SYSDATE);

-- 테이블에서 기존 컬럼 변경하기(컬럼의 데이터타입, 크기, 기본값을 변경할 수 있다.) [ 더 큰 값을 더 작은 값으로는 못 바꿈 ]
-- 예를 들어, 기존에 들어있던 데이터의 크기를 고려해서 크기가 70인 데이터가 있는데 컬럼의 크기를 50으로 바꾸려 하면 안됨.
-- 컬럼에 이미 저장된 값이 있는 경우, 기존 값보다 더 작은 사이즈로 조정할 수 없다.
ALTER TABLE SAMPLE_USERS MODIFY (USER_TEL VARCHAR2(20));

-- 테이블에서 기존 컬럼 삭제하기
ALTER TABLE SAMPLE_USERS DROP COLUMN USER_DELETED_DATE;

-- 테이블의 이름 변경하기
RENAME SAMPLE_USERS TO SAMPLE_USERLIST;

-- 테이블 절단하기
-- * 테이블의 모든 데이터를 삭제한다.
-- * 삭제된 데이터를 ROLLBACK 할 수 없다.
-- * 해당 테이블이 사용하는 저장공간이 초기화되었다.
TRUNCATE TABLE SAMPLE_USERLIST;

/*
시퀀스(Sequence)
- 일련번호를 생성하는 오라클 데이터베이스 객체다.
- 시퀀스 생성
    CREATE SEQUENCE 시퀀스명;
    
    CREATE SEQUENCE 시퀀스명
        INCREMENT BY n
        START WITH n 
        MAXVALUE n 혹은 NOMAXVALUE
        MINVALUE n 혹은 NOMINVALUE
        CYCLE 혹은 NOCYCLE
        CACHE n 혹은 NOCACHE;
        
    INCREMENT BY n
        - 한 번에 증가시킬 값을 n으로 지정한다.
        - 기본값: 1
    START WITH n
        - 일련번호의 시작값을 n으로 지정한다.
        - 기본값: 1
    MAXVALUE n
        - 일련번호 최대값을 n으로 지정한다.
        - 기본값: NOMAXVALUE
    MINVALUE n
        - 일련번호 최소값을 n으로 지정한다.
        - 기본값: NOMINVALUE
    CYCLE
        - 일련번호가 최대값에 도달했을 때 다시 순환할 것인지 지정한다.
        - 기본값: NOCYCLE
    CACHE
        - 시퀀스 생성 속도를 개선하기 위해 캐싱 여부 및 캐싱 개수를 지정한다.
        - 기본값: CACHE 20
        
    - 시퀀스 삭제
        DROP SEQUENCE 시퀀스명;
        
    - 시퀀스수정
        ALTER SEQUENCE 시퀀스명;
            INCREMENT BY n
            MAXVALUE n 혹은 NOMAXVALUE
            MINVALUE n 혹은 NOMINVALUE
            CYCLE 혹은 NOCYCLE
            CACHE n 혹은 NOCACHE;
        * 시작값을 수정할 수 없다.
        * 시퀀스를 수정하는 작업은 거의 없다.
    
     - 시퀀스의 사용
        시퀀스명.NEXTVAL
            + 새로운 일련번호를 반환한다.
        시퀀스명.CURRVAL [ 이번에 가장 마지막으로 발행된 일련번호를 보여줌 ]
            + 가장 마지막 시퀀스 번호를 반환한다.
            + 데이터베이스와 연결된 후 NEXTVAL로 발행한 번호를 다시 반환한다.
            즉, CURRVAL을 실행하기 위해서는 데이터베이스와 연결한 후
            먼저 NEXTVAL을 실행해야 한다.
        [ 둘을 연계하기 위해서는 작업이 같은 세션을 이용해서 이루어져야 한다. ]
*/

CREATE SEQUENCE SAMPLE1_SEQ;
-- INCREMENT BY 1
-- START WITH 1
-- NOMINVALUE
-- NOMAXVALUE
-- NOCYCLE
-- CACHE20

CREATE SEQUENCE SAMPLE2_SEQ
    NOCACHE;
-- INCREMENT BY 1
-- START WITH 1
-- NOMINVALUE
-- NOMAXVALUE
-- NOCYCLE
-- NOCACHE

CREATE SEQUENCE SAMPLE3_SEQ
    INCREMENT BY 100
    START WITH 1000
    NOCACHE;
    
/*
시퀀스가 없는 데이터베이스
- 테이블에서 특정 컬럼의 값이 자동으로 증가되게 설정할 수 있다.
- 해당 컬럼에 AUTO_INCREMENT 설정을 추가하면
  테이블에 새로운 행이 추가될 때마다 해당 컬럼의 값을 자동으로 증가된다.
- INSERT INTO 구문에서 자동 증가되는 컬럼은 제외한다.   
    CREATE TABLE SAMPLE (
        NO NUMBER(6) AUTO_INCREMENT,
        NAME VARCHAR(100),
        PRICE NUMBER
    );
    INSERT INTO SAMPLE(NAME, PRICE) VALUES ('색종이', 1500);
*/

-- 새 일련번호 발행하기
SELECT SAMPLE1_SEQ.NEXTVAL
FROM DUAL;

/*
INSERT INTO 구문에서 기본키 컬럼(USER_NO)에
시퀀스로 발행한 일련번호를 저장시킨다.

INSERT INTO SAMPLE_USERLIST
(USER_NO, USER_ID, USER_PASSWORD, USER_NAME, USER_EMAIL)
VALUES
(SAMPLE1_SEQ.NEXTVAL, 'HONG2', 'ZXCV1234', '홍길동', 'HONG2@GMAIL.COM');
*/

-- NEXTVAL이 실행된 이후여야 CURRVAL 실행 가능.
SELECT SAMPLE1_SEQ.CURRVAL
FROM DUAL;

INSERT INTO SAMPLE_USERLIST
(USER_NO, USER_ID, USER_PASSWORD, USER_NAME, USER_EMAIL)
VALUES
(SAMPLE1_SEQ.NEXTVAL, 'KIM'||SAMPLE1_SEQ.CURRVAL, 'ZXCV1234',
'김유신' || SAMPLE1_SEQ.CURRVAL, 'KIM' || SAMPLE1_SEQ.CURRVAL || '@gmail.com');

/*
뷰(View)
- 하나 이상의 테이블 혹은 다른 뷰를 이용해서 생성한 가상의 테이블이다.
- 물리적인 저장공간을 가지고 있지 않는다.
- 뷰는 대부분 조회 전용으로 사용한다.
- 목적 
    * 복잡한 SQL 구문을 단순화시킬 수 있다.
    ( 복잡한 SQL 구문으로 조회한 결과를 가상의 테이블로 생성,
      데이터를 조회할 때 가상의 테이블을 대상으로 조회하면 된다. )
    * 데이터에 대한 보안성을 강화할 수 있다.
    ( 기밀정보나 개인정보를 포함하고 있는 테이블에 직접 엑세스할 수 없도록 하고, 공개가 가능한 정보들로만 구성된 가상의 테이블을 생성하고
      그 가상의 테이블을 이용하게 한다. )   
    * 동일한 데이터로부터 다양한 결과를 얻을 수 있다.
    ( 목적에 따라서 다양한 조회결과로 가상테이블을 생성하고 이용할 수 있다. )
    
- 뷰 생성하기
    CREATE OR REPLACE VIEW 뷰이름
    AS 서브쿼리
    WITH READ ONLY;
    * 서브쿼리로 조회한 조회결과를 포함하는 가상의 테이블이 생성된다.
    * WITH READ ONLY 구문을 추가하면 조회작업만 가능한 뷰가 된다.
    ( INSERT/UPDATE/DELETE 불가능 )
    * CREATE VIEW 뷰이름
      AS 서브쿼리
      ...
      + 새로운 뷰객체를 생성한다.
      + 만약 동일한 이름의 뷰 객체가 존재하면 오류가 발생한다.
    * CREATE OR REPLACE VIEW 뷰이름 
      AS 서브쿼리
      ...
      + 새로운 뷰객체를 생성한다.
      + 만약 동일한 이름의 뷰 객체가 존재하면, 수정한다.
*/

-- 뷰 생성하기
-- 직원들의 급여 상세 정보를 반환하는 뷰 정의하기
-- 직원아이디, 직원이름, 직종아이디, 직종제목, 직종최저급여, 직종최고급여
-- 직원급여, 커미션, 연봉, 급여등급, 등급최소급여, 등급최고급여
CREATE OR REPLACE VIEW EMP_SALARY_VIEW
AS SELECT E.EMPLOYEE_ID                                                 AS EMP_ID
        , E.FIRST_NAME                                                  AS EMP_NAME
        , E.JOB_ID                                                      AS JOB_ID    
        , J.JOB_TITLE                                                   AS JOB_TITLE
        , J.MIN_SALARY                                                  AS JOB_MIN_SALARY
        , J.MAX_SALARY                                                  AS JOB_MAX_SALARY
        , E.SALARY                                                      AS SALARY
        , E.COMMISSION_PCT                                              AS COMMISSION_PCT
        , E.SALARY*12 + E.SALARY*NVL(E.COMMISSION_PCT, 0)*12            AS ANNUAL_SALARY
        , G.SAL_GRADE                                                   AS GRADE
        , G.MIN_SALARY                                                  AS GRADE_MIN_SALARY
        , G.MAX_SALARY                                                  AS GRADE_MAX_SALARY
        , E.DEPARTMENT_ID                                               AS DEPT_ID
   FROM EMPLOYEES E, JOBS J, SALARY_GRADES G
   WHERE E.JOB_ID = J.JOB_ID
   AND E.SALARY BETWEEN G.MIN_SALARY AND G.MAX_SALARY
   WITH READ ONLY;
   
-- 60번 부서에 근무중인 직원의 아이디, 급여, 연봉, 급여등급을 조회하기
SELECT EMP_ID
    , EMP_NAME
    , SALARY
    , ANNUAL_SALARY
    , GRADE
FROM EMP_SALARY_VIEW
WHERE DEPT_ID = 60;

-- 부서에 대한 상세한 정보를 제공하는 뷰
-- 부서아이디, 부서이름, 부서관리자 아이디, 부서관리자 이름, 사원수,
-- 소재지 아이디, 소재도시, 나라아이디, 나라이름
CREATE OR REPLACE VIEW DEPT_DETAIL_VIEW
AS SELECT D.DEPARTMENT_ID
    , D.DEPARTMENT_NAME
    , D.MANAGER_ID
    , M.FIRST_NAME
    , A.CNT
    , L.LOCATION_ID
    , L.CITY
    , C.COUNTRY_ID
    , C.COUNTRY_NAME
   FROM (SELECT DEPARTMENT_ID
            , COUNT(*) CNT
         FROM EMPLOYEES
         WHERE DEPARTMENT_ID IS NOT NULL
         GROUP BY DEPARTMENT_ID) A, DEPARTMENTS D, EMPLOYEES M, LOCATIONS L, COUNTRIES C
   WHERE D.DEPARTMENT_ID = A.DEPARTMENT_ID(+)
   AND D.MANAGER_ID = M.EMPLOYEE_ID(+)
   AND D.LOCATION_ID = L.LOCATION_ID
   AND L.COUNTRY_ID = C.COUNTRY_ID
   WITH READ ONLY;