+ 블록 엘리먼트
   - 항상 새로운 라인에서 시작한다.
   - 항상 사용가능한 최대 너비를 차지한다.
   - 블록 엘리먼트의 왼쪽이나 오른쪽에 다른 엘리먼트가 위치할 수 없다.
   - 너비를 지정할 수 있다.
   - 블록 엘리먼트 내의 컨텐츠를 정렬(왼쪽/오른쪽/가운데)할 수 있다.
[ - 블럭요소 : h1~h6, p, ol, ul, li, dl, dt, dd, table, form, article, aside, section, nav, header, footer, ... ]

   * div 엘리먼트 [ 형태는 없는 무형의 엘리먼트임 ]
	- 블록엘리먼트나 인라인 엘리먼트를 담는 컨테이너 엘리먼트다.
	- 컨테이너 엘리먼트다.
	- 다른 블록엘리먼트나 인라인 엘리먼트를 담는 엘리먼트다.
	- 여러 엘리먼트를 하나의 div 엘리먼트에 담아두면 레이아웃을 만들거나
	  스타일을 적용하거나 조작(엘리먼트의 추가/삭제)할 때 div 단위로 수행하면
	  한 번에 처리가 가능하다.


+ 인라인 엘리먼트 
   - 새로운 라인에서 시작하지 않을 수도 있다.
   - 컨텐츠를 표시하는 데 필요한 너비만큼만 차지한다.
   - 엘리먼트의 너비를 지정할 수 없다. 
   - 인라인 엘리먼트내의 컨텐츠는 정렬할 수 없다.

   * span 엘리먼트
	- 텍스트 혹은 인라인 엘리먼트를 담는 컨테이너 엘리먼트다.
	- 텍스트의 일부분을 다르게 표시 혹은 조작하기 위해서 사용되는 엘리먼트다.

[ - 인라인요소 : a, img, strong, em, small, del, b, i, br, input, select, textarea, label, button   
[ 블록 엘리먼트 내에는 인라인 엘리먼트를 써야 함 ]
[ 근데, 인라인 엘리먼트 내에 블록 엘리먼트를 쓰면 안됨 ]

------------------------------------------------------------------------------------------
웹 브라우저에서 개발자 도구 단축키 - F12

html 태그의 글로벌 속성
- 모든 html 태그가 가지고 있는 공통 속성이다.
- 주요 속성
	+ id 속성
		* html 문서에서 엘리먼트(태그)를 유일하게 식별하기 위해서 지정하는 속성값이다.
		* html 문서에서 id속성값이 같은 엘리먼트는 존재하지 않아야 한다.
		* html 문서의 엘리먼트에 고유한 id 속성값을 지정하는 이유
			+ 특정 엘리먼트 하나만 골라서 스타일을 적용할 수 있다.
			+ 특정 엘리먼트 하나만 골라서 조작작업을 수행할 수 있다.
		* 예시)
			<!-- 수정, 삭제, 등록 버튼에 고유한 id 속성값을 지정하기 -->
			<div>
				<button id="btn-modify">수정</button>
				<button id="btn-del">삭제</button>
				<button id="btn-add">등록</button>
			</div>
			<!-- 각각의 div에 고유한 속성값을 지정하기 -->
			<div>
				<div id="news-section">
					...
				</div>
				<div id="sports-section">
					...
				</div>
				<div id="ent-section">
					...
				</div>
				<div id="fashion-section">
					...
				</div>

        + class 속성
		* 같은 스타일이 적용되게 하고 싶은 엘리먼트들은 같은 class 속성값을 가진다.
		* html 문서에서 class 속성값이 같은 엘리먼트들은 여러 개 있을 수 있다.
		* class속성은 값을 여러 개 가질 수 있다.
		* html 문서의 엘리먼트에 class 속성값을 지정하는 이유
			+ 같은 클래스 속성값을 가지고 있는 엘리먼트에는 같은 스타일이 적용
		* 예시)
			<!-- 같은 스타일을 적용할 엘리먼트는 같은 class 속성값을 지정하자 -->
			<div>
				<div id="breaking-news">
					<h3 class="news-title">속보</h3>
					...
				</div>
				<div id="politics-news">
					<h3 class="news-title">정치</h3>
					...
				</div>
				<div id="sports-news">	
					<h3 class="news-title">스포츠</h3>
					...
				</div>
			</div>

			<!-- class 속성값을 여러 개 가지는 엘리먼트 -->
			<div>
				<button class="btn btn-ok">버튼1</button>
				<button class="btn btn-disabled>버튼2</button>
				<button class="btn btn-ok btn-disabled>버튼3</button>
			</div>
        + style 속성
		* 엘리먼트에서 직접 스타일을 지정할 때 사용하는 속성이다.
		* 단, 엘리먼트에서 직접 스타일을 지정하는 것은 추천하지 않는다.
		* 형식
		     style="property명: property값; property명: property값;"
		* 예시
		     <p style="color: red; text-align: center;"></p>
        + data-* 속성
		* 웹페이지 혹은 애플리케이션에서 사용할 사용자정의 데이터를 설정하기 위한
		  용도의 속성이다.
		* 엘리먼트에 data-*로 설정한 사용자 정의 속성은 브라우저에서 무시한다.
		* 엘리먼트에 data-*로 설정한 사용자 정의 속성은 해당 페이지의 JavaScript
		  애플리케이션에서 사용할 목적으로 지정하는 것이다.
		* 예시)
			<table>
				<tr>
					<th>번호</th>
					<th>상품명</th>
					<th>가격</th>
					<th>수량</th>
				</tr>
				<tr>
					<td>1001</td>
					<td>자바의 정석</td>
					<td data-unit-price="25000">25,000 원</td>
					<td data-amount="1000">1,000 개</td>
				</tr>
				<tr>
					<td>1002</td>
					<td>이것이 자바다</td>
					<td data-unit-price="35000">35,000 원</td>
					<td data-amount="3000">3,000 개</td>
				</tr>
				<tr>
					<td>1003</td>
					<td>혼자서 공부하는 자바</td>
					<td data-unit=price="22000">22,000 원</td>
					<td data-amount="4000">4,000 개</td>
				</tr>
			</table>	
			<div>총 구매금액 : <strong>88,000,000 원</strong></div>

--------------------------------------------------------------------------------------------
CSS Selector(선택자)
	+ 태그 선택자
		- 지정된 태그명과 일치하는 모든 태그를 선택해서 스타일을 적용시킨다.
		- 형식
			태그명 { ... }
	+ 클래스 선택자
		- 일치하는 클래스속성값을 가진 모든 태그를 선택해서 스타일을 적용시킨다.
		- 형식
			.클래스속성값 { ... }
	+ 아이디 선택자
		- 일치하는 id속성값을 가진 태그를 선택해서 스타일을 적용시킨다.
		- 형식
			#id속성값 { ... }
---------------------------------------------------------------------------------------------
CSS(Cascading Style Sheets) - 기본적으로 아래로 전파된다.

외부 CSS파일을 현재 HTML 문서와 연결하기
 	+ <link> 태그
	- 현재 HTML 문서와 외부 리소스를 연결하는 태그다.
	- 주요 속성
		+ rel
			- 현재 문서와 외부 리소스 사이의 연관관계를 지정하는 속성이다.
			- 속성값
			rel="stylesheet" : 스타일시트로 사용할 외부 리소스를 연결한다.
		+ href 
			- 연결할 외부 리소스의 경로를 지정한다.
			- 프로젝트내의 리소스 또는 인터넷상의 경로
		예시)
		     <link rel="stylesheet" href="css파일 경로">

-------------------------------------------------------------------
style.css
[ 모든 HTML 문서에 적용할 스타일 정의 ]
예)
  h1 {color: red;}
	
  .btn { ... }
  .btn-primary { ... }
  .btn-success { ... }
  .btn-danger { ... }
라는 css 문서가 있을 때

<head>
// 해당 CSS 문서를 HTML 문서에 연결하고
<link rel="stylesheet" href="resources/css/style.css">
</head>

// 해당 CSS 문서를 이용해서 HTML 문서를 작성한다.
<button class="btn btn-primary">등록</button>
<button class="btn btn-danger">삭제<button>과 같이 사용할 수 있다.
--------------------------------------------------------------------------------------------------------
CSS 속성과 속성값
+ 형식
	{속성: 값;}
	- 예
		* 하나의 속성에 값을 하나 설정하기
		{color: red;}
		{background-color: red;}
		{font-size: 20px;}
		* 여러 속성에 같은 값을 설정하기 - padding이나 margin과 같이 설정할 항목이 여러 개인 경우
		{padding: 10px;}	<-- 아래 표현에 대한 짧은 표현식이다.
		위나 아래는 똑같음.
		{padding-top: 10px;
		 padding-right: 10px;
		 padding-bottom: 10px;
                 padding-left: 10px;}
	
	{속성: 값 값;}
	- 예
		* margin과 padding처럼 top과 bottom, left와 right가 서로 같은 값을 갖는 경우.
		{padding: 10px 20px;} < 아래 표현에 대한 짧은 표현식이다.
                
		{padding-top: 10px;
		 padding-right: 20px;
                 padding-bottom: 10px;
                 padding-left: 20px;}
	
	{속성: 값 값 값;}
	- 예
		* 테두리를 표현할 때 테두리의 두께, 스타일, 색깔을 한번에 지정할 때 
		{border: 1px solid black;} <-- 아래 표현에 대한 짧은 표현식이다.

		{border-width: 1px;
		 border-style: solid;
		 border-color: black;}

	{속성: 값 값 값 값;} 
	- 예
		* 박스모델에서 margin, padding을 설정할 때, 전 방향에 대한 값을 전부 지정할 때 
		{margin: 10px 20px 15px 20px;} <-- 아래 표현에 대한 짧은 표현식이다.

		{margin-top:   10px;
		 margin-right: 20px;
		 margin-bottom:15px;
                 margin-left:  20px;}

+ color : CSS에서 색상을 표현하는 방식
	* ColorName
		색상명을 직접 값으로 사용하는 방식이다.
		{color: red;}
		{color: blue;}
		{background-color: orange;}
	* RGB
		+ rgb(숫자, 숫자, 숫자) 표기법으로 값을 지정하는 방식이다.
		+ 숫자: 0~255까지 사용가능하다.
		+ 숫자의 순서는 red, green, blue의 순서다.
		+ 색상
		 black -> rgb(0, 0, 0)
		 white -> rgb(255, 255, 255)
		 red   -> rgb(255, 0, 0)
                 green -> rgb(0, 255, 0)

		 무채색 -> rgb(값1, 값2, 값3)
			   값1, 값2, 값3이 전부 동일하면 무채색이다.
			   숫자가 높으면 밝은 무채색, 숫자가 낮으면 검은 무채색

		{color: rgb(255, 0, 0)}
	* HEX
		+ 16진수 표기법으로 값을 지정하는 방식이다.
		+ 형식 : #000000 ~ #ffffff
		+ 색의 순서는 : #rrggbb이다. 첫 2자리가 빨강, 다음 2자리가 초록, 다음 2자리가 파랑이다.
		+ 색상
		    black -> #000000 -> #000
		    white -> #ffffff -> #FFF
		    red   -> #ff0000 -> #F00
                    green -> #00ff00 -> #0F0
		    blue  -> #0000ff -> #00F
		[ #224477처럼 같아야 세 자리로 축약 가능 ]

{ clear:both; }는 해당 엘리먼트의 왼쪽과 오른쪽에 floating된 엘리먼트가 위치하지 못하게 한다.

+ 크기 단위: 글자크기, 엘리먼트의 너비, 높이, 여백 등을 조절할 때 사용하는 크기값
	* 절대값 단위
		+ px 단위
			- 1px는 화소 1개의 크기다.
			- 모니터의 픽셀 크기는 정해져있기 때문에 픽셀단위로 설정한 크기는 
			  브라우저의 크기를 조절하더라도 변하지 않는다.

	* 상대값 단위
		+ % 단위
			- %는 백분율 단위로 크기를 표시한다.
			- %로 설정한 크기는 브라우저의 너비가 변경되면 같이 변한다.
			- %로 설정한 값은 부모 요소의 크기에 대한 상대적인 값이다.
		+ em 단위
			- 부모 요소에 대한 상대적인 크기를 배수 단위로 크기를 표시한다.
			<div style="font-size:10px;">
				<p style="font-size: 1em;></p> 여기서 글꼴 크기는 10px이다.
				<p style="font-size: 1.5em;></p> 여기서 글꼴 크기는 15px이다.
				<p style="font-size: 2em;></p>	여기서 글꼴 크기는 20px이다.
			<div>
+ 선택자 [ 외워야 됨.. ]
p.intro - p중에서 클래스가 intro인 것만 선택
p#intro - p중에서 아이디가 intro인 것만 선택
p,.intro - 
p .intro - p의 자손 중에서 클래스 속성값이 intro인 것을 선택. 
p >.intro - p의 자식 중에서 클래스 속성값이 intro인 것을 선택.
p+.intro - p
		+ rem 단위
		+ vw/vh 단위
-------------------------------------------------------------------------------------------------

  -----------------------------------------
  |                 |                     |
  |                 |                     |
  |                 |                     |
  |                 |                     |
  |                 |   [padding]         | [margin]
  |-----------------가<------------------>|<------->
  |                 |                     |
  |                 |                     |
  |                 |                     |
  |                 |                     |
  |                 |                     |
  ----------------------------------------  <-- 라인 자체를 [border]  

  '가' : 컨텐츠
  [padding] : 간격
  [margin] : 여백
  [border] : 테두리

---------------------------------------------------------------------------------------------

