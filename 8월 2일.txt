-------------------------------- 기본 및 자식 자손 선택자 -----------------------------------

div { } : 태그명이 div인 엘리먼트 선택

div#box { } : 태그명이 div && 아이디가 "box"인 엘리먼트 선택

#box div{ } : id가 "box"인 엘리먼트의 자손 && 태그명이 div인 엘리먼트 선택

#box > div{} : id가 "box"인 엘리먼트의 자식 && 태그명이 div인 엘리먼트 선택

#box p {} : id가 "box"인 엘리먼트의 자손 && 태그명이 p인 엘리먼트 선택

#box > p {} : id="box"인 엘리먼트의 자식 && 태그명이 p인 엘리먼트 선택

#box > div > p {} : id="box"인 엘리먼트의 자식 중 
			태그명이 div인 엘리먼트의 자식 중 
			태그명이 p인 엘리먼트 선택

.intro {} : class="intro"인 엘리먼트 선택

.intro + p {} : class="intro"인 엘리먼트의 바로 다음에 위치한 형제 엘리먼트이고
                태그명이 p인 엘리먼트 선택 [ ★ 바로 다음이 p가 아니면 선택이 안됨 ★ ]

.intro ~ p {border: 1px solid red;} : class="intro"인 엘리먼트의 동생 엘리먼트 중에
태그명이 p인 엘리먼트 선택

#sub-box-2 > p : id="sub-box-2"인 엘리먼트의 자식 && 태그명이 p인 엘리먼트 선택

[ 태그를 타고 타고 들어가는 건 권장하지 않음. ( 구조 변경 시 취약함 ) ]
[ 가까운 태그를 찾는 게 더 권장되는 방법임 ]
[ 아이디를 활용하거나, 클래스를 활용하는 게 권장됨. ]

------------------------------기본 및 자식 자손 선택자---------------------------------------


-------------------------------속성 선택자----------------------------------------------------

a[title] {} : 태그명이 a인 엘리먼트 중에서 title 속성을 가지고 있는 엘리먼트 선택.

a[target] {} : 태그명이 a인 엘리먼트 중에서 target 속성을 가지고 있는 엘리먼트 선택.

a[target="_self"] : 태그명이 a인 엘리먼트 중에서 target 속성의 속성값이 "_self"인 엘리먼트 선택

a[href^='http'] {} : 태그명이 a인 엘리먼트 중에서 href 속성값이 http로 시작하는 엘리먼트 선택.

a[href$='com'] {} : 태그명이 a인 엘리먼트 중에서 href 속성값이 .com으로 끝나는 엘리먼트 선택.

a[href$='jpg'] {} : 태그명이 a인 엘리먼트 중에서 href 속성값이 .jpg로 끝나는 엘리먼트 선택.

a[alt*="로고"] {} : 태그명이 a인 엘리먼트 중에서 alt 속성값에 "로고"가 포함되어 있는 엘리먼트 선택.

a[alt ~="로고"] {} : 태그명이 a인 엘리먼트 중에서 alt 속성값에 "로고"가 
다른 글자와 분리된 독립적인 단어로 있는 엘리먼트 선택.

 + @

document.querySelector("input[name='username']").disabled = true;
: 태그명이 input인 엘리먼트 중에서 name 속성값이 username인 엘리먼트를 선택한다.
  해당 엘리먼트를 비활성화시킨다.

document.querySelector("input[type='password']").remove();
: 태그명이 input인 엘리먼트 중에서 type 속성값이 password인 엘리먼트를 선택한다.
  해당 엘리먼트를 삭제한다.

document.querySelectorAll("input[name='career']")[2].checked = true;
: 태그명이 input인 엘리먼트 중에서 name 속성값이 career인 엘리먼트를 모두 선택한다.
  최종 결과는 배열이다.
  배열 객체->[input, input, input, input]가 들어있다.

  배열에서 인덱스 2번에 저장된 엘리먼트를 체크상태로 바꿔라.

[ querySelector는 1개가 반환되고, querySelectorAll은 배열이 반환된다. ( 인덱스 필요 ) ]

-------------------------------------속성 선택자----------------------------------------------


-------------------------------------필터 선택자----------------------------------------------

[★ nth-child는 항상 1부터 시작함. ★]

tbody tr:first-child {}
: 태그명이 tbody인 엘리먼트의 자손 중에서
  태그명이 tr인 엘리먼트를 선택하고,
  그 중에서 첫 번째(장남) 자식인 엘리먼트를 선택

tbody tr:last-child {}
: 태그명이 tbody인 엘리먼트의 자손 중에서
  태그명이 tr인 엘리먼트를 선택하고,
  그 중에서 마지막 자식(막내)인 엘리먼트를 선택

[ 위 2가지는 tr이면서 동시에 장남이거나 막내여야 함. ]
[ 처음이나 끝에 다른 태그가 있으면 장남이거나 막내 태그가 아니라서 선택이 안됨 ]
tbody tr:nth-child(2) {}
: 태그명이 tbody인 엘리먼트의 자손 중에서
  태그명이 tr인 엘리먼트를 선택하고,
  그 중에서 2번째 자식인 엘리먼트를 선택

tbody tr:nth-child(3) {}
: 태그명이 tbody인 엘리먼트의 자손 중에서
  태그명이 tr인 엘리먼트를 선택하고,
  그 중에서 3번째 자식인 엘리먼트를 선택

tbody tr:nth-child(4) {}
: 태그명이 tbody인 엘리먼트의 자손 중에서
  태그명이 tr인 엘리먼트를 선택하고,
  그 중에서 4번째 자식인 엘리먼트를 선택

tbody tr:nth-child(2n+1) {}
: 태그명이 tbody인 엘리먼트의 자손 중에서
  태그명이 tr인 엘리먼트를 선택하고,
  그 중에서 2n+1번째 엘리먼트를 선택
  [ n의 값은 0부터 시작한다. 즉, 1번째, 3번째, 5번째, 7번째, ...가 선택된다. ]

tr:hover {}
: 태그명이 tr인 엘리먼트 중에서
  현재 마우스가 올라와있는 엘리먼트를 선택한다.

input:focus{}
: 태그명이 input인 엘리먼트 중에서
  포커스가 위치하고 있는 엘리먼트를 선택한다.

a:link {}
: 태그명이 a인 엘리먼트 중에서
  방문한 적이 없는 링크를 선택한다.

a:visited {}
: 태그명이 a인 엘리먼트 중에서
  방문한 적이 있는 링크를 선택한다.

a:hover {}
: 태그명이 a인 엘리먼트 중에서
  현재 마우스가 올라와있는 링크를 선택한다.

a:active {}
: 태그명이 a인 엘리먼트 중에서
  현재 클릭하는 링크를 선택한다.

-------------------------------------------필터 선택자-----------------------------------------


박스모델 : 화면 디자인, 화면의 레이아웃을 구성할 때 HTML 엘리먼트(태그)를 
박스처럼 다루게 되는데, 이를 박스모델이라고 한다.

html에서 실제 너비 width는 border까지가 아닌 content까지가 된다.

박스모델에서 엘리먼트의 크기를 설정하는 방법
1) box-sizing : content-box

	css의 width, height 프로퍼티로 설정하는 엘리먼트의 크기는 컨텐츠의 크기다.

	실제 엘리먼트의 크기 [ width: 너비, height : 높이 ]
		width : border-left 
		      + padding-left 
 		      + content 
		      + paddin-right 
                      + border-right
		
		height : border-top
		      +	 padding-top
		      +  content
                      +  padding-bottom
                      +  border-bottom

	 예시)
		div {
		    width : 100px;
	            padding: 10px;
		    border: 2px solid black;
		    }
                실제 너비 = 10 + 2 + 100 + 2 + 10 = 124px
	
2) box-sizing : border-box

	css의 width, height 프로퍼티로 설정하는 엘리먼트의 크기는 테두리까지의 크기다.

	실제 엘리먼트의 크기 [ width : 너비, height: 높이 ]
		width : width
 		height : height

-------------------------------------------필터 선택자-----------------------------------------

CSS Position

- CSS의 포지션 속성은 엘리먼트의 위치를 결정하는 CSS 속성이다.

+ static
	- position 속성을 지정하지 않을 때, 기본으로 설정되는 값이다.
	- 엘리먼트가 위에서 아래 방향으로, 왼쪽에서 오른쪽 방향으로 위치하게 된다.
	
+ relative	
	- 엘리먼트의 원래 위치에서 지정된 값만큼 이동된 곳에 위치하게 된다.
	- 엘리먼트의 원래 위치는 해당 엘리먼트에 position 속성을 지정하지 않았을 때 
	  위치하는 곳을 말한다. 

+ absolute
	- 부모 엘리먼트의 왼쪽 꼭지점을 기준으로 지정된 위치에 엘리먼트에 위치시킨다.
	- 부모 엘리먼트는 relative, absolute, fixed 속성 중 하나로 설정되어 있어야 한다.
	- 부모 엘리먼트의 위치가 변동되면 absolute로 위치가 지정된 자식 엘리먼트도 
	  따라서 같이 이동한다.
+ fixed
	- 엘리먼트의 위치를 지정된 위치에 고정시킨다.
	- 화면의 상단, 화면의 하단에 엘리먼트를 고정시키고, 화면을 스크롤해도
	  해당위치에 계속 머무르게 한다.

|----->left-----|
|		|
|		|
↓ top 	 bottom ↑
|		|
|  		|
-----right<------

-----------------------------------------------------------------------------------------------

z-index
	+ 엘리먼트의 수직방향 위치를 결정하는 CSS 속성이다.
	+ z-index 값이 클 수록 다른 엘리먼트의 위에 위치하게 된다.

-----------------------------------------------------------------------------------------------

CSS 적용 우선 순위

!important >>> 태그에 직접 적기 >>>>>> id >>>>> 클래스 >>> 태그명

★ 개수가 여러 개 여도 우선순위 자체가 더 높은 애가 우선순위가 높다. ★

1. 선언 순서에 따른 우선순위
	+ 나중에 선언된 스타일이 우선순위가 높다.
	+ 예시)
		p {color: red;}
		p {color: blue;} // 이 스타일이 적용된다.

2. 대상에 대한 명시성에 따른 우선 순위
	+ 적용 대상에 대한 명시성이 높을 수록 우선 순위가 높다.
	+ 즉, 아이디 선택자 > 클래스 선택자 > 태그 선택자 순으로 우선순위가 높다.
	+ 우선순위
	    1 - !important가 지정된 스타일
	    2 - 태그에 지정된 인라인 스타일
	    3 - 아이디 선택자로 지정된 스타일
	    4 - 클래스|속성|가상 선택자로 지정된 스타일
	    5 - 태그 선택자로 지정된 스타일
	    6 - 전체 선택자로 지정된 스타일

------------------------------------------------------------------------------------------------

엘리먼트 floating 시키기
	+ float 속성은 엘리먼트를 화면의 왼쪽 혹은 오른쪽으로 floating 시킨다.
	+ 이미지와 텍스트를 같이 표현할 때 텍스트가 이미지의 주위를 자연스럽게 감싸게 할 
	  목적으로 개발된 속성이다.
	+ 엘리먼트가 floating 되면 floating되지 않은 엘리먼트는 
	  floating된 엘리먼트 아래로 들어가게 된다.
	+ floating된 엘리먼트의 아래에는 컨텐츠가 위치할 수 없다.

	+ floating된 엘리먼트들끼리는 왼쪽 혹은 오른쪽으로 나란히 위치한다.


기본적으로
<body>
	<div>

	</div>
</body>

이렇게 감싸서 가운데 정렬을 할 수 있도록 해야 한다.