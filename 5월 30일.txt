사칙 연산에 참여 안 하는 숫자들은 문자열로 취급하는 게 유리함

우리가 다루는 것 중 문자라고 생각되면 일단 String으로 생성한다고 생각하기.
[ 한 글자로 다루는 건 많지가 않음. 1글자여도 문자 혹은 문자열을 저장할 때는
언제나 String으로 쓰자. ] 
- 이유 : 사용자가 입력한 정보들은 어차피 문자열로 들어가니까 그냥 만들 때부터
한 글자여도 항상 문자열로 변수 선언을 하자. + String은 기능이 많음. 

괜히 코드 한 줄 더 쓰지 말고, 초기화를 이미 초기화 되어 있는 변수를 이용해서 하자..

사칙 연산을 할 때 다른 자료형끼리는 먼저 형이 일치된 후에 계산됨.

public static void main(String[] args){
	// 시험 성적을 계산해서 합격/불합격여부를 판단하고,
 	// 합격인 경우 수행문3과 수행문4를 실행하고,
	// 불합격인 경우 수행문 5를 실행한다.

	수행문1;
	수행문2;

	if( 합격여부) {
	// 합격 여부가 true로 판정되었을 때 실행할 수행문
	수행문3;
	수행문4;
	} else {
	// 합격 여부가 false로 판정되었을 때 실행할 수행문
	수행문 5;
	}
}

위와 같은 논리로 코드를 작성하고 싶을 때, if문이라는 걸 이용한다.
[ 위와 같은 경우는 합격여부가 조건식이 됨. ]

제어문 : 프로그램의 실행흐름을 분기시키는 것.

if문의 목적 : 특정 수행문이 실행되거나 실행되지 않게 하는 것.
[ 실행여부를 결정할 조건식이 반드시 필요함. ]
[ if문의 조건식은 수행결과가 boolean값인 연산식이어야 한다. ]

if (조건식) {
	// 조건식이 true로 판정되면 블록내의 수행문이 실행된다.
} else {
	// 조건식이 false로 판정되면 블록내의 수행문이 실행된다.
}

각각을 if 블록, else 블록이라고 하는데
조건식이 참이면 if 블록의 수행문이, 조건식이 거짓이면 else 블록의 수행문이 수행됨.
[ else만 단독으로 사용하는 것은 불가능함. 반드시 if~else~형태여야 함. ]


if (조건식1) { 조건식1이 true로 판정되면 실행되는 수행문
		  
 } else if (조건식2) { 조건식2이 true로 판정되면 실행되는 수행문
		  
 } else if (조건식3) { 조건식3이 true로 판정되면 실행되는 수행문
		 
 } else if (조건식4) { 조건식4이 true로 판정되면 실행되는 수행문
	 
 } else { 조건식1/조건식2/조건식3/조건식4 모두 false로 판정되면 실행되는 수행문

} - 조건식이 여러 개 필요할 때 사용.
else는 앞 조건이 다 거짓이어야 이동하는 곳이다.

if () {}
else if () {}	
else if () {}
else () {}

위랑 같은 방식으로 항상 괄호 여닫기, 중괄호 여닫기부터 미리 해두기
[ 그래야 나중에 자동 정렬됨. ]

항상 연산후에 자동 형변환 되는지 안되는지 신경쓰기. 

변수의 Scope [ 생존범위 ]
- 자바에서 변수의 사용범위는 그 변수가 선언된 블록 내부임.
- 선언된 블록을 벗어나서는 사용할 수 없다.
- 변수를 언제까지 사용할 지에 따라 변수 선언 위치를 다르게 해줘야 한다.
- 코드의 중복을 방지하게 위해 변수의 선언 범위를 잘 조절하자.

자바에서 다른 이야기를 할 때 빈 줄을 넣음.
( 1. 코딩할 때 절대로 빈 줄을 두 줄 쓰지 말기. 
  2. 변수 선언이나 출력 등 다른 이야기를 할 때는 빈 줄을 넣음. )

서로 다른 종류의 조건이면 if를 개별적으로 써야 함. [ 개별적인 if문 2개가 필요함 ]
[ if를 나누는 기준은 서로 다른 조건일 때임 ]

if() {
}

if() {
}

이런식으로 해야함.

코딩 순서는 항상 재료준비부터 ( 데이터부터.. )
- 내가 다뤄야할 데이터가 무엇인지부터 알아야 함.

if (조건식1){
	수행문1;
} else if (조건식2){
	수행문2;
} else if (조건식3){
	수행문3;
} else {
	수행문4;
}

if ~ else if ~ else if ~ else로 작성 가능한 걸 if~if~if~else와 같이 나누면 안됨.
[ 불필요한 조건식 검사로 인한 성능 저하가 발생함 ]

변수 자동완성도 ctrl + space로 사용하기.

if문을 쓸 때 변수가 초기화되지 않는 상황이 발생되지 않도록 작성해야 함.
[ 조건에 따라 초기화 되지 않을 경우가 생기면 안됨. ]
[ 값을 미리 넣어두고 시작하거나 추후에 값을 세팅해줘야 함. ]

컴파일러는 조건식 자체를 분석하지는 않아서,
초기화 에러가 발생할 수 있음. 

- 반드시 모든 상황에 대해 초기화 될 기회가 보장되어야지만 사용 가능함.
[ 보통 정수는 0, 실수는 0.0, boolean 타입은 false로 기본형 값을 넣고 시작함. ]

내포된 if문 : if 블록이나 else if 블록, else블록내에 if문이 있는 형식.
[ 불필요한 조건식 체크를 안해도 돼서 더 코드 실행에 있어서 더 경제적임. ] 
[ 내포된 if문을 사용하는 이유 ]

범위를 적을 때는 a < b < c 이런 식으로 적으면 안되고,
a < b && b < c 이렇게 적어야 함 . [ 구간을 나눠서 적어야 함. ]

특정 데이터에 대해서 체크할 조건이 여러 개인 경우
if ~ else if ~ else if 구문을 사용하자.

if구문으로 분리된 조건들은 매번 모든 조건을 체크한다.

if ~ else if 구문은 true로 판정되는 조건이 발견되면
이후의 모든 조건은 무시한다. [ 코드 실행 성능이 개선된다. ]

- 고로 명확한 기준을 가지고 있어야 함.

switch문 - 같은지 equal 비교만 가능하다...
[ 조건에 해당되는 값이 몇 개 되지 않을 때 사용함 ]
[ 경우의 수가 정해져 있을 때 사용함 ]

이클립스에서 이름을 바꾸려면
파일 우클릭 - Refactor - Rename으로 해야 이클립스가 전부 찾아서 대신 바꿔줌.

switch~case 문에서 break를 생략하면 계속 진행되니 break를 생략하지 말자.
switch~case문을 사용해야 하는 경우 : 조건이 정해져 있는 경우
swtich~case문의 장점 : 깔끔하고 가독성 확보에 유리하다.

특정한 수행문을 반복해서 수행하게 하는 거 반복문.
* 반복문에는 반복문을 중단시키는 탈출 조건이 반드시 필요함.
[ 탈출 조건이 없으면 무한 루프를 돎 ] 
[ 제시된 조건이 true인 동안 블록내의 수행문을 반복 실행 ]
[ for문 : 반복 횟수를 지정해서 실행할 때 - 알고 있으면 지정 가능. ]
[ while문 : 반복 횟수를 모를 때 - ★특정 객체★와 같이 사용함. ]

while문을 사용하면 무한루프를 간단히 구현할 수 있다.
혹은 특정 객체와 연결지어 사용해야 한다. 
[ while문을 사용할 때 대상 객체는 반복 지속여부를 조회할 수 있는 기능을 제공해야 함 ]

for ( 초기화식; 조건식; 증감식 ) {
    조건식이 true일 동안 수행할 수행문;
    조건식이 true일 동안 수행할 수행문;
}

[ 초기식은 최초 1번만 실행, 이후 조건식 - 실행문 - 증감식 반복임 ]
[ 조건식이 거짓이 되면 바로 탈출 ]

초기식 - 시작 지점 정하기 / 조건식 - 극한 정하기 / 
[ i가 항상 1일 필요 없이 그냥 반복 횟수에 맞게 지정해주면 됨. ]
[ 적을 때 강사님 띄어쓰기 흡수하기. ]

오버플로우 : 값을 담을 수 있는 공간을 넘어간 것 
[ 계산할 때 범위가 공간을 넘는지 안 넘는지 계속 체크해야 한다. ]
[ 의도치 않은 값이 도출될 수 있음 ] 

코딩을 빠르게 할 수 있는 방법 - 출력결과를 미리 적어놓는다.
[ 그럼 그걸 통해서 유추해서 원리를 파악할 수 있다. ]
[ 코딩 과정을 그려서 시각적으로 표시하는 게 필요하다 . ] 

요구 사항
       
고객등급 및 주문가격별 포인트 적립
고객등급이 1등급인 경우 - 구매 금액의 10%를 적립한다

고객등급이 2등급인 경우 - 구매 금액의 5%를 적립한다.
구매 금액이 50만원을 초과하면, 50만원 초과분에 대해 1% 추가 적립
           
고객등급이 3등급인 경우 - 구매 금액의 2%를 적립한다.
구매 금액이 100만원을 초과하면, 100만원 초과분에 대해 1% 추가 적립

[★요구 조건과 출력 조건을 시각화 시키고 패턴과 규칙을 찾는다. - 코딩 잘하는법★]

break - 반복문 혹은 switch문 내에서만 사용할 수 있다. ( 반복문 / switch문 탈출에 쓰임 )
continue - 반복문에서만 사용할 수 있다. ( 반복문에서 다음번 반복을 수행하러 증감식 이동한다. )

break문은 반드시 탈출 조건과 함께 사용된다.
[ break는 반복 작업을 하다가 목표[=탈출 조건]를 달성했을 때 사용한다. ]



