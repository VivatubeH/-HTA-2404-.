인터페이스를 분리하지 않은 경우 발생할 문제점

- 구현하지 않아도 되는 스펙까지 물려받는다. [ 불필요한 구현을 해야 한다. ]
   * 경차는 내비기능, 자율주행 기능을 제공할 필요가 없다.
- 구현 객체를 사용하는 측에서 기능별로 객체를 구분해서 조립을 유도할 수 없다. [ 특정 기능의 조립객체 ]
[ 예: 경차, 소형차, 중형차, 고급차 등 모든 Car 인터페이스 구현체가 다 조립되는 문제 발생 ] 
   * 내비게이션 기능이 구현된 객체만 전달받을 수 있는 방법이 없다.

인터페이스를 분리한다면? 
- 구현 클래스가 실제로 구현할 기능이 정의된 인터페이스만 선택적으로 구현할 수 있다.
  * 경차는 Car, Audiable 인터페이스만 구현해서 주행기능, 오디오 기능만 제공하면 됨.
  * 고급차는 Car, Audiable, Navigation, AutoDrivable 인터페이스를 구현해서 주행기능, 오디오기능,
    내비기능, 자율주행 기능을 제공하면 됨.
- 구현객체를 사용하는 측에서 특정 기능이 구현된 구현객체를 선택적으로 조립을 유도할 수 있다.
  * 주행기능이 제공되는 구현객체를 조립하고 싶다.
     Car car;
  * 자율주행 기능이 제공되는 구현객체를 조립하고 싶다.
    AutoDrivable car; 
  * 주행기능이 제공되는 구현객체만 매개변수의 인자로 전달받고 싶다.
   void test(Car car) { ... }
  * 내비게이션 기능이 제공되는 구현객체만 매개변수의 인자로 전달받고 싶다. 
   void test(Navigation car) { ... }

인터페이스 : 구현 클래스가 구현할 기능에 대한 정의, 기능에 대한 명세 [ 명세서, 표준, 스펙 ]
추상클래스 : 클래스는 한 개 밖에 상속이 안되어서 분리라는 걸 할 수 가 없음. 
[ 목적: 구현 클래스의 구현 부담 경감 ]

* 모든 구현클래스에서 공통으로 구현되는 기능을 추상클래스에서 미리 구현하자.
* 추상클래스는 추상메서드를 보유할 수 있으므로, 구현하지 않은 추상메서드가 존재하더라도 상관없다.
* 구현클래스는 List 인터페이스를 구현하는 것보다, AbstractList 추상클래스를 상속받으면 개발을 더 
빠르게 할 수 있다.
* 추상클래스를 이용하면 구현클래스의 구현부담을 줄일 수 있다. [ 목적 - 구현부담의 경감 ]

인터페이스를 추상클래스에서 구현해서 틀을 잡아놓고,
그 추상클래스를 구현클래스에서 상속받아서 완성시키면 개발 시간 단축 및 구현 부담 감소.

마크업 인터페이스(Markup Interface) : 클래스에 특별한 표시를 하기 위해 사용하는 인터페이스
- 추상메서드가 하나도 없는 인터페이스다.
- 해당 인터페이스를 구현하는 클래스에 특정한 작업이 가능한 객체임을 나타내는 용도로 사용된다.
[ 예시 : cloneable 인터페이스를 구현하지 않으면 복제할 수 없다. ]
[ instanceof 사용해서 만들 수 있음 ]

보통은 개발자의 관점에서는 인터페이스를 주로 사용함.

추상 클래스를 사용하는 경우 - 

public class Banking {

 public void 조회() {
  암호문을 복호화
  사용자 검증
  
  계좌정보 조회
 
  조회결과 암호화 
  응답으로 보내기
 }

 public void 이체() {
  암호문을 복호화
  사용자 검증

  이체하기

  이체결과 암호화
  응답으로 보내기
 }

// 공통으로 처리해야 할 부분, 따로 처리해야 할 부분이 있는데
공통으로 처리해야 할 부분을 추상클래스로 만들면 수월함.
[ 전처리 작업, 후처리 작업이 고정되어 있는 경우 ]
- 추상 클래스의 지향점은 항상 개발자의 코딩 부담을 감소시키는 데 있다.

final 키워드 - 변수, 메서드, 클래스에 붙일 수 있음.
변수 :
   final 키워드가 지정된 변수는 한 번 지정된 값을 변경할 수 없다.
   주로, 상수를 정의할 때 사용한다.
   * 상수는 일반적으로 정적변수로 정의하기 때문에 아래와 같은 형태가 대부분이다.
      public class Constant {
           public static final String FILE_SAVE_DIRECTORY = "c:/files"
      } // 정적변수는 대부분 공개되어 있는 게 많다. 

   * final 키워드는 멤버변수, 매개변수, 지역변수에 지정할 수 있다.
        멤버변수 예시

        public class Sample {
           final int x = 100;

        public class Sample {
           final int x;
           public Sample(int x) {
                    this.x = x;
           }
           public void setX(int x) {
                    this.x = x; // 컴파일 오류다.
        } 
        # 멤버변수에 한해서 생성자 메소드로 객체 생성 시 값을 지정하는 것이 가능하다. 
        + 지역변수 예시
	public class Sample {
   	     public void test() {
   		final int x = 10;
		final int y; // 컴파일 오류다.
	      }
               }
          + 매개변수 예시
	public class Sample {
	    public void test(final int x) {
                      x = 100; // 컴파일 오류다
 	   }
              }
             # 매개변수 x에는 이 메소드를 호출할 때 인자로 전달된 값이 대입된다.
             # 매개변수가 final로 지정되어 있으면 블록내의 수행문에서 값을 변경 불가.

메소드 :
        final 키워드가 지정된 메소드는 하위 클래스에서 재정의할 수 없다. 

class Parent{
	public void test() { System.out.println("부모 메서드");}
	public final void test2() {} // 하위 클래스에서 재정의 불가
}
class Child extends Parent{
	@Override
	public void test() { System.out.println("재정의 하기");}
//	public void test2() {} 컴파일 오류. 재정의 할 수 없다.
}

클래스 : final 키워드가 지정된 클래스는 다른 클래스가 상속받을 수 없다.
[ 하위 클래스를 가질 수 없으므로 추상클래스에는 final을 붙이면 안 된다. ]

final class Sample3{
	public void test() {}
}

//class Sample4 extends Sample3{}  final이 지정된 클래스는 상속받기 불가.

상속, 추상화에서 핵심적인 내용 - 클래스 형변환 [ 다형성 ]
[ 부모 타입 변수에 자식 객체를 담을 수 있다. ]

public class 회계분석 {
  private DataReader reader;

  public 회계분석() {}

  public 회계분석(DataReader reader) {
     this.reader = reader;
  }
  public void setReader(DataReader reader) {
     this.reader = reader;
   }

  public void 보고서작성하기() {
  Data data = reader.read();
  // 획득된 Data 분석하고, 보고서 작성하기
   }
}

의존한다 
public interface DataReader {
    Data read();
}

public class TextDataReader implements DataReader {
    
   public Data read() {
     텍스트 데이터를 읽어온다.  
     텍스트 데이터를 Data로 변환한다.
     Data 객체를 반환한다.
    }
}

public class ExcelDataReader implements DataReader {
     public Data read()
    
     public Data read() {
       엑셀 데이터를 읽어온다.
       Data로 변환한다.
       Data 객체를 반환한다.
    }
} 

사용자 클래스가 의존하는 객체를 직접 생성하기
- 사용자 클래스에서 자신이 의존하는 객체를 new 키워드를 이용해서 직접 생성하는 방식
- 의존하는 객체를 다른 객체로 변경하기 위해서는 사용자 객체의 소스코드를 변경해야 한다.
- 사용자 클래스에서 직접 객체를 생성하기 때문에 사용자 클래스에 구현클래스의 이름이 등장한다.
- 사용자 클래스와 구현 클래스(여기서는 TextDataReader) 간의 결합도가 높아진다.

  public class 회계분석 {

   // 사용자 클래스에서 의존하는 객체를 직접 생성하였다.
   private DataReader reader = new TextDataReader();

   public 회계분석() {}
  
   public void 보고서작성() {
     // 데이터 읽어오기
     Data data = reader.read();
    // 데이터 분석하고 보고서 작성하기
   }
}

결합은 느슨하게 되어 있을 수록 유리함. 
- 클래스 간의 느슨한 결합을 위해 필요한 것이 인터페이스.

의존하는 객체를 제 3자로부터 제공받기 ( 의존성 역전 )

1)

public class 회계분석 {
   private DataReader reader;
  // 의존하는 객체를 직접 생성하지 않고, 의존하는 객체가 어떤 종류인지만 표시했다.
  // DataReader 인터페이스를 구현한 객체가 필요하다.

  public 회계분석() {} 
  public 회계분석(DataReader reader) {
    this.reader = reader;
  }

  public void setReader(DataReader reader){
    this.reader = reader;
  }

  public void 보고서작성() {
     Data data = reader.read();
     // 데이터 읽어오고, 분석하기
    }
 }

2) 
public class ExcelDataReader implements DataReader {
     public Data read() {
      엑셀에서 읽어서 Data로 변환해서 반환한다.
     }
}

3) 
public class 제3자 {
   public static void main(String[] args) {
    // 애플리케이션 실행에 필요한 객체 생성
      ExcelDataReader excel = new ExcelDataReader();  
      회계분석 app = new 회계분석();
      // 객체 조립하기
      app.setReader(excel);
      // 사용하기
      app.보고서작성();
    }
}

조립된 구현객체의 재정의된 메서드를 호출하기 위해서 해당 객체의 주소값이 필요하지 않다.
( 어차피 오버라이딩하면 재정의된 메서드가 호출되기 때문에 )
- 결론 : 구체적인 구현객체의 타입을 몰라도 해당 객체의 재정의 기능을 실행할 수 있다.
따라서 구체적인 구현클래스 대신 인터페이스 타입의 멤버변수만 참조변수가 필요하다.

자신이 의존하는 객체를 외부로부터 주입받으려면?
1. 의존하는 객체가 조립될 참조변수의 타입을 인터페이스 타입으로 지정한다.
[ 인터페이스 타입의 변수는 해당 인터페이스를 구현한 모든 객체를 참조할 수 있다. ]
[ 다양한 구현객체가 조립 가능해진다. ]
[ 구현객체간의 결합이 느슨해진다. == 교체하기 용이함. ]
2. 매개변수 있는 생성자 메소드나 setter 메소드를 정의한다. [ 멤버변수 초기화 ]

객체지향 프로그래밍 언어는 재사용성이 높다.

상속
- 공통속성이나 공통기능이 정의된 부모클래스를 정의할 수 있다.
- 부모클래스를 재사용해서(상속받아서) 자식클래스를 빠르게 정의할 수 있다.

클래스는 설계도다
- 하나의 클래스를 재사용해서 객체를 여러 개 생성할 수 있다.

객체지향 프로그래밍 언어로 작성된 프로그램은 보안성이 우수하다.
	접근제한(캡슐화) 
	- 객체의 상태 혹은 고유한 값을 외부 접근을부터 감추고,
	제공된 기능을 통해서만 간접적으로 이용할 수 있다.
	- 제공되는 기능에서는 입력값을 검증하고, 객체의 상태나 고유한 값에 대한
	잘못된 접근을 차단할 수 있다.

객체지향 프로그래밍 언어로 작성된 프로그램은 유지보수가 쉽고, 확장성이 뛰어나다.
[ 새로운 기능이 구현된 객체로 교체함. ] [ 추상화, 인터페이스, 제어역전 ]
- 추상화와 인터페이스를 통해서 사용방법이 동일한 여러 구현객체를 작성할 수 있다.
- 인터페이스를 이용하면 클래스와 클래스간의 관계를 느슨하게 결합할 수 있다.
- 제어역전을 이용하면 자신이 의존하는 객체를 외부로부터 제공받을 수 있다.
- 즉, 기존 소스코드의 변경없이 자신이 의존하는 객체를 교체해 줌으로서 새 기능을
추가하거나 확장할 수 있다.

객체지향적인 코딩을 당장은 못하지만, 개념적으로 이해할 필요가 있음.

