I/O, Network, Thread
- 네트워크 쓰레드는 요새 잘 안쓰는 추세.

문자 스트림
- 1글자씩 읽고/쓰는 스트림
- 텍스트 전용 스트림(그림, 영상, 압축파일, pdf 등은 읽고 쓸 수 없다.)
- 종류
	Reader 	
		- 추상 클래스
		- 읽기 전용 스트림
		- 주요 API
			int read()
			int read(char[] buf)
			void close()
		- 주요 구현 클래스
			FileReader : 텍스트 파일과 연결되는 스트림, 한 글자씩 읽어온다.
			InputStreamReader : 바이트스트림과 Reader를 연결하는 보조스트림
			
		★BufferedReader★ : 텍스트를 한 줄씩 읽어오는 보조 스트림
				- 주요 API
				String readLine() : 텍스트를 한 줄씩 읽어서 반환한다.
				텍스트를 줄 바꿈 문자 바로 앞까지 읽어서 반환한다.
				스트림의 끝에 도달하면 null을 반환한다. 
				[ 키보드로 입력한 텍스트를 읽을때는 무조건 얘를 쓴다. ]
	

	Writer
		- 추상 클래스
		- 쓰기 전용 스트림
		- 주요 API
			void write(int value)
			void write(char[] arr)
			void write(char[] arr, int offset, int length)
			void write(String text)
			void flush()
			void close()
		- 주요 구현 클래스
			FileWriter : 텍스트 파일과 연결되는 스트림, 한 글자씩 출력한다.
			OutputStreamWriter : 바이트스트림과 Writer를 연결하는 보조 스트림
			BufferedWriter
			★PrintWriter★ : 자동 flush 기능을 지원한다.
				         줄바꿈 문자를 자동으로 추가한다.
				        

* PrintWriter

+ 텍스트 전용 스트림이다.
+ 출력 전용 스트림이다.
+ 주요 API
+ 생성자 메소드	
	new PrinterWriter(String filename)
	지정된 파일명에 해당되는 파일과 연결되는 스트림을 생성한다.
	 new PrintWriter(File file)
	지정된 File객체가 표현하는 파일과 연결되는 스트림을 생성한다.
	 new PrintWriter(OutputStream out, boolean autoFlush)
	지정된 바이트스트림과 연결된 스트림을 생성하고, 자동 flush 기능을 설정할 수 있다.
	new PrintWriter(Writer out, boolean autoFlush)
	지정된 문자스트림과 연결된 스트림을 생성하고 자동 flush 기능을 설정할 수 있다.
	
+ 멤버 메소드
void wirte(Stirng text)
void print(String text)
void println(String text) - 줄바꿈 문자 자동 추가
		       자동 flush 기능을 적용받는다.

----------------------------------------------------------------------------------------

BufferedReader in = new BufferedReader(new FileReader("a.txt")); 

Application <- BufferedReader <- FileReader <- 파일
// String text1 = in.readLine(); // 텍스트 파일의 내용을 한 줄씩 읽어온다.
// String text2 = in.readLine(); // 텍스트 파일의 내용을 한 줄씩 읽어온다.

----------------------------------------------------------------------------------------

데이터 교환을 위한 텍스트 형식

---------------------------------------------------------------------------------------

CSV(Comma Separated Values)
	+ 하나의 CSV 파일은 독립된 엑셀의 시트 형태를 나타낸다.
	+ 파일의 각 줄은 시트의 row에 해당하고, 시트의 열에 해당하는 값은 ","로 구분된다.
	+ 예
		이름, 국어, 영어, 수학
		홍길동, 100, 80, 80
		김유신, 80, 80, 80
		이순신, 100, 100, 100

---------------------------------------------------------------------------------------

XML(eXtensible Markup Language, 확장가능한 마크업 언어)

+ 마크업(태그)를 이용해서 데이터를 정의한다.
+ 사전에 미리 약속된 규칙을 정의하고, 그 규칙에 맞춰서 XML로 데이터를 작성
+ XML의 태그는 HTML의 태그처럼 미리 정의되어 있지 않고, 표현할 데이터의 특성에 맞게 직접 정의할 수 있다.
<?xml version="1.0" encoding="utf-8"?>
<scores>
	<score>
		<name>홍길동</name>
		<kor>100</kor>
		<eng>80</eng>
		<math>80</math>
	</score>
	<score>
		<name>강감찬</name>
		<kor>100</kor>
		<eng>100</eng>
		<math>100</math>
	</score>
</scores>

-------------------------------------------------------------------------------------

JSON(JavaScript Object Notation: 자바스크립트 객체 표기법) 
+ 자바스크립트의 객체/배열 표기법을 사용해서 데이터를 표현한다.
+ XML에 비해서 데이터의 크기가 작고, XML에 비해서 JSON 형식의 데이터가 분석하는데 훨씬 가볍고 빠르다.
+JSON의 경량(Light-weight)의 데이터 표현형식이고, 사람이나 컴퓨터가 읽고 분석하기 용이하다.
+ 주석을 적을 수 없고, 무조건 쌍따옴표만 가능한 것과 같은 불편함이 조금 있다.
+ 예
JSON 객체 표기법

{"name":"홍길동", "kor":100, "eng":100, "math":80}

{"name":"뉴진스", "members":["민지", "하니", "다니엘", "해린", "혜인"]}

JSON 배열 표기법
["홍길동", "김유신", "강감찬"]

[{"name":"홍길동", "dept":영업팀", "salary":4000000},
 {"name":"김유신", "dept":"영업1팀", "salary":3000000},
 {"name":"강감찬", "dept":"영업2팀", "salary":5000000}]

YAML
+ JSON을 대체할 목적으로 만들어진 데이터 표현 형식이다.
+ 예
	# 주석을 지원한다.
	employee:
	   name: 홍길동
	   dept: 영업1팀
	   salary: 30000
	   family:
	      - 부인
	      - 아들                         
	      - 딸                               

-----------------------------------------------------------------------------------------
브릿지스트림
- 바이트스트림과 문자스트림을 연결하는 스트림이다.
- 종류
	InputStreamReader 
		애플리케이션 - Reader - -  InputStream - 리소스
		[ InputStream과 연결하는 Reader다. ]
		이 스트림을 사용해서 InputStream과 연결하고, 그렇게 연결된 채로 다른 Reader에 연결한다.
	OutputStreamWriter
		[OutputStream과 연결하는 Writer다.]
		
BufferedReader( 한 줄씩 ) <-- InputStreamReader(한 글자씩) <-- InputStream(한 바이트씩 )
		
			  [ 브릿지 스트림 ]		

예:

1. InputStream 획득하기
InputStream byteStream = url.openStream();

2. InputStream을 브릿지스트림과 연결하기
InputStreamReader bridgeStream = new InputStreamReader(byteStream);

3. 브릿지 스트림을 Reader와 연결하기
BufferedReader reader = new BufferedReader(bridgeStream);

InputStream byteStream = url.openStream();
InputStreamReader bridgeStream = new InputStreamReader(byteStream);
BufferedReader reader = new BufferedReader(bridgeStream);

-----------------------------------------------------------------------------------------

서로 다른 JVM에서는 객체의 주소를 줘도 써먹을 수가 없음.

그래서 객체 자체를 주고 받아야 할 필요성이 생김. 

★ 서로 다른 JVM 간의 객체 주고 받기 ★

직렬화와 역직렬화

직렬화 - 객체를 스트림으로 출력하는 것.[ 내보내는 것 ]

					|
	ObjectOutputStream		|	ObjectOutputStream의 writeObject(객체)를
내부 ------------------------> 외부		|	실행하면 객체의 정보(상태)를 1byte씩 출력할 수 있다.
       □□□□□□□□□□□□□		|
					|

역직렬화 - 직렬화된(스트림으로 출력된) 정보를 읽어서 객체로 복원하는 것.
			
					|
	ObjectInputStream			|	ObjectInputStream의 Object readObject()를 
내부 <----------------------- 외부		|	실행하면 직렬화된 정보를 읽어서 객체를 복원할 수 있다.
        □□□□□□□□□□□□□		|
					|

--------------------------------------------------------------------------------------------

직렬화/역직렬화 가능 객체의 필수 조건

- 대상 객체는 java.io.Serializable 인터페이스를 구현한 객체이자,
-  대상 객체가 포함하고 있는 객체도 java.io.Serializable 인터페이스를 구현한 객체여야 함.
- 직렬화, 역직렬화 대상에서 제외시키기 위해 해당 필드에 transient 키워드를 추가한다.

---------------------------------------------------------------------------------------------

직렬화 역직렬화의 이용
- 객체의 상태를 외부에 저장하고 복원할 수 있다. 
 * 마치 게임의 save 파일처럼
- 클러스터로 연결된 웹서버간의 세션복제에 사용된다.

직렬화 대상에는 객체의 상태만 포함된다. ( 멤버만 )
- 즉, 기능은 복원 대상이 아니다.

----------------------------------------------------------------------------------------------

↓↓↓↓↓↓↓ 객체의 상태를 파일에 저장하기 ↓↓↓↓↓↓↓↓

----------------------------------------------------------------------------------------------------

				        객체 내보내기(직렬화)
Customer 객체 ------> ObjectOutputStream ---------------------> FileOutputStream ------> customer.sav


_____________________________________________________________________________________________________

↓↓↓↓↓↓↓ 파일에 저장된 직렬화된 정보를 읽어서 객체를 복원하기 ↓↓↓↓↓↓↓↓↓

_____________________________________________________________________________________________________

				         객체 복원(역직렬화)
Customer 객체 <------ ObjectInputStream <---------------------- FileInputStream <-------- customer.save


______________________________________________________________________________________________________


private transient int password; 

// 이렇게 transient 키워드를 붙이면 직렬화 대상에서 제외할 수 있다.

-------------------------------------------------------------------------------------------------------

마샬링, 언마샬링
          
객체 ----------------------------------> 내보내기 ----------------------------------> 전송

객체 : 항상 데이터(정보)를 포함하고 있는 객체여야 함.

마샬링 : 객체가 가지고 있는 정보를 전송에 용이한 텍스트(xml, json, csv 등)로 변환하는 것.

언마샬링 : 텍스트 데이터를 분석에 용이한 객체로 변환하는 것.

마샬링: 우리가 컴퓨터에서 어떤 데이터를 네트워크를 통해 다른 컴퓨터로 보내고 싶다면, 
이 데이터를 JSON이나 XML 같은 형식으로 변환(마샬링)해서 보냅니다.

언마샬링: 받은 컴퓨터에서는 이 JSON이나 XML 형식의 데이터를 
다시 원래 데이터로 변환(언마샬링)해서 사용합니다.

마샬링 <--------> 언마샬링은
두 언어가 똑같지 않아도 된다. ( 자바랑 파이썬 사이의 경우도 가능하다. )

★ 쉽게 말해, 마샬링은 데이터를 "포장"하는 과정이고, 
언마샬링은 데이터를 "풀어보는" 과정이라고 생각하면 됩니다. ★


프론트엔드(클라이언트 사이드)                                                                        백엔드(서버 사이드)

 
    자바스크립트 - 리액트, vue.js					 	자바-스프링

 			
			         언마샬링			           마샬링
          자바스크립트 배열객체 <---------------  JSON 텍스트 <----------------------   List<Book>

	
마샬링 : 정보를 제공하는 곳에서 사용한다.
	정보가 저장된 객체를 전송이 용이한 형태의 텍스트로 변환하는 것.

언마샬링 : 정보를 소비하는 측에서 사용한다.
	   획득한 텍스트를 분석이 용이한 형태의 객체로 변환하는 것.

------------------------------------------------------------------------------------------------------- 

