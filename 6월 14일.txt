클래스 형변환
- 자식을 부모에 담을 때 : 형 변환 필요 x [ 어차피 자식을 사용하려 할 때, 없으면 super를 통해
타고 타고 올라갈 수 있다. ]

- 부모를 자식에 담을 때 : 형 변환 필요 
예) Phone phone = new SmartPhone();
SmartPhone smart = (SmartPhone)phone;

(SmartPhone)phone;
- phone 참조변수가 참조하는 객체를 기준으로 자식객체 방향으로 SmartPhone 타입의 객체를
  탐색하게 한다. 
  SmartPhone 타입의 객체가 발견되면 해당 객체의 주소값을 반환한다. 

클래스 강제 형변환을 하는 시점 : 해당 객체가 갖고 있는 고유한 기능을 실행해야 할 때

클래스 형변환은 항상 부모, 자식 상속 관계일 때만 가능함.

재정의가 있으면 건너뛰어서도 재정의된 게 실행됨.
[ 여러 단계에서 재정의 되어 있으면 항상 최후에 재정의된 게 실행됨. ]

타입 뿐만 아니라 실제 생성한 객체도 중요함.
[ 강제 형변환하는 컴파일에는 오류가 안 나지만, 실행 시에 오류가 발생할 수 있다. ]
[ 실제 생성한 객체가 없으면 형변환이 불가능하다. ]
[ ClassCastException이 발생한다 ]

객체지향 프로그래밍에서는 어떤 객체, 어떤 범위까지 만들었는지 파악이 되야함.

매개변수에 참조변수가 있으면, 객체(객체의 주소값)를 넘겨줘야 함.
[ 해당 타입 및 타입의 하위도 다 가능함. - 부모 타입은 자식 객체를 참조할 수 있음 ]
[ 객체가 생성되어 있어야지만 점프가 가능하다. ]

매개변수로 넘길 수 있는 것
- 해당 매개변수와 같은 타입의 객체 [ 동일한 객체 ]
- 해당 매개변수를 부모로 가지고 있는 객체 [ 하위 객체 ]

a instanceof b : a가 참조하는 게 b라는 객체를 포함하고 있는지 확인할 수 있다.
[ 강제 형변환이 가능한 지 여부를 확인할 수 있다. ]
 
추상화 - 구현클래스(자식클래스)가 구현할 내용을 부모 클래스에서 추상메소드로 정의하는 것.

추상클래스
- 추상 클래스는 추상 메서드를 보유할 수 있다. 
- 추상 클래스는 구현 메서드도 보유할 수 있다.
- 추상 클래스는 하위 구현 클래스가 직접 구현할 내용을 추상화할 수 있다.
* 추상화 - 구현부가 없는 추상메서드를 정의하고, 하위 구현 클래스에서 추상메서드를 재정의해서
	 구체적인 실행방법을 구현하도록 하는 것. [ 구체적으로 적지 않음 ]

구현클래스
- 구현 클래스는 추상 메소드를 보유할 수 없다.
- 구현 클래스가 부모 클래스로부터 추상메소드를 상속받았다면 반드시 메서드재정의를 이용해서
추상메서드와 똑같은 메서드 형식으로 메서드를 구현해야 한다.
* 추상클래스에서는 하위 구현클래스가 직접 구현할 기능을 추상메서드로 추상화함으로써 
 하위 구현클래스에게 메서드 재정의를 강제하게 한다. ( 반드시 구체적인 기능을 구현하게 한다. )

추상화 방법
 
1. 추상클래스를 이용한 추상화

- 추상메서드와 구현메서드가 모두 포함된 경우
  * 하위 구현클래스에 구현하는 기능 중에서 특정 기능은 하위 구현클래스에 상관없이 모두
    동일한 경우 해당 기능을 미리 추상클래스에 구현메서드로 구현하는 것이 좋다.
  * 하위 구현클래스의 구현부담을 감소시킨다.
  * 예시 
    - 차트 구현 클래스에서 구현 클래스에 상관없이 차트의 제목은 차트의 상단 중앙에,
    범례는 차트의 오른쪽에 표시된다. 따라서, 차트 제목과 범례를 출력하는 기능은 공통으로
    사용할 수 있으므로 부모 클래스(추상클래스)에서 미리 구현하는 것이다.
 
  public abstract class Chart {
   public abstract void draw();
   public void drawTitle() {}
   public void drawLegend() {}
}

 구현 메서드는 오버라이딩 할 지 말 지 생각해서 쓰면 됨. ( 대다수가 동일하면 그냥 구현해놓는게 나을듯. )

2. 인터페이스를 이용한 추상화
  - 추상메서드만 포함되는 경우
 * 하위 구현클래스가 반드시 구현할 기능을 전부 추상화하는 것이다.
 * 하위 구현클래스가 구현할 기능에 대한 표준이 정의되어 있다.
 * 하위 구현클래스가 구현할 기능에 대한 규격이 정의되어 있다.
 * 하위 구현클래스가 구현할 기능에 대한 스펙이 정의되어 있다.

하위 클래스는 인터페이스에 정의된 추상화된 메서드를 구현할 책임이 있으며,
하위 클래스는 동시에 여러 개의 인터페이스를 구현할 수 있다.
[ 클래스는 단일 상속이지만, 인터페이스는 다중 상속을 지원한다. ]
[ 클래스는 여러 개의 인터페이스를 구현할 수 있다. ]

인터페이스는 상수, 추상메서드로 구성된다.
( 자바 8부터는 정적 메서드와 디폴트 메서드가 추가되었다. - 일반적인 특성은 아님 )

인터페이스도 new 키워드를 사용해서 객체를 생성할 수 없다.

특정 인터페이스를 구현했다 -> 그 구현클래스에는 반드시 인터페이스의 추상화 된 기능이 구현되어
있어야 함.

public abstract class Car{
 public abstract void drive();
 public abstract void stop();
 public abstract void speedUp();
 public abstract void speedDown();
}

public interface Car{
  void drive();
  void stop();
  void speedUp();
  void speedDown();
// public abstract를 생략해도 된다.
}

추상클래스와 인터페이스의 차이

추상클래스의 목적 - 구현 부담의 경감 + 추상화
[ 일부 기능에 대해서만 규격을 정해놓음 ]

인터페이스의 목적 - 개발자에게 알려줄 규격의 역할을 하게 해줌. [ 표준, 규격, 스펙 ]
[ 모든 규격을 모아놓은 것 ]

인터페이스도 재정의 관계에서는 재정의 된 게 실행된다.

여러 개의 인터페이스를 구현한다 = 더 풍부한 기능을 제공한다.

인터페이스의 다중상속 - 표준을 합쳐서 새로운 표준을 만드는 것.
[ 2개 이상의 인터페이스를 조합해서 새로운 표준(규격, 스펙)을 정의하였다. ]

 